{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@web3modal/ui/node_modules/@lit/reactive-element/src/css-tag.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nconst NODE_MODE = false;\n\n// Allows minifiers to rename references to globalThis\nconst global = globalThis;\n\n/**\n * Whether the current browser supports `adoptedStyleSheets`.\n */\nexport const supportsAdoptingStyleSheets: boolean =\n  global.ShadowRoot &&\n  (global.ShadyCSS === undefined || global.ShadyCSS.nativeShadow) &&\n  'adoptedStyleSheets' in Document.prototype &&\n  'replace' in CSSStyleSheet.prototype;\n\n/**\n * A CSSResult or native CSSStyleSheet.\n *\n * In browsers that support constructible CSS style sheets, CSSStyleSheet\n * object can be used for styling along side CSSResult from the `css`\n * template tag.\n */\nexport type CSSResultOrNative = CSSResult | CSSStyleSheet;\n\nexport type CSSResultArray = Array<CSSResultOrNative | CSSResultArray>;\n\n/**\n * A single CSSResult, CSSStyleSheet, or an array or nested arrays of those.\n */\nexport type CSSResultGroup = CSSResultOrNative | CSSResultArray;\n\nconst constructionToken = Symbol();\n\nconst cssTagCache = new WeakMap<TemplateStringsArray, CSSStyleSheet>();\n\n/**\n * A container for a string of CSS text, that may be used to create a CSSStyleSheet.\n *\n * CSSResult is the return value of `css`-tagged template literals and\n * `unsafeCSS()`. In order to ensure that CSSResults are only created via the\n * `css` tag and `unsafeCSS()`, CSSResult cannot be constructed directly.\n */\nexport class CSSResult {\n  // This property needs to remain unminified.\n  ['_$cssResult$'] = true;\n  readonly cssText: string;\n  private _styleSheet?: CSSStyleSheet;\n  private _strings: TemplateStringsArray | undefined;\n\n  private constructor(\n    cssText: string,\n    strings: TemplateStringsArray | undefined,\n    safeToken: symbol\n  ) {\n    if (safeToken !== constructionToken) {\n      throw new Error(\n        'CSSResult is not constructable. Use `unsafeCSS` or `css` instead.'\n      );\n    }\n    this.cssText = cssText;\n    this._strings = strings;\n  }\n\n  // This is a getter so that it's lazy. In practice, this means stylesheets\n  // are not created until the first element instance is made.\n  get styleSheet(): CSSStyleSheet | undefined {\n    // If `supportsAdoptingStyleSheets` is true then we assume CSSStyleSheet is\n    // constructable.\n    let styleSheet = this._styleSheet;\n    const strings = this._strings;\n    if (supportsAdoptingStyleSheets && styleSheet === undefined) {\n      const cacheable = strings !== undefined && strings.length === 1;\n      if (cacheable) {\n        styleSheet = cssTagCache.get(strings);\n      }\n      if (styleSheet === undefined) {\n        (this._styleSheet = styleSheet = new CSSStyleSheet()).replaceSync(\n          this.cssText\n        );\n        if (cacheable) {\n          cssTagCache.set(strings, styleSheet);\n        }\n      }\n    }\n    return styleSheet;\n  }\n\n  toString(): string {\n    return this.cssText;\n  }\n}\n\ntype ConstructableCSSResult = CSSResult & {\n  new (\n    cssText: string,\n    strings: TemplateStringsArray | undefined,\n    safeToken: symbol\n  ): CSSResult;\n};\n\nconst textFromCSSResult = (value: CSSResultGroup | number) => {\n  // This property needs to remain unminified.\n  if ((value as CSSResult)['_$cssResult$'] === true) {\n    return (value as CSSResult).cssText;\n  } else if (typeof value === 'number') {\n    return value;\n  } else {\n    throw new Error(\n      `Value passed to 'css' function must be a 'css' function result: ` +\n        `${value}. Use 'unsafeCSS' to pass non-literal values, but take care ` +\n        `to ensure page security.`\n    );\n  }\n};\n\n/**\n * Wrap a value for interpolation in a {@linkcode css} tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = (value: unknown) =>\n  new (CSSResult as ConstructableCSSResult)(\n    typeof value === 'string' ? value : String(value),\n    undefined,\n    constructionToken\n  );\n\n/**\n * A template literal tag which can be used with LitElement's\n * {@linkcode LitElement.styles} property to set element styles.\n *\n * For security reasons, only literal string values and number may be used in\n * embedded expressions. To incorporate non-literal values {@linkcode unsafeCSS}\n * may be used inside an expression.\n */\nexport const css = (\n  strings: TemplateStringsArray,\n  ...values: (CSSResultGroup | number)[]\n): CSSResult => {\n  const cssText =\n    strings.length === 1\n      ? strings[0]\n      : values.reduce(\n          (acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1],\n          strings[0]\n        );\n  return new (CSSResult as ConstructableCSSResult)(\n    cssText,\n    strings,\n    constructionToken\n  );\n};\n\n/**\n * Applies the given styles to a `shadowRoot`. When Shadow DOM is\n * available but `adoptedStyleSheets` is not, styles are appended to the\n * `shadowRoot` to [mimic spec behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n * Note, when shimming is used, any styles that are subsequently placed into\n * the shadowRoot should be placed *before* any shimmed adopted styles. This\n * will match spec behavior that gives adopted sheets precedence over styles in\n * shadowRoot.\n */\nexport const adoptStyles = (\n  renderRoot: ShadowRoot,\n  styles: Array<CSSResultOrNative>\n) => {\n  if (supportsAdoptingStyleSheets) {\n    (renderRoot as ShadowRoot).adoptedStyleSheets = styles.map((s) =>\n      s instanceof CSSStyleSheet ? s : s.styleSheet!\n    );\n  } else {\n    for (const s of styles) {\n      const style = document.createElement('style');\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const nonce = (global as any)['litNonce'];\n      if (nonce !== undefined) {\n        style.setAttribute('nonce', nonce);\n      }\n      style.textContent = (s as CSSResult).cssText;\n      renderRoot.appendChild(style);\n    }\n  }\n};\n\nconst cssResultFromStyleSheet = (sheet: CSSStyleSheet) => {\n  let cssText = '';\n  for (const rule of sheet.cssRules) {\n    cssText += rule.cssText;\n  }\n  return unsafeCSS(cssText);\n};\n\nexport const getCompatibleStyle =\n  supportsAdoptingStyleSheets ||\n  (NODE_MODE && global.CSSStyleSheet === undefined)\n    ? (s: CSSResultOrNative) => s\n    : (s: CSSResultOrNative) =>\n        s instanceof CSSStyleSheet ? cssResultFromStyleSheet(s) : s;\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;AAMA,MAAM,YAAY;AAElB,sDAAsD;AACtD,MAAM,SAAS;AAKR,MAAM,8BACX,OAAO,UAAU,IACjB,CAAC,OAAO,QAAQ,KAAK,aAAa,OAAO,QAAQ,CAAC,YAAY,KAC9D,wBAAwB,SAAS,SAAS,IAC1C,aAAa,cAAc,SAAS;AAkBtC,MAAM,oBAAoB;AAE1B,MAAM,cAAc,IAAI;AASlB,MAAO;IAOX,YACE,OAAe,EACf,OAAyC,EACzC,SAAiB,CAAA;QATnB,4CAA4C;QAC5C,IAAA,CAAC,eAAe,GAAG;QAUjB,IAAI,cAAc,mBAAmB;YACnC,MAAM,IAAI,MACR;QAEJ;QACA,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,QAAQ,GAAG;IAClB;IAEA,0EAA0E;IAC1E,4DAA4D;IAC5D,IAAI,aAAU;QACZ,2EAA2E;QAC3E,iBAAiB;QACjB,IAAI,aAAa,IAAI,CAAC,WAAW;QACjC,MAAM,UAAU,IAAI,CAAC,QAAQ;QAC7B,IAAI,+BAA+B,eAAe,WAAW;YAC3D,MAAM,YAAY,YAAY,aAAa,QAAQ,MAAM,KAAK;YAC9D,IAAI,WAAW;gBACb,aAAa,YAAY,GAAG,CAAC;YAC/B;YACA,IAAI,eAAe,WAAW;gBAC5B,CAAC,IAAI,CAAC,WAAW,GAAG,aAAa,IAAI,eAAe,EAAE,WAAW,CAC/D,IAAI,CAAC,OAAO;gBAEd,IAAI,WAAW;oBACb,YAAY,GAAG,CAAC,SAAS;gBAC3B;YACF;QACF;QACA,OAAO;IACT;IAEA,WAAQ;QACN,OAAO,IAAI,CAAC,OAAO;IACrB;;AAWF,MAAM,oBAAoB,CAAC;IACzB,4CAA4C;IAC5C,IAAK,KAAmB,CAAC,eAAe,KAAK,MAAM;QACjD,OAAQ,MAAoB,OAAO;IACrC,OAAO,IAAI,OAAO,UAAU,UAAU;QACpC,OAAO;IACT,OAAO;QACL,MAAM,IAAI,MACR,CAAA,gEAAA,CAAkE,GAChE,CAAA,EAAG,MAAK,4DAAA,CAA8D,GACtE,CAAA,wBAAA,CAA0B;IAEhC;AACF;AASO,MAAM,YAAY,CAAC,QACxB,IAAK,UACH,OAAO,UAAU,WAAW,QAAQ,OAAO,QAC3C,WACA;AAWG,MAAM,MAAM,CACjB,SACA,GAAG;IAEH,MAAM,UACJ,QAAQ,MAAM,KAAK,IACf,OAAO,CAAC,EAAE,GACV,OAAO,MAAM,CACX,CAAC,KAAK,GAAG,MAAQ,MAAM,kBAAkB,KAAK,OAAO,CAAC,MAAM,EAAE,EAC9D,OAAO,CAAC,EAAE;IAElB,OAAO,IAAK,UACV,SACA,SACA;AAEJ;AAWO,MAAM,cAAc,CACzB,YACA;IAEA,IAAI,6BAA6B;QAC9B,WAA0B,kBAAkB,GAAG,OAAO,GAAG,CAAC,CAAC,IAC1D,aAAa,gBAAgB,IAAI,EAAE,UAAW;IAElD,OAAO;QACL,KAAK,MAAM,KAAK,OAAQ;YACtB,MAAM,QAAQ,SAAS,aAAa,CAAC;YACrC,8DAA8D;YAC9D,MAAM,QAAS,MAAc,CAAC,WAAW;YACzC,IAAI,UAAU,WAAW;gBACvB,MAAM,YAAY,CAAC,SAAS;YAC9B;YACA,MAAM,WAAW,GAAI,EAAgB,OAAO;YAC5C,WAAW,WAAW,CAAC;QACzB;IACF;AACF;AAEA,MAAM,0BAA0B,CAAC;IAC/B,IAAI,UAAU;IACd,KAAK,MAAM,QAAQ,MAAM,QAAQ,CAAE;QACjC,WAAW,KAAK,OAAO;IACzB;IACA,OAAO,UAAU;AACnB;AAEO,MAAM,qBACX,+BACC,aAAa,OAAO,aAAa,KAAK,YACnC,CAAC,IAAyB,IAC1B,CAAC,IACC,aAAa,gBAAgB,wBAAwB,KAAK"}},
    {"offset": {"line": 97, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 102, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@web3modal/ui/node_modules/@lit/reactive-element/src/reactive-element.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * Use this module if you want to create your own base class extending\n * {@link ReactiveElement}.\n * @packageDocumentation\n */\n\nimport {\n  getCompatibleStyle,\n  adoptStyles,\n  CSSResultGroup,\n  CSSResultOrNative,\n} from './css-tag.js';\nimport type {\n  ReactiveController,\n  ReactiveControllerHost,\n} from './reactive-controller.js';\n\n// In the Node build, this import will be injected by Rollup:\n// import {HTMLElement, customElements} from '@lit-labs/ssr-dom-shim';\n\nexport * from './css-tag.js';\nexport type {\n  ReactiveController,\n  ReactiveControllerHost,\n} from './reactive-controller.js';\n\n/**\n * Removes the `readonly` modifier from properties in the union K.\n *\n * This is a safer way to cast a value to a type with a mutable version of a\n * readonly field, than casting to an interface with the field re-declared\n * because it preserves the type of all the fields and warns on typos.\n */\ntype Mutable<T, K extends keyof T> = Omit<T, K> & {\n  -readonly [P in keyof Pick<T, K>]: P extends K ? T[P] : never;\n};\n\n// TODO (justinfagnani): Add `hasOwn` here when we ship ES2022\nconst {\n  is,\n  defineProperty,\n  getOwnPropertyDescriptor,\n  getOwnPropertyNames,\n  getOwnPropertySymbols,\n  getPrototypeOf,\n} = Object;\n\nconst NODE_MODE = false;\n\n// Lets a minifier replace globalThis references with a minified name\nconst global = globalThis;\n\nif (NODE_MODE) {\n  global.customElements ??= customElements;\n}\n\nconst DEV_MODE = true;\n\nlet issueWarning: (code: string, warning: string) => void;\n\nconst trustedTypes = (global as unknown as {trustedTypes?: {emptyScript: ''}})\n  .trustedTypes;\n\n// Temporary workaround for https://crbug.com/993268\n// Currently, any attribute starting with \"on\" is considered to be a\n// TrustedScript source. Such boolean attributes must be set to the equivalent\n// trusted emptyScript value.\nconst emptyStringForBooleanAttribute = trustedTypes\n  ? (trustedTypes.emptyScript as unknown as '')\n  : '';\n\nconst polyfillSupport = DEV_MODE\n  ? global.reactiveElementPolyfillSupportDevMode\n  : global.reactiveElementPolyfillSupport;\n\nif (DEV_MODE) {\n  // Ensure warnings are issued only 1x, even if multiple versions of Lit\n  // are loaded.\n  const issuedWarnings: Set<string | undefined> = (global.litIssuedWarnings ??=\n    new Set());\n\n  // Issue a warning, if we haven't already.\n  issueWarning = (code: string, warning: string) => {\n    warning += ` See https://lit.dev/msg/${code} for more information.`;\n    if (!issuedWarnings.has(warning)) {\n      console.warn(warning);\n      issuedWarnings.add(warning);\n    }\n  };\n\n  issueWarning(\n    'dev-mode',\n    `Lit is in dev mode. Not recommended for production!`\n  );\n\n  // Issue polyfill support warning.\n  if (global.ShadyDOM?.inUse && polyfillSupport === undefined) {\n    issueWarning(\n      'polyfill-support-missing',\n      `Shadow DOM is being polyfilled via \\`ShadyDOM\\` but ` +\n        `the \\`polyfill-support\\` module has not been loaded.`\n    );\n  }\n}\n\n/**\n * Contains types that are part of the unstable debug API.\n *\n * Everything in this API is not stable and may change or be removed in the future,\n * even on patch releases.\n */\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace ReactiveUnstable {\n  /**\n   * When Lit is running in dev mode and `window.emitLitDebugLogEvents` is true,\n   * we will emit 'lit-debug' events to window, with live details about the update and render\n   * lifecycle. These can be useful for writing debug tooling and visualizations.\n   *\n   * Please be aware that running with window.emitLitDebugLogEvents has performance overhead,\n   * making certain operations that are normally very cheap (like a no-op render) much slower,\n   * because we must copy data and dispatch events.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  export namespace DebugLog {\n    export type Entry = Update;\n    export interface Update {\n      kind: 'update';\n    }\n  }\n}\n\ninterface DebugLoggingWindow {\n  // Even in dev mode, we generally don't want to emit these events, as that's\n  // another level of cost, so only emit them when DEV_MODE is true _and_ when\n  // window.emitLitDebugEvents is true.\n  emitLitDebugLogEvents?: boolean;\n}\n\n/**\n * Useful for visualizing and logging insights into what the Lit template system is doing.\n *\n * Compiled out of prod mode builds.\n */\nconst debugLogEvent = DEV_MODE\n  ? (event: ReactiveUnstable.DebugLog.Entry) => {\n      const shouldEmit = (global as unknown as DebugLoggingWindow)\n        .emitLitDebugLogEvents;\n      if (!shouldEmit) {\n        return;\n      }\n      global.dispatchEvent(\n        new CustomEvent<ReactiveUnstable.DebugLog.Entry>('lit-debug', {\n          detail: event,\n        })\n      );\n    }\n  : undefined;\n\n/*\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\n/*@__INLINE__*/\nconst JSCompiler_renameProperty = <P extends PropertyKey>(\n  prop: P,\n  _obj: unknown\n): P => prop;\n\n/**\n * Converts property values to and from attribute values.\n */\nexport interface ComplexAttributeConverter<Type = unknown, TypeHint = unknown> {\n  /**\n   * Called to convert an attribute value to a property\n   * value.\n   */\n  fromAttribute?(value: string | null, type?: TypeHint): Type;\n\n  /**\n   * Called to convert a property value to an attribute\n   * value.\n   *\n   * It returns unknown instead of string, to be compatible with\n   * https://github.com/WICG/trusted-types (and similar efforts).\n   */\n  toAttribute?(value: Type, type?: TypeHint): unknown;\n}\n\ntype AttributeConverter<Type = unknown, TypeHint = unknown> =\n  | ComplexAttributeConverter<Type>\n  | ((value: string | null, type?: TypeHint) => Type);\n\n/**\n * Defines options for a property accessor.\n */\nexport interface PropertyDeclaration<Type = unknown, TypeHint = unknown> {\n  /**\n   * When set to `true`, indicates the property is internal private state. The\n   * property should not be set by users. When using TypeScript, this property\n   * should be marked as `private` or `protected`, and it is also a common\n   * practice to use a leading `_` in the name. The property is not added to\n   * `observedAttributes`.\n   */\n  readonly state?: boolean;\n\n  /**\n   * Indicates how and whether the property becomes an observed attribute.\n   * If the value is `false`, the property is not added to `observedAttributes`.\n   * If true or absent, the lowercased property name is observed (e.g. `fooBar`\n   * becomes `foobar`). If a string, the string value is observed (e.g\n   * `attribute: 'foo-bar'`).\n   */\n  readonly attribute?: boolean | string;\n\n  /**\n   * Indicates the type of the property. This is used only as a hint for the\n   * `converter` to determine how to convert the attribute\n   * to/from a property.\n   */\n  readonly type?: TypeHint;\n\n  /**\n   * Indicates how to convert the attribute to/from a property. If this value\n   * is a function, it is used to convert the attribute value a the property\n   * value. If it's an object, it can have keys for `fromAttribute` and\n   * `toAttribute`. If no `toAttribute` function is provided and\n   * `reflect` is set to `true`, the property value is set directly to the\n   * attribute. A default `converter` is used if none is provided; it supports\n   * `Boolean`, `String`, `Number`, `Object`, and `Array`. Note,\n   * when a property changes and the converter is used to update the attribute,\n   * the property is never updated again as a result of the attribute changing,\n   * and vice versa.\n   */\n  readonly converter?: AttributeConverter<Type, TypeHint>;\n\n  /**\n   * Indicates if the property should reflect to an attribute.\n   * If `true`, when the property is set, the attribute is set using the\n   * attribute name determined according to the rules for the `attribute`\n   * property option and the value of the property converted using the rules\n   * from the `converter` property option.\n   */\n  readonly reflect?: boolean;\n\n  /**\n   * A function that indicates if a property should be considered changed when\n   * it is set. The function should take the `newValue` and `oldValue` and\n   * return `true` if an update should be requested.\n   */\n  hasChanged?(value: Type, oldValue: Type): boolean;\n\n  /**\n   * Indicates whether an accessor will be created for this property. By\n   * default, an accessor will be generated for this property that requests an\n   * update when set. If this flag is `true`, no accessor will be created, and\n   * it will be the user's responsibility to call\n   * `this.requestUpdate(propertyName, oldValue)` to request an update when\n   * the property changes.\n   */\n  readonly noAccessor?: boolean;\n\n  /**\n   * Whether this property is wrapping accessors. This is set by `@property`\n   * to control the initial value change and reflection logic.\n   *\n   * @internal\n   */\n  wrapped?: boolean;\n}\n\n/**\n * Map of properties to PropertyDeclaration options. For each property an\n * accessor is made, and the property is processed according to the\n * PropertyDeclaration options.\n */\nexport interface PropertyDeclarations {\n  readonly [key: string]: PropertyDeclaration;\n}\n\ntype PropertyDeclarationMap = Map<PropertyKey, PropertyDeclaration>;\n\ntype AttributeMap = Map<string, PropertyKey>;\n\n/**\n * A Map of property keys to values.\n *\n * Takes an optional type parameter T, which when specified as a non-any,\n * non-unknown type, will make the Map more strongly-typed, associating the map\n * keys with their corresponding value type on T.\n *\n * Use `PropertyValues<this>` when overriding ReactiveElement.update() and\n * other lifecycle methods in order to get stronger type-checking on keys\n * and values.\n */\n// This type is conditional so that if the parameter T is not specified, or\n// is `any`, the type will include `Map<PropertyKey, unknown>`. Since T is not\n// given in the uses of PropertyValues in this file, all uses here fallback to\n// meaning `Map<PropertyKey, unknown>`, but if a developer uses\n// `PropertyValues<this>` (or any other value for T) they will get a\n// strongly-typed Map type.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type PropertyValues<T = any> = T extends object\n  ? PropertyValueMap<T>\n  : Map<PropertyKey, unknown>;\n\n/**\n * Do not use, instead prefer {@linkcode PropertyValues}.\n */\n// This type must be exported such that JavaScript generated by the Google\n// Closure Compiler can import a type reference.\nexport interface PropertyValueMap<T> extends Map<PropertyKey, unknown> {\n  get<K extends keyof T>(k: K): T[K] | undefined;\n  set<K extends keyof T>(key: K, value: T[K]): this;\n  has<K extends keyof T>(k: K): boolean;\n  delete<K extends keyof T>(k: K): boolean;\n}\n\nexport const defaultConverter: ComplexAttributeConverter = {\n  toAttribute(value: unknown, type?: unknown): unknown {\n    switch (type) {\n      case Boolean:\n        value = value ? emptyStringForBooleanAttribute : null;\n        break;\n      case Object:\n      case Array:\n        // if the value is `null` or `undefined` pass this through\n        // to allow removing/no change behavior.\n        value = value == null ? value : JSON.stringify(value);\n        break;\n    }\n    return value;\n  },\n\n  fromAttribute(value: string | null, type?: unknown) {\n    let fromValue: unknown = value;\n    switch (type) {\n      case Boolean:\n        fromValue = value !== null;\n        break;\n      case Number:\n        fromValue = value === null ? null : Number(value);\n        break;\n      case Object:\n      case Array:\n        // Do *not* generate exception when invalid JSON is set as elements\n        // don't normally complain on being mis-configured.\n        // TODO(sorvell): Do generate exception in *dev mode*.\n        try {\n          // Assert to adhere to Bazel's \"must type assert JSON parse\" rule.\n          fromValue = JSON.parse(value!) as unknown;\n        } catch (e) {\n          fromValue = null;\n        }\n        break;\n    }\n    return fromValue;\n  },\n};\n\nexport interface HasChanged {\n  (value: unknown, old: unknown): boolean;\n}\n\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual: HasChanged = (value: unknown, old: unknown): boolean =>\n  !is(value, old);\n\nconst defaultPropertyDeclaration: PropertyDeclaration = {\n  attribute: true,\n  type: String,\n  converter: defaultConverter,\n  reflect: false,\n  hasChanged: notEqual,\n};\n\n/**\n * A string representing one of the supported dev mode warning categories.\n */\nexport type WarningKind =\n  | 'change-in-update'\n  | 'migration'\n  | 'async-perform-update';\n\nexport type Initializer = (element: ReactiveElement) => void;\n\n// Temporary, until google3 is on TypeScript 5.2\ndeclare global {\n  interface SymbolConstructor {\n    readonly metadata: unique symbol;\n  }\n}\n\n// Ensure metadata is enabled. TypeScript does not polyfill\n// Symbol.metadata, so we must ensure that it exists.\n(Symbol as {metadata: symbol}).metadata ??= Symbol('metadata');\n\ndeclare global {\n  // This is public global API, do not change!\n  // eslint-disable-next-line no-var\n  var litPropertyMetadata: WeakMap<\n    object,\n    Map<PropertyKey, PropertyDeclaration>\n  >;\n}\n\n// Map from a class's metadata object to property options\n// Note that we must use nullish-coalescing assignment so that we only use one\n// map even if we load multiple version of this module.\nglobal.litPropertyMetadata ??= new WeakMap<\n  object,\n  Map<PropertyKey, PropertyDeclaration>\n>();\n\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclasses to render updates as desired.\n * @noInheritDoc\n */\nexport abstract class ReactiveElement\n  // In the Node build, this `extends` clause will be substituted with\n  // `(globalThis.HTMLElement ?? HTMLElement)`.\n  //\n  // This way, we will first prefer any global `HTMLElement` polyfill that the\n  // user has assigned, and then fall back to the `HTMLElement` shim which has\n  // been imported (see note at the top of this file about how this import is\n  // generated by Rollup). Note that the `HTMLElement` variable has been\n  // shadowed by this import, so it no longer refers to the global.\n  extends HTMLElement\n  implements ReactiveControllerHost\n{\n  // Note: these are patched in only in DEV_MODE.\n  /**\n   * Read or set all the enabled warning categories for this class.\n   *\n   * This property is only used in development builds.\n   *\n   * @nocollapse\n   * @category dev-mode\n   */\n  static enabledWarnings?: WarningKind[];\n\n  /**\n   * Enable the given warning category for this class.\n   *\n   * This method only exists in development builds, so it should be accessed\n   * with a guard like:\n   *\n   * ```ts\n   * // Enable for all ReactiveElement subclasses\n   * ReactiveElement.enableWarning?.('migration');\n   *\n   * // Enable for only MyElement and subclasses\n   * MyElement.enableWarning?.('migration');\n   * ```\n   *\n   * @nocollapse\n   * @category dev-mode\n   */\n  static enableWarning?: (warningKind: WarningKind) => void;\n\n  /**\n   * Disable the given warning category for this class.\n   *\n   * This method only exists in development builds, so it should be accessed\n   * with a guard like:\n   *\n   * ```ts\n   * // Disable for all ReactiveElement subclasses\n   * ReactiveElement.disableWarning?.('migration');\n   *\n   * // Disable for only MyElement and subclasses\n   * MyElement.disableWarning?.('migration');\n   * ```\n   *\n   * @nocollapse\n   * @category dev-mode\n   */\n  static disableWarning?: (warningKind: WarningKind) => void;\n\n  /**\n   * Adds an initializer function to the class that is called during instance\n   * construction.\n   *\n   * This is useful for code that runs against a `ReactiveElement`\n   * subclass, such as a decorator, that needs to do work for each\n   * instance, such as setting up a `ReactiveController`.\n   *\n   * ```ts\n   * const myDecorator = (target: typeof ReactiveElement, key: string) => {\n   *   target.addInitializer((instance: ReactiveElement) => {\n   *     // This is run during construction of the element\n   *     new MyController(instance);\n   *   });\n   * }\n   * ```\n   *\n   * Decorating a field will then cause each instance to run an initializer\n   * that adds a controller:\n   *\n   * ```ts\n   * class MyElement extends LitElement {\n   *   @myDecorator foo;\n   * }\n   * ```\n   *\n   * Initializers are stored per-constructor. Adding an initializer to a\n   * subclass does not add it to a superclass. Since initializers are run in\n   * constructors, initializers will run in order of the class hierarchy,\n   * starting with superclasses and progressing to the instance's class.\n   *\n   * @nocollapse\n   */\n  static addInitializer(initializer: Initializer) {\n    this.__prepare();\n    (this._initializers ??= []).push(initializer);\n  }\n\n  static _initializers?: Initializer[];\n\n  /*\n   * Due to closure compiler ES6 compilation bugs, @nocollapse is required on\n   * all static methods and properties with initializers.  Reference:\n   * - https://github.com/google/closure-compiler/issues/1776\n   */\n\n  /**\n   * Maps attribute names to properties; for example `foobar` attribute to\n   * `fooBar` property. Created lazily on user subclasses when finalizing the\n   * class.\n   * @nocollapse\n   */\n  private static __attributeToPropertyMap: AttributeMap;\n\n  /**\n   * Marks class as having been finalized, which includes creating properties\n   * from `static properties`, but does *not* include all properties created\n   * from decorators.\n   * @nocollapse\n   */\n  protected static finalized: true | undefined;\n\n  /**\n   * Memoized list of all element properties, including any superclass\n   * properties. Created lazily on user subclasses when finalizing the class.\n   *\n   * @nocollapse\n   * @category properties\n   */\n  static elementProperties: PropertyDeclarationMap;\n\n  /**\n   * User-supplied object that maps property names to `PropertyDeclaration`\n   * objects containing options for configuring reactive properties. When\n   * a reactive property is set the element will update and render.\n   *\n   * By default properties are public fields, and as such, they should be\n   * considered as primarily settable by element users, either via attribute or\n   * the property itself.\n   *\n   * Generally, properties that are changed by the element should be private or\n   * protected fields and should use the `state: true` option. Properties\n   * marked as `state` do not reflect from the corresponding attribute\n   *\n   * However, sometimes element code does need to set a public property. This\n   * should typically only be done in response to user interaction, and an event\n   * should be fired informing the user; for example, a checkbox sets its\n   * `checked` property when clicked and fires a `changed` event. Mutating\n   * public properties should typically not be done for non-primitive (object or\n   * array) properties. In other cases when an element needs to manage state, a\n   * private property set with the `state: true` option should be used. When\n   * needed, state properties can be initialized via public properties to\n   * facilitate complex interactions.\n   * @nocollapse\n   * @category properties\n   */\n  static properties: PropertyDeclarations;\n\n  /**\n   * Memoized list of all element styles.\n   * Created lazily on user subclasses when finalizing the class.\n   * @nocollapse\n   * @category styles\n   */\n  static elementStyles: Array<CSSResultOrNative> = [];\n\n  /**\n   * Array of styles to apply to the element. The styles should be defined\n   * using the {@linkcode css} tag function, via constructible stylesheets, or\n   * imported from native CSS module scripts.\n   *\n   * Note on Content Security Policy:\n   *\n   * Element styles are implemented with `<style>` tags when the browser doesn't\n   * support adopted StyleSheets. To use such `<style>` tags with the style-src\n   * CSP directive, the style-src value must either include 'unsafe-inline' or\n   * `nonce-<base64-value>` with `<base64-value>` replaced be a server-generated\n   * nonce.\n   *\n   * To provide a nonce to use on generated `<style>` elements, set\n   * `window.litNonce` to a server-generated nonce in your page's HTML, before\n   * loading application code:\n   *\n   * ```html\n   * <script>\n   *   // Generated and unique per request:\n   *   window.litNonce = 'a1b2c3d4';\n   * </script>\n   * ```\n   * @nocollapse\n   * @category styles\n   */\n  static styles?: CSSResultGroup;\n\n  /**\n   * Returns a list of attributes corresponding to the registered properties.\n   * @nocollapse\n   * @category attributes\n   */\n  static get observedAttributes() {\n    // Ensure we've created all properties\n    this.finalize();\n    // this.__attributeToPropertyMap is only undefined after finalize() in\n    // ReactiveElement itself. ReactiveElement.observedAttributes is only\n    // accessed with ReactiveElement as the receiver when a subclass or mixin\n    // calls super.observedAttributes\n    return (\n      this.__attributeToPropertyMap && [...this.__attributeToPropertyMap.keys()]\n    );\n  }\n\n  private __instanceProperties?: PropertyValues = undefined;\n\n  /**\n   * Creates a property accessor on the element prototype if one does not exist\n   * and stores a {@linkcode PropertyDeclaration} for the property with the\n   * given options. The property setter calls the property's `hasChanged`\n   * property option or uses a strict identity check to determine whether or not\n   * to request an update.\n   *\n   * This method may be overridden to customize properties; however,\n   * when doing so, it's important to call `super.createProperty` to ensure\n   * the property is setup correctly. This method calls\n   * `getPropertyDescriptor` internally to get a descriptor to install.\n   * To customize what properties do when they are get or set, override\n   * `getPropertyDescriptor`. To customize the options for a property,\n   * implement `createProperty` like this:\n   *\n   * ```ts\n   * static createProperty(name, options) {\n   *   options = Object.assign(options, {myOption: true});\n   *   super.createProperty(name, options);\n   * }\n   * ```\n   *\n   * @nocollapse\n   * @category properties\n   */\n  static createProperty(\n    name: PropertyKey,\n    options: PropertyDeclaration = defaultPropertyDeclaration\n  ) {\n    // If this is a state property, force the attribute to false.\n    if (options.state) {\n      (options as Mutable<PropertyDeclaration, 'attribute'>).attribute = false;\n    }\n    this.__prepare();\n    this.elementProperties.set(name, options);\n    if (!options.noAccessor) {\n      const key = DEV_MODE\n        ? // Use Symbol.for in dev mode to make it easier to maintain state\n          // when doing HMR.\n          Symbol.for(`${String(name)} (@property() cache)`)\n        : Symbol();\n      const descriptor = this.getPropertyDescriptor(name, key, options);\n      if (descriptor !== undefined) {\n        defineProperty(this.prototype, name, descriptor);\n      }\n    }\n  }\n\n  /**\n   * Returns a property descriptor to be defined on the given named property.\n   * If no descriptor is returned, the property will not become an accessor.\n   * For example,\n   *\n   * ```ts\n   * class MyElement extends LitElement {\n   *   static getPropertyDescriptor(name, key, options) {\n   *     const defaultDescriptor =\n   *         super.getPropertyDescriptor(name, key, options);\n   *     const setter = defaultDescriptor.set;\n   *     return {\n   *       get: defaultDescriptor.get,\n   *       set(value) {\n   *         setter.call(this, value);\n   *         // custom action.\n   *       },\n   *       configurable: true,\n   *       enumerable: true\n   *     }\n   *   }\n   * }\n   * ```\n   *\n   * @nocollapse\n   * @category properties\n   */\n  protected static getPropertyDescriptor(\n    name: PropertyKey,\n    key: string | symbol,\n    options: PropertyDeclaration\n  ): PropertyDescriptor | undefined {\n    const {get, set} = getOwnPropertyDescriptor(this.prototype, name) ?? {\n      get(this: ReactiveElement) {\n        return this[key as keyof typeof this];\n      },\n      set(this: ReactiveElement, v: unknown) {\n        (this as unknown as Record<string | symbol, unknown>)[key] = v;\n      },\n    };\n    if (DEV_MODE && get == null) {\n      if ('value' in (getOwnPropertyDescriptor(this.prototype, name) ?? {})) {\n        throw new Error(\n          `Field ${JSON.stringify(String(name))} on ` +\n            `${this.name} was declared as a reactive property ` +\n            `but it's actually declared as a value on the prototype. ` +\n            `Usually this is due to using @property or @state on a method.`\n        );\n      }\n      issueWarning(\n        'reactive-property-without-getter',\n        `Field ${JSON.stringify(String(name))} on ` +\n          `${this.name} was declared as a reactive property ` +\n          `but it does not have a getter. This will be an error in a ` +\n          `future version of Lit.`\n      );\n    }\n    return {\n      get(this: ReactiveElement) {\n        return get?.call(this);\n      },\n      set(this: ReactiveElement, value: unknown) {\n        const oldValue = get?.call(this);\n        set!.call(this, value);\n        this.requestUpdate(name, oldValue, options);\n      },\n      configurable: true,\n      enumerable: true,\n    };\n  }\n\n  /**\n   * Returns the property options associated with the given property.\n   * These options are defined with a `PropertyDeclaration` via the `properties`\n   * object or the `@property` decorator and are registered in\n   * `createProperty(...)`.\n   *\n   * Note, this method should be considered \"final\" and not overridden. To\n   * customize the options for a given property, override\n   * {@linkcode createProperty}.\n   *\n   * @nocollapse\n   * @final\n   * @category properties\n   */\n  static getPropertyOptions(name: PropertyKey) {\n    return this.elementProperties.get(name) ?? defaultPropertyDeclaration;\n  }\n\n  // Temporary, until google3 is on TypeScript 5.2\n  declare static [Symbol.metadata]: object & Record<PropertyKey, unknown>;\n\n  /**\n   * Initializes static own properties of the class used in bookkeeping\n   * for element properties, initializers, etc.\n   *\n   * Can be called multiple times by code that needs to ensure these\n   * properties exist before using them.\n   *\n   * This method ensures the superclass is finalized so that inherited\n   * property metadata can be copied down.\n   * @nocollapse\n   */\n  private static __prepare() {\n    if (\n      this.hasOwnProperty(JSCompiler_renameProperty('elementProperties', this))\n    ) {\n      // Already prepared\n      return;\n    }\n    // Finalize any superclasses\n    const superCtor = getPrototypeOf(this) as typeof ReactiveElement;\n    superCtor.finalize();\n\n    // Create own set of initializers for this class if any exist on the\n    // superclass and copy them down. Note, for a small perf boost, avoid\n    // creating initializers unless needed.\n    if (superCtor._initializers !== undefined) {\n      this._initializers = [...superCtor._initializers];\n    }\n    // Initialize elementProperties from the superclass\n    this.elementProperties = new Map(superCtor.elementProperties);\n  }\n\n  /**\n   * Finishes setting up the class so that it's ready to be registered\n   * as a custom element and instantiated.\n   *\n   * This method is called by the ReactiveElement.observedAttributes getter.\n   * If you override the observedAttributes getter, you must either call\n   * super.observedAttributes to trigger finalization, or call finalize()\n   * yourself.\n   *\n   * @nocollapse\n   */\n  protected static finalize() {\n    if (this.hasOwnProperty(JSCompiler_renameProperty('finalized', this))) {\n      return;\n    }\n    this.finalized = true;\n    this.__prepare();\n\n    // Create properties from the static properties block:\n    if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n      const props = this.properties;\n      const propKeys = [\n        ...getOwnPropertyNames(props),\n        ...getOwnPropertySymbols(props),\n      ] as Array<keyof typeof props>;\n      for (const p of propKeys) {\n        this.createProperty(p, props[p]);\n      }\n    }\n\n    // Create properties from standard decorator metadata:\n    const metadata = this[Symbol.metadata];\n    if (metadata !== null) {\n      const properties = litPropertyMetadata.get(metadata);\n      if (properties !== undefined) {\n        for (const [p, options] of properties) {\n          this.elementProperties.set(p, options);\n        }\n      }\n    }\n\n    // Create the attribute-to-property map\n    this.__attributeToPropertyMap = new Map();\n    for (const [p, options] of this.elementProperties) {\n      const attr = this.__attributeNameForProperty(p, options);\n      if (attr !== undefined) {\n        this.__attributeToPropertyMap.set(attr, p);\n      }\n    }\n\n    this.elementStyles = this.finalizeStyles(this.styles);\n\n    if (DEV_MODE) {\n      if (this.hasOwnProperty('createProperty')) {\n        issueWarning(\n          'no-override-create-property',\n          'Overriding ReactiveElement.createProperty() is deprecated. ' +\n            'The override will not be called with standard decorators'\n        );\n      }\n      if (this.hasOwnProperty('getPropertyDescriptor')) {\n        issueWarning(\n          'no-override-get-property-descriptor',\n          'Overriding ReactiveElement.getPropertyDescriptor() is deprecated. ' +\n            'The override will not be called with standard decorators'\n        );\n      }\n    }\n  }\n\n  /**\n   * Options used when calling `attachShadow`. Set this property to customize\n   * the options for the shadowRoot; for example, to create a closed\n   * shadowRoot: `{mode: 'closed'}`.\n   *\n   * Note, these options are used in `createRenderRoot`. If this method\n   * is customized, options should be respected if possible.\n   * @nocollapse\n   * @category rendering\n   */\n  static shadowRootOptions: ShadowRootInit = {mode: 'open'};\n\n  /**\n   * Takes the styles the user supplied via the `static styles` property and\n   * returns the array of styles to apply to the element.\n   * Override this method to integrate into a style management system.\n   *\n   * Styles are deduplicated preserving the _last_ instance in the list. This\n   * is a performance optimization to avoid duplicated styles that can occur\n   * especially when composing via subclassing. The last item is kept to try\n   * to preserve the cascade order with the assumption that it's most important\n   * that last added styles override previous styles.\n   *\n   * @nocollapse\n   * @category styles\n   */\n  protected static finalizeStyles(\n    styles?: CSSResultGroup\n  ): Array<CSSResultOrNative> {\n    const elementStyles = [];\n    if (Array.isArray(styles)) {\n      // Dedupe the flattened array in reverse order to preserve the last items.\n      // Casting to Array<unknown> works around TS error that\n      // appears to come from trying to flatten a type CSSResultArray.\n      const set = new Set((styles as Array<unknown>).flat(Infinity).reverse());\n      // Then preserve original order by adding the set items in reverse order.\n      for (const s of set) {\n        elementStyles.unshift(getCompatibleStyle(s as CSSResultOrNative));\n      }\n    } else if (styles !== undefined) {\n      elementStyles.push(getCompatibleStyle(styles));\n    }\n    return elementStyles;\n  }\n\n  /**\n   * Node or ShadowRoot into which element DOM should be rendered. Defaults\n   * to an open shadowRoot.\n   * @category rendering\n   */\n  readonly renderRoot!: HTMLElement | DocumentFragment;\n\n  /**\n   * Returns the property name for the given attribute `name`.\n   * @nocollapse\n   */\n  private static __attributeNameForProperty(\n    name: PropertyKey,\n    options: PropertyDeclaration\n  ) {\n    const attribute = options.attribute;\n    return attribute === false\n      ? undefined\n      : typeof attribute === 'string'\n      ? attribute\n      : typeof name === 'string'\n      ? name.toLowerCase()\n      : undefined;\n  }\n\n  // Initialize to an unresolved Promise so we can make sure the element has\n  // connected before first update.\n  private __updatePromise!: Promise<boolean>;\n\n  /**\n   * True if there is a pending update as a result of calling `requestUpdate()`.\n   * Should only be read.\n   * @category updates\n   */\n  isUpdatePending = false;\n\n  /**\n   * Is set to `true` after the first update. The element code cannot assume\n   * that `renderRoot` exists before the element `hasUpdated`.\n   * @category updates\n   */\n  hasUpdated = false;\n\n  /**\n   * Map with keys for any properties that have changed since the last\n   * update cycle with previous values.\n   *\n   * @internal\n   */\n  _$changedProperties!: PropertyValues;\n\n  /**\n   * Properties that should be reflected when updated.\n   */\n  private __reflectingProperties?: Set<PropertyKey>;\n\n  /**\n   * Name of currently reflecting property\n   */\n  private __reflectingProperty: PropertyKey | null = null;\n\n  /**\n   * Set of controllers.\n   */\n  private __controllers?: Set<ReactiveController>;\n\n  constructor() {\n    super();\n    this.__initialize();\n  }\n\n  /**\n   * Internal only override point for customizing work done when elements\n   * are constructed.\n   */\n  private __initialize() {\n    this.__updatePromise = new Promise<boolean>(\n      (res) => (this.enableUpdating = res)\n    );\n    this._$changedProperties = new Map();\n    // This enqueues a microtask that ust run before the first update, so it\n    // must be called before requestUpdate()\n    this.__saveInstanceProperties();\n    // ensures first update will be caught by an early access of\n    // `updateComplete`\n    this.requestUpdate();\n    (this.constructor as typeof ReactiveElement)._initializers?.forEach((i) =>\n      i(this)\n    );\n  }\n\n  /**\n   * Registers a `ReactiveController` to participate in the element's reactive\n   * update cycle. The element automatically calls into any registered\n   * controllers during its lifecycle callbacks.\n   *\n   * If the element is connected when `addController()` is called, the\n   * controller's `hostConnected()` callback will be immediately called.\n   * @category controllers\n   */\n  addController(controller: ReactiveController) {\n    (this.__controllers ??= new Set()).add(controller);\n    // If a controller is added after the element has been connected,\n    // call hostConnected. Note, re-using existence of `renderRoot` here\n    // (which is set in connectedCallback) to avoid the need to track a\n    // first connected state.\n    if (this.renderRoot !== undefined && this.isConnected) {\n      controller.hostConnected?.();\n    }\n  }\n\n  /**\n   * Removes a `ReactiveController` from the element.\n   * @category controllers\n   */\n  removeController(controller: ReactiveController) {\n    this.__controllers?.delete(controller);\n  }\n\n  /**\n   * Fixes any properties set on the instance before upgrade time.\n   * Otherwise these would shadow the accessor and break these properties.\n   * The properties are stored in a Map which is played back after the\n   * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n   * (<=41), properties created for native platform properties like (`id` or\n   * `name`) may not have default values set in the element constructor. On\n   * these browsers native properties appear on instances and therefore their\n   * default value will overwrite any element default (e.g. if the element sets\n   * this.id = 'id' in the constructor, the 'id' will become '' since this is\n   * the native platform default).\n   */\n  private __saveInstanceProperties() {\n    const instanceProperties = new Map<PropertyKey, unknown>();\n    const elementProperties = (this.constructor as typeof ReactiveElement)\n      .elementProperties;\n    for (const p of elementProperties.keys() as IterableIterator<keyof this>) {\n      if (this.hasOwnProperty(p)) {\n        instanceProperties.set(p, this[p]);\n        delete this[p];\n      }\n    }\n    if (instanceProperties.size > 0) {\n      this.__instanceProperties = instanceProperties;\n    }\n  }\n\n  /**\n   * Returns the node into which the element should render and by default\n   * creates and returns an open shadowRoot. Implement to customize where the\n   * element's DOM is rendered. For example, to render into the element's\n   * childNodes, return `this`.\n   *\n   * @return Returns a node into which to render.\n   * @category rendering\n   */\n  protected createRenderRoot(): HTMLElement | DocumentFragment {\n    const renderRoot =\n      this.shadowRoot ??\n      this.attachShadow(\n        (this.constructor as typeof ReactiveElement).shadowRootOptions\n      );\n    adoptStyles(\n      renderRoot,\n      (this.constructor as typeof ReactiveElement).elementStyles\n    );\n    return renderRoot;\n  }\n\n  /**\n   * On first connection, creates the element's renderRoot, sets up\n   * element styling, and enables updating.\n   * @category lifecycle\n   */\n  connectedCallback() {\n    // Create renderRoot before controllers `hostConnected`\n    (this as Mutable<typeof this, 'renderRoot'>).renderRoot ??=\n      this.createRenderRoot();\n    this.enableUpdating(true);\n    this.__controllers?.forEach((c) => c.hostConnected?.());\n  }\n\n  /**\n   * Note, this method should be considered final and not overridden. It is\n   * overridden on the element instance with a function that triggers the first\n   * update.\n   * @category updates\n   */\n  protected enableUpdating(_requestedUpdate: boolean) {}\n\n  /**\n   * Allows for `super.disconnectedCallback()` in extensions while\n   * reserving the possibility of making non-breaking feature additions\n   * when disconnecting at some point in the future.\n   * @category lifecycle\n   */\n  disconnectedCallback() {\n    this.__controllers?.forEach((c) => c.hostDisconnected?.());\n  }\n\n  /**\n   * Synchronizes property values when attributes change.\n   *\n   * Specifically, when an attribute is set, the corresponding property is set.\n   * You should rarely need to implement this callback. If this method is\n   * overridden, `super.attributeChangedCallback(name, _old, value)` must be\n   * called.\n   *\n   * See [using the lifecycle callbacks](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#using_the_lifecycle_callbacks)\n   * on MDN for more information about the `attributeChangedCallback`.\n   * @category attributes\n   */\n  attributeChangedCallback(\n    name: string,\n    _old: string | null,\n    value: string | null\n  ) {\n    this._$attributeToProperty(name, value);\n  }\n\n  private __propertyToAttribute(name: PropertyKey, value: unknown) {\n    const elemProperties: PropertyDeclarationMap = (\n      this.constructor as typeof ReactiveElement\n    ).elementProperties;\n    const options = elemProperties.get(name)!;\n    const attr = (\n      this.constructor as typeof ReactiveElement\n    ).__attributeNameForProperty(name, options);\n    if (attr !== undefined && options.reflect === true) {\n      const converter =\n        (options.converter as ComplexAttributeConverter)?.toAttribute !==\n        undefined\n          ? (options.converter as ComplexAttributeConverter)\n          : defaultConverter;\n      const attrValue = converter.toAttribute!(value, options.type);\n      if (\n        DEV_MODE &&\n        (this.constructor as typeof ReactiveElement).enabledWarnings!.includes(\n          'migration'\n        ) &&\n        attrValue === undefined\n      ) {\n        issueWarning(\n          'undefined-attribute-value',\n          `The attribute value for the ${name as string} property is ` +\n            `undefined on element ${this.localName}. The attribute will be ` +\n            `removed, but in the previous version of \\`ReactiveElement\\`, ` +\n            `the attribute would not have changed.`\n        );\n      }\n      // Track if the property is being reflected to avoid\n      // setting the property again via `attributeChangedCallback`. Note:\n      // 1. this takes advantage of the fact that the callback is synchronous.\n      // 2. will behave incorrectly if multiple attributes are in the reaction\n      // stack at time of calling. However, since we process attributes\n      // in `update` this should not be possible (or an extreme corner case\n      // that we'd like to discover).\n      // mark state reflecting\n      this.__reflectingProperty = name;\n      if (attrValue == null) {\n        this.removeAttribute(attr);\n      } else {\n        this.setAttribute(attr, attrValue as string);\n      }\n      // mark state not reflecting\n      this.__reflectingProperty = null;\n    }\n  }\n\n  /** @internal */\n  _$attributeToProperty(name: string, value: string | null) {\n    const ctor = this.constructor as typeof ReactiveElement;\n    // Note, hint this as an `AttributeMap` so closure clearly understands\n    // the type; it has issues with tracking types through statics\n    const propName = (ctor.__attributeToPropertyMap as AttributeMap).get(name);\n    // Use tracking info to avoid reflecting a property value to an attribute\n    // if it was just set because the attribute changed.\n    if (propName !== undefined && this.__reflectingProperty !== propName) {\n      const options = ctor.getPropertyOptions(propName);\n      const converter =\n        typeof options.converter === 'function'\n          ? {fromAttribute: options.converter}\n          : options.converter?.fromAttribute !== undefined\n          ? options.converter\n          : defaultConverter;\n      // mark state reflecting\n      this.__reflectingProperty = propName;\n      this[propName as keyof this] = converter.fromAttribute!(\n        value,\n        options.type\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      ) as any;\n      // mark state not reflecting\n      this.__reflectingProperty = null;\n    }\n  }\n\n  /**\n   * Requests an update which is processed asynchronously. This should be called\n   * when an element should update based on some state not triggered by setting\n   * a reactive property. In this case, pass no arguments. It should also be\n   * called when manually implementing a property setter. In this case, pass the\n   * property `name` and `oldValue` to ensure that any configured property\n   * options are honored.\n   *\n   * @param name name of requesting property\n   * @param oldValue old value of requesting property\n   * @param options property options to use instead of the previously\n   *     configured options\n   * @category updates\n   */\n  requestUpdate(\n    name?: PropertyKey,\n    oldValue?: unknown,\n    options?: PropertyDeclaration\n  ): void {\n    // If we have a property key, perform property update steps.\n    if (name !== undefined) {\n      if (DEV_MODE && (name as unknown) instanceof Event) {\n        issueWarning(\n          ``,\n          `The requestUpdate() method was called with an Event as the property name. This is probably a mistake caused by binding this.requestUpdate as an event listener. Instead bind a function that will call it with no arguments: () => this.requestUpdate()`\n        );\n      }\n      options ??= (\n        this.constructor as typeof ReactiveElement\n      ).getPropertyOptions(name);\n      const hasChanged = options.hasChanged ?? notEqual;\n      const newValue = this[name as keyof this];\n      if (hasChanged(newValue, oldValue)) {\n        this._$changeProperty(name, oldValue, options);\n      } else {\n        // Abort the request if the property should not be considered changed.\n        return;\n      }\n    }\n    if (this.isUpdatePending === false) {\n      this.__updatePromise = this.__enqueueUpdate();\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _$changeProperty(\n    name: PropertyKey,\n    oldValue: unknown,\n    options: PropertyDeclaration\n  ) {\n    // TODO (justinfagnani): Create a benchmark of Map.has() + Map.set(\n    // vs just Map.set()\n    if (!this._$changedProperties.has(name)) {\n      this._$changedProperties.set(name, oldValue);\n    }\n    // Add to reflecting properties set.\n    // Note, it's important that every change has a chance to add the\n    // property to `__reflectingProperties`. This ensures setting\n    // attribute + property reflects correctly.\n    if (options.reflect === true && this.__reflectingProperty !== name) {\n      (this.__reflectingProperties ??= new Set<PropertyKey>()).add(name);\n    }\n  }\n\n  /**\n   * Sets up the element to asynchronously update.\n   */\n  private async __enqueueUpdate() {\n    this.isUpdatePending = true;\n    try {\n      // Ensure any previous update has resolved before updating.\n      // This `await` also ensures that property changes are batched.\n      await this.__updatePromise;\n    } catch (e) {\n      // Refire any previous errors async so they do not disrupt the update\n      // cycle. Errors are refired so developers have a chance to observe\n      // them, and this can be done by implementing\n      // `window.onunhandledrejection`.\n      Promise.reject(e);\n    }\n    const result = this.scheduleUpdate();\n    // If `scheduleUpdate` returns a Promise, we await it. This is done to\n    // enable coordinating updates with a scheduler. Note, the result is\n    // checked to avoid delaying an additional microtask unless we need to.\n    if (result != null) {\n      await result;\n    }\n    return !this.isUpdatePending;\n  }\n\n  /**\n   * Schedules an element update. You can override this method to change the\n   * timing of updates by returning a Promise. The update will await the\n   * returned Promise, and you should resolve the Promise to allow the update\n   * to proceed. If this method is overridden, `super.scheduleUpdate()`\n   * must be called.\n   *\n   * For instance, to schedule updates to occur just before the next frame:\n   *\n   * ```ts\n   * override protected async scheduleUpdate(): Promise<unknown> {\n   *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n   *   super.scheduleUpdate();\n   * }\n   * ```\n   * @category updates\n   */\n  protected scheduleUpdate(): void | Promise<unknown> {\n    const result = this.performUpdate();\n    if (\n      DEV_MODE &&\n      (this.constructor as typeof ReactiveElement).enabledWarnings!.includes(\n        'async-perform-update'\n      ) &&\n      typeof (result as unknown as Promise<unknown> | undefined)?.then ===\n        'function'\n    ) {\n      issueWarning(\n        'async-perform-update',\n        `Element ${this.localName} returned a Promise from performUpdate(). ` +\n          `This behavior is deprecated and will be removed in a future ` +\n          `version of ReactiveElement.`\n      );\n    }\n    return result;\n  }\n\n  /**\n   * Performs an element update. Note, if an exception is thrown during the\n   * update, `firstUpdated` and `updated` will not be called.\n   *\n   * Call `performUpdate()` to immediately process a pending update. This should\n   * generally not be needed, but it can be done in rare cases when you need to\n   * update synchronously.\n   *\n   * @category updates\n   */\n  protected performUpdate(): void {\n    // Abort any update if one is not pending when this is called.\n    // This can happen if `performUpdate` is called early to \"flush\"\n    // the update.\n    if (!this.isUpdatePending) {\n      return;\n    }\n    debugLogEvent?.({kind: 'update'});\n    if (!this.hasUpdated) {\n      // Create renderRoot before first update. This occurs in `connectedCallback`\n      // but is done here to support out of tree calls to `enableUpdating`/`performUpdate`.\n      (this as Mutable<typeof this, 'renderRoot'>).renderRoot ??=\n        this.createRenderRoot();\n      if (DEV_MODE) {\n        // Produce warning if any reactive properties on the prototype are\n        // shadowed by class fields. Instance fields set before upgrade are\n        // deleted by this point, so any own property is caused by class field\n        // initialization in the constructor.\n        const ctor = this.constructor as typeof ReactiveElement;\n        const shadowedProperties = [...ctor.elementProperties.keys()].filter(\n          (p) => this.hasOwnProperty(p) && p in getPrototypeOf(this)\n        );\n        if (shadowedProperties.length) {\n          throw new Error(\n            `The following properties on element ${this.localName} will not ` +\n              `trigger updates as expected because they are set using class ` +\n              `fields: ${shadowedProperties.join(', ')}. ` +\n              `Native class fields and some compiled output will overwrite ` +\n              `accessors used for detecting changes. See ` +\n              `https://lit.dev/msg/class-field-shadowing ` +\n              `for more information.`\n          );\n        }\n      }\n      // Mixin instance properties once, if they exist.\n      if (this.__instanceProperties) {\n        // TODO (justinfagnani): should we use the stored value? Could a new value\n        // have been set since we stored the own property value?\n        for (const [p, value] of this.__instanceProperties) {\n          this[p as keyof this] = value as this[keyof this];\n        }\n        this.__instanceProperties = undefined;\n      }\n      // Trigger initial value reflection and populate the initial\n      // changedProperties map, but only for the case of experimental\n      // decorators on accessors, which will not have already populated the\n      // changedProperties map. We can't know if these accessors had\n      // initializers, so we just set them anyway - a difference from\n      // experimental decorators on fields and standard decorators on\n      // auto-accessors.\n      // For context why experimentalDecorators with auto accessors are handled\n      // specifically also see:\n      // https://github.com/lit/lit/pull/4183#issuecomment-1711959635\n      const elementProperties = (this.constructor as typeof ReactiveElement)\n        .elementProperties;\n      if (elementProperties.size > 0) {\n        for (const [p, options] of elementProperties) {\n          if (\n            options.wrapped === true &&\n            !this._$changedProperties.has(p) &&\n            this[p as keyof this] !== undefined\n          ) {\n            this._$changeProperty(p, this[p as keyof this], options);\n          }\n        }\n      }\n    }\n    let shouldUpdate = false;\n    const changedProperties = this._$changedProperties;\n    try {\n      shouldUpdate = this.shouldUpdate(changedProperties);\n      if (shouldUpdate) {\n        this.willUpdate(changedProperties);\n        this.__controllers?.forEach((c) => c.hostUpdate?.());\n        this.update(changedProperties);\n      } else {\n        this.__markUpdated();\n      }\n    } catch (e) {\n      // Prevent `firstUpdated` and `updated` from running when there's an\n      // update exception.\n      shouldUpdate = false;\n      // Ensure element can accept additional updates after an exception.\n      this.__markUpdated();\n      throw e;\n    }\n    // The update is no longer considered pending and further updates are now allowed.\n    if (shouldUpdate) {\n      this._$didUpdate(changedProperties);\n    }\n  }\n\n  /**\n   * Invoked before `update()` to compute values needed during the update.\n   *\n   * Implement `willUpdate` to compute property values that depend on other\n   * properties and are used in the rest of the update process.\n   *\n   * ```ts\n   * willUpdate(changedProperties) {\n   *   // only need to check changed properties for an expensive computation.\n   *   if (changedProperties.has('firstName') || changedProperties.has('lastName')) {\n   *     this.sha = computeSHA(`${this.firstName} ${this.lastName}`);\n   *   }\n   * }\n   *\n   * render() {\n   *   return html`SHA: ${this.sha}`;\n   * }\n   * ```\n   *\n   * @category updates\n   */\n  protected willUpdate(_changedProperties: PropertyValues): void {}\n\n  // Note, this is an override point for polyfill-support.\n  // @internal\n  _$didUpdate(changedProperties: PropertyValues) {\n    this.__controllers?.forEach((c) => c.hostUpdated?.());\n    if (!this.hasUpdated) {\n      this.hasUpdated = true;\n      this.firstUpdated(changedProperties);\n    }\n    this.updated(changedProperties);\n    if (\n      DEV_MODE &&\n      this.isUpdatePending &&\n      (this.constructor as typeof ReactiveElement).enabledWarnings!.includes(\n        'change-in-update'\n      )\n    ) {\n      issueWarning(\n        'change-in-update',\n        `Element ${this.localName} scheduled an update ` +\n          `(generally because a property was set) ` +\n          `after an update completed, causing a new update to be scheduled. ` +\n          `This is inefficient and should be avoided unless the next update ` +\n          `can only be scheduled as a side effect of the previous update.`\n      );\n    }\n  }\n\n  private __markUpdated() {\n    this._$changedProperties = new Map();\n    this.isUpdatePending = false;\n  }\n\n  /**\n   * Returns a Promise that resolves when the element has completed updating.\n   * The Promise value is a boolean that is `true` if the element completed the\n   * update without triggering another update. The Promise result is `false` if\n   * a property was set inside `updated()`. If the Promise is rejected, an\n   * exception was thrown during the update.\n   *\n   * To await additional asynchronous work, override the `getUpdateComplete`\n   * method. For example, it is sometimes useful to await a rendered element\n   * before fulfilling this Promise. To do this, first await\n   * `super.getUpdateComplete()`, then any subsequent state.\n   *\n   * @return A promise of a boolean that resolves to true if the update completed\n   *     without triggering another update.\n   * @category updates\n   */\n  get updateComplete(): Promise<boolean> {\n    return this.getUpdateComplete();\n  }\n\n  /**\n   * Override point for the `updateComplete` promise.\n   *\n   * It is not safe to override the `updateComplete` getter directly due to a\n   * limitation in TypeScript which means it is not possible to call a\n   * superclass getter (e.g. `super.updateComplete.then(...)`) when the target\n   * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).\n   * This method should be overridden instead. For example:\n   *\n   * ```ts\n   * class MyElement extends LitElement {\n   *   override async getUpdateComplete() {\n   *     const result = await super.getUpdateComplete();\n   *     await this._myChild.updateComplete;\n   *     return result;\n   *   }\n   * }\n   * ```\n   *\n   * @return A promise of a boolean that resolves to true if the update completed\n   *     without triggering another update.\n   * @category updates\n   */\n  protected getUpdateComplete(): Promise<boolean> {\n    return this.__updatePromise;\n  }\n\n  /**\n   * Controls whether or not `update()` should be called when the element requests\n   * an update. By default, this method always returns `true`, but this can be\n   * customized to control when to update.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected shouldUpdate(_changedProperties: PropertyValues): boolean {\n    return true;\n  }\n\n  /**\n   * Updates the element. This method reflects property values to attributes.\n   * It can be overridden to render and keep updated element DOM.\n   * Setting properties inside this method will *not* trigger\n   * another update.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected update(_changedProperties: PropertyValues) {\n    // The forEach() expression will only run when when __reflectingProperties is\n    // defined, and it returns undefined, setting __reflectingProperties to\n    // undefined\n    this.__reflectingProperties &&= this.__reflectingProperties.forEach((p) =>\n      this.__propertyToAttribute(p, this[p as keyof this])\n    ) as undefined;\n    this.__markUpdated();\n  }\n\n  /**\n   * Invoked whenever the element is updated. Implement to perform\n   * post-updating tasks via DOM APIs, for example, focusing an element.\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected updated(_changedProperties: PropertyValues) {}\n\n  /**\n   * Invoked when the element is first updated. Implement to perform one time\n   * work on the element after update.\n   *\n   * ```ts\n   * firstUpdated() {\n   *   this.renderRoot.getElementById('my-text-area').focus();\n   * }\n   * ```\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected firstUpdated(_changedProperties: PropertyValues) {}\n}\n// Assigned here to work around a jscompiler bug with static fields\n// when compiling to ES5.\n// https://github.com/google/closure-compiler/issues/3177\n(ReactiveElement as unknown as Record<string, unknown>)[\n  JSCompiler_renameProperty('elementProperties', ReactiveElement)\n] = new Map();\n(ReactiveElement as unknown as Record<string, unknown>)[\n  JSCompiler_renameProperty('finalized', ReactiveElement)\n] = new Map();\n\n// Apply polyfills if available\npolyfillSupport?.({ReactiveElement});\n\n// Dev mode warnings...\nif (DEV_MODE) {\n  // Default warning set.\n  ReactiveElement.enabledWarnings = [\n    'change-in-update',\n    'async-perform-update',\n  ];\n  const ensureOwnWarnings = function (ctor: typeof ReactiveElement) {\n    if (\n      !ctor.hasOwnProperty(JSCompiler_renameProperty('enabledWarnings', ctor))\n    ) {\n      ctor.enabledWarnings = ctor.enabledWarnings!.slice();\n    }\n  };\n  ReactiveElement.enableWarning = function (\n    this: typeof ReactiveElement,\n    warning: WarningKind\n  ) {\n    ensureOwnWarnings(this);\n    if (!this.enabledWarnings!.includes(warning)) {\n      this.enabledWarnings!.push(warning);\n    }\n  };\n  ReactiveElement.disableWarning = function (\n    this: typeof ReactiveElement,\n    warning: WarningKind\n  ) {\n    ensureOwnWarnings(this);\n    const i = this.enabledWarnings!.indexOf(warning);\n    if (i >= 0) {\n      this.enabledWarnings!.splice(i, 1);\n    }\n  };\n}\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for ReactiveElement usage.\n(global.reactiveElementVersions ??= []).push('2.0.4');\nif (DEV_MODE && global.reactiveElementVersions.length > 1) {\n  issueWarning!(\n    'multiple-versions',\n    `Multiple versions of Lit loaded. Loading multiple versions ` +\n      `is not recommended.`\n  );\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1064, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1078, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@web3modal/ui/node_modules/@lit/reactive-element/src/decorators/custom-element.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n\nimport type {Constructor} from './base.js';\n\n/**\n * Allow for custom element classes with private constructors\n */\ntype CustomElementClass = Omit<typeof HTMLElement, 'new'>;\n\nexport type CustomElementDecorator = {\n  // legacy\n  (cls: CustomElementClass): void;\n\n  // standard\n  (\n    target: CustomElementClass,\n    context: ClassDecoratorContext<Constructor<HTMLElement>>\n  ): void;\n};\n\n/**\n * Class decorator factory that defines the decorated class as a custom element.\n *\n * ```js\n * @customElement('my-element')\n * class MyElement extends LitElement {\n *   render() {\n *     return html``;\n *   }\n * }\n * ```\n * @category Decorator\n * @param tagName The tag name of the custom element to define.\n */\nexport const customElement =\n  (tagName: string): CustomElementDecorator =>\n  (\n    classOrTarget: CustomElementClass | Constructor<HTMLElement>,\n    context?: ClassDecoratorContext<Constructor<HTMLElement>>\n  ) => {\n    if (context !== undefined) {\n      context.addInitializer(() => {\n        customElements.define(\n          tagName,\n          classOrTarget as CustomElementConstructor\n        );\n      });\n    } else {\n      customElements.define(tagName, classOrTarget as CustomElementConstructor);\n    }\n  };\n"],"names":[],"mappings":"AAAA;;;;IA+BA;;;;;;;;;;;;;;;;AAcO,MAAM,gBACX,CAAC,UACD,CACE,eACA;QAEA,IAAI,YAAY,WAAW;YACzB,QAAQ,cAAc,CAAC;gBACrB,eAAe,MAAM,CACnB,SACA;YAEJ;QACF,OAAO;YACL,eAAe,MAAM,CAAC,SAAS;QACjC;IACF"}},
    {"offset": {"line": 1107, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1112, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@web3modal/ui/node_modules/@lit/reactive-element/src/decorators/property.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n\nimport {\n  type PropertyDeclaration,\n  type ReactiveElement,\n  defaultConverter,\n  notEqual,\n} from '../reactive-element.js';\nimport type {Interface} from './base.js';\n\nconst DEV_MODE = true;\n\nlet issueWarning: (code: string, warning: string) => void;\n\nif (DEV_MODE) {\n  // Ensure warnings are issued only 1x, even if multiple versions of Lit\n  // are loaded.\n  const issuedWarnings: Set<string | undefined> =\n    (globalThis.litIssuedWarnings ??= new Set());\n\n  // Issue a warning, if we haven't already.\n  issueWarning = (code: string, warning: string) => {\n    warning += ` See https://lit.dev/msg/${code} for more information.`;\n    if (!issuedWarnings.has(warning)) {\n      console.warn(warning);\n      issuedWarnings.add(warning);\n    }\n  };\n}\n\n// Overloads for property decorator so that TypeScript can infer the correct\n// return type when a decorator is used as an accessor decorator or a setter\n// decorator.\nexport type PropertyDecorator = {\n  // accessor decorator signature\n  <C extends Interface<ReactiveElement>, V>(\n    target: ClassAccessorDecoratorTarget<C, V>,\n    context: ClassAccessorDecoratorContext<C, V>\n  ): ClassAccessorDecoratorResult<C, V>;\n\n  // setter decorator signature\n  <C extends Interface<ReactiveElement>, V>(\n    target: (value: V) => void,\n    context: ClassSetterDecoratorContext<C, V>\n  ): (this: C, value: V) => void;\n\n  // legacy decorator signature\n  (\n    protoOrDescriptor: Object,\n    name: PropertyKey,\n    descriptor?: PropertyDescriptor\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): any;\n};\n\nconst legacyProperty = (\n  options: PropertyDeclaration | undefined,\n  proto: Object,\n  name: PropertyKey\n) => {\n  const hasOwnProperty = proto.hasOwnProperty(name);\n  (proto.constructor as typeof ReactiveElement).createProperty(\n    name,\n    hasOwnProperty ? {...options, wrapped: true} : options\n  );\n  // For accessors (which have a descriptor on the prototype) we need to\n  // return a descriptor, otherwise TypeScript overwrites the descriptor we\n  // define in createProperty() with the original descriptor. We don't do this\n  // for fields, which don't have a descriptor, because this could overwrite\n  // descriptor defined by other decorators.\n  return hasOwnProperty\n    ? Object.getOwnPropertyDescriptor(proto, name)\n    : undefined;\n};\n\n// This is duplicated from a similar variable in reactive-element.ts, but\n// actually makes sense to have this default defined with the decorator, so\n// that different decorators could have different defaults.\nconst defaultPropertyDeclaration: PropertyDeclaration = {\n  attribute: true,\n  type: String,\n  converter: defaultConverter,\n  reflect: false,\n  hasChanged: notEqual,\n};\n\n// Temporary type, until google3 is on TypeScript 5.2\ntype StandardPropertyContext<C, V> = (\n  | ClassAccessorDecoratorContext<C, V>\n  | ClassSetterDecoratorContext<C, V>\n) & {metadata: object};\n\n/**\n * Wraps a class accessor or setter so that `requestUpdate()` is called with the\n * property name and old value when the accessor is set.\n */\nexport const standardProperty = <C extends Interface<ReactiveElement>, V>(\n  options: PropertyDeclaration = defaultPropertyDeclaration,\n  target: ClassAccessorDecoratorTarget<C, V> | ((value: V) => void),\n  context: StandardPropertyContext<C, V>\n): ClassAccessorDecoratorResult<C, V> | ((this: C, value: V) => void) => {\n  const {kind, metadata} = context;\n\n  if (DEV_MODE && metadata == null) {\n    issueWarning(\n      'missing-class-metadata',\n      `The class ${target} is missing decorator metadata. This ` +\n        `could mean that you're using a compiler that supports decorators ` +\n        `but doesn't support decorator metadata, such as TypeScript 5.1. ` +\n        `Please update your compiler.`\n    );\n  }\n\n  // Store the property options\n  let properties = globalThis.litPropertyMetadata.get(metadata);\n  if (properties === undefined) {\n    globalThis.litPropertyMetadata.set(metadata, (properties = new Map()));\n  }\n  properties.set(context.name, options);\n\n  if (kind === 'accessor') {\n    // Standard decorators cannot dynamically modify the class, so we can't\n    // replace a field with accessors. The user must use the new `accessor`\n    // keyword instead.\n    const {name} = context;\n    return {\n      set(this: ReactiveElement, v: V) {\n        const oldValue = (\n          target as ClassAccessorDecoratorTarget<C, V>\n        ).get.call(this as unknown as C);\n        (target as ClassAccessorDecoratorTarget<C, V>).set.call(\n          this as unknown as C,\n          v\n        );\n        this.requestUpdate(name, oldValue, options);\n      },\n      init(this: ReactiveElement, v: V): V {\n        if (v !== undefined) {\n          this._$changeProperty(name, undefined, options);\n        }\n        return v;\n      },\n    } as unknown as ClassAccessorDecoratorResult<C, V>;\n  } else if (kind === 'setter') {\n    const {name} = context;\n    return function (this: ReactiveElement, value: V) {\n      const oldValue = this[name as keyof ReactiveElement];\n      (target as (value: V) => void).call(this, value);\n      this.requestUpdate(name, oldValue, options);\n    } as unknown as (this: C, value: V) => void;\n  }\n  throw new Error(`Unsupported decorator location: ${kind}`);\n};\n\n/**\n * A class field or accessor decorator which creates a reactive property that\n * reflects a corresponding attribute value. When a decorated property is set\n * the element will update and render. A {@linkcode PropertyDeclaration} may\n * optionally be supplied to configure property features.\n *\n * This decorator should only be used for public fields. As public fields,\n * properties should be considered as primarily settable by element users,\n * either via attribute or the property itself.\n *\n * Generally, properties that are changed by the element should be private or\n * protected fields and should use the {@linkcode state} decorator.\n *\n * However, sometimes element code does need to set a public property. This\n * should typically only be done in response to user interaction, and an event\n * should be fired informing the user; for example, a checkbox sets its\n * `checked` property when clicked and fires a `changed` event. Mutating public\n * properties should typically not be done for non-primitive (object or array)\n * properties. In other cases when an element needs to manage state, a private\n * property decorated via the {@linkcode state} decorator should be used. When\n * needed, state properties can be initialized via public properties to\n * facilitate complex interactions.\n *\n * ```ts\n * class MyElement {\n *   @property({ type: Boolean })\n *   clicked = false;\n * }\n * ```\n * @category Decorator\n * @ExportDecoratedItems\n */\nexport function property(options?: PropertyDeclaration): PropertyDecorator {\n  return <C extends Interface<ReactiveElement>, V>(\n    protoOrTarget:\n      | object\n      | ClassAccessorDecoratorTarget<C, V>\n      | ((value: V) => void),\n    nameOrContext:\n      | PropertyKey\n      | ClassAccessorDecoratorContext<C, V>\n      | ClassSetterDecoratorContext<C, V>\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): any => {\n    return (\n      typeof nameOrContext === 'object'\n        ? standardProperty<C, V>(\n            options,\n            protoOrTarget as\n              | ClassAccessorDecoratorTarget<C, V>\n              | ((value: V) => void),\n            nameOrContext as StandardPropertyContext<C, V>\n          )\n        : legacyProperty(\n            options,\n            protoOrTarget as Object,\n            nameOrContext as PropertyKey\n          )\n    ) as PropertyDecorator;\n  };\n}\n"],"names":[],"mappings":"AAAA;;;;IAMA;;;;;;;;;;;;;AAeA,MAAM,WAAW;AAEjB,IAAI;AAEJ,wCAAc;IACZ,uEAAuE;IACvE,cAAc;IACd,MAAM,iBACH,WAAW,iBAAiB,KAAK,IAAI;IAExC,0CAA0C;IAC1C,eAAe,CAAC,MAAc;QAC5B,WAAW,CAAA,yBAAA,EAA4B,KAAI,sBAAA,CAAwB;QACnE,IAAI,CAAC,eAAe,GAAG,CAAC,UAAU;YAChC,QAAQ,IAAI,CAAC;YACb,eAAe,GAAG,CAAC;QACrB;IACF;AACF;AA2BA,MAAM,iBAAiB,CACrB,SACA,OACA;IAEA,MAAM,iBAAiB,MAAM,cAAc,CAAC;IAC3C,MAAM,WAAsC,CAAC,cAAc,CAC1D,MACA,iBAAiB;QAAC,GAAG,OAAO;QAAE,SAAS;IAAI,IAAI;IAEjD,sEAAsE;IACtE,yEAAyE;IACzE,4EAA4E;IAC5E,0EAA0E;IAC1E,0CAA0C;IAC1C,OAAO,iBACH,OAAO,wBAAwB,CAAC,OAAO,QACvC;AACN;AAEA,yEAAyE;AACzE,2EAA2E;AAC3E,2DAA2D;AAC3D,MAAM,6BAAkD;IACtD,WAAW;IACX,MAAM;IACN,WAAW,0OAAA,CAAA,mBAAgB;IAC3B,SAAS;IACT,YAAY,0OAAA,CAAA,WAAQ;;AAaf,MAAM,mBAAmB,CAC9B,UAA+B,0BAA0B,EACzD,QACA;IAEA,MAAM,EAAC,IAAI,EAAE,QAAQ,EAAC,GAAG;IAEzB,IAAI,YAAY,YAAY,MAAM;QAChC,aACE,0BACA,CAAA,UAAA,EAAa,OAAM,qCAAA,CAAuC,GACxD,CAAA,iEAAA,CAAmE,GACnE,CAAA,gEAAA,CAAkE,GAClE,CAAA,4BAAA,CAA8B;IAEpC;IAEA,6BAA6B;IAC7B,IAAI,aAAa,WAAW,mBAAmB,CAAC,GAAG,CAAC;IACpD,IAAI,eAAe,WAAW;QAC5B,WAAW,mBAAmB,CAAC,GAAG,CAAC,UAAW,aAAa,IAAI;IACjE;IACA,WAAW,GAAG,CAAC,QAAQ,IAAI,EAAE;IAE7B,IAAI,SAAS,YAAY;QACvB,uEAAuE;QACvE,uEAAuE;QACvE,mBAAmB;QACnB,MAAM,EAAC,IAAI,EAAC,GAAG;QACf,OAAO;YACL,KAA2B,CAAI;gBAC7B,MAAM,WACJ,OACA,GAAG,CAAC,IAAI,CAAC,IAAoB;gBAC9B,OAA8C,GAAG,CAAC,IAAI,CACrD,IAAoB,EACpB;gBAEF,IAAI,CAAC,aAAa,CAAC,MAAM,UAAU;YACrC;YACA,MAA4B,CAAI;gBAC9B,IAAI,MAAM,WAAW;oBACnB,IAAI,CAAC,gBAAgB,CAAC,MAAM,WAAW;gBACzC;gBACA,OAAO;YACT;;IAEJ,OAAO,IAAI,SAAS,UAAU;QAC5B,MAAM,EAAC,IAAI,EAAC,GAAG;QACf,OAAO,SAAiC,KAAQ;YAC9C,MAAM,WAAW,IAAI,CAAC,KAA8B;YACnD,OAA8B,IAAI,CAAC,IAAI,EAAE;YAC1C,IAAI,CAAC,aAAa,CAAC,MAAM,UAAU;QACrC;IACF;IACA,MAAM,IAAI,MAAM,CAAA,gCAAA,EAAmC,KAAI,CAAE;AAC3D;AAkCM,SAAU,SAAS,OAA6B;IACpD,OAAO,CACL,eAIA;QAMA,OACE,OAAO,kBAAkB,WACrB,iBACE,SACA,eAGA,iBAEF,eACE,SACA,eACA;IAGV;AACF"}},
    {"offset": {"line": 1211, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1216, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@web3modal/ui/node_modules/@lit/reactive-element/src/decorators/state.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n\nimport {property} from './property.js';\n\nexport interface StateDeclaration<Type = unknown> {\n  /**\n   * A function that indicates if a property should be considered changed when\n   * it is set. The function should take the `newValue` and `oldValue` and\n   * return `true` if an update should be requested.\n   */\n  hasChanged?(value: Type, oldValue: Type): boolean;\n}\n\n/**\n * @deprecated use StateDeclaration\n */\nexport type InternalPropertyDeclaration<Type = unknown> =\n  StateDeclaration<Type>;\n\n/**\n * Declares a private or protected reactive property that still triggers\n * updates to the element when it changes. It does not reflect from the\n * corresponding attribute.\n *\n * Properties declared this way must not be used from HTML or HTML templating\n * systems, they're solely for properties internal to the element. These\n * properties may be renamed by optimization tools like closure compiler.\n * @category Decorator\n */\nexport function state(options?: StateDeclaration) {\n  return property({\n    ...options,\n    // Add both `state` and `attribute` because we found a third party\n    // controller that is keying off of PropertyOptions.state to determine\n    // whether a field is a private internal property or not.\n    state: true,\n    attribute: false,\n  });\n}\n"],"names":[],"mappings":"AAAA;;;;IAMA;;;;;;;;;;;AAkCM,SAAU,MAAM,OAA0B;IAC9C,OAAO,CAAA,GAAA,6NAAA,CAAA,WAAQ,AAAR,EAAS;QACd,GAAG,OAAO;QACV,kEAAkE;QAClE,sEAAsE;QACtE,yDAAyD;QACzD,OAAO;QACP,WAAW;;AAEf"}},
    {"offset": {"line": 1241, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1246, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@web3modal/ui/node_modules/@lit/reactive-element/src/decorators/event-options.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n\nimport type {ReactiveElement} from '../reactive-element.js';\nimport type {Interface} from './base.js';\n\nexport type EventOptionsDecorator = {\n  // legacy\n  (\n    proto: Interface<ReactiveElement>,\n    name: PropertyKey\n    // Note TypeScript requires the return type to be `void|any`\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): void | any;\n\n  // standard\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  <C, V extends (this: C, ...args: any) => any>(\n    value: V,\n    _context: ClassMethodDecoratorContext<C, V>\n  ): void;\n};\n\n/**\n * Adds event listener options to a method used as an event listener in a\n * lit-html template.\n *\n * @param options An object that specifies event listener options as accepted by\n * `EventTarget#addEventListener` and `EventTarget#removeEventListener`.\n *\n * Current browsers support the `capture`, `passive`, and `once` options. See:\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters\n *\n * ```ts\n * class MyElement {\n *   clicked = false;\n *\n *   render() {\n *     return html`\n *       <div @click=${this._onClick}>\n *         <button></button>\n *       </div>\n *     `;\n *   }\n *\n *   @eventOptions({capture: true})\n *   _onClick(e) {\n *     this.clicked = true;\n *   }\n * }\n * ```\n * @category Decorator\n */\nexport function eventOptions(\n  options: AddEventListenerOptions\n): EventOptionsDecorator {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return (<C, V extends (this: C, ...args: any) => any>(\n    protoOrValue: V,\n    nameOrContext: PropertyKey | ClassMethodDecoratorContext<C, V>\n  ) => {\n    const method =\n      typeof protoOrValue === 'function'\n        ? protoOrValue\n        : protoOrValue[nameOrContext as keyof ReactiveElement];\n    Object.assign(method, options);\n  }) as EventOptionsDecorator;\n}\n"],"names":[],"mappings":"AAAA;;;;IAiCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BM,SAAU,aACd,OAAgC;IAEhC,8DAA8D;IAC9D,OAAQ,CACN,cACA;QAEA,MAAM,SACJ,OAAO,iBAAiB,aACpB,eACA,YAAY,CAAC,cAAuC;QAC1D,OAAO,MAAM,CAAC,QAAQ;IACxB;AACF"}},
    {"offset": {"line": 1289, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1294, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@web3modal/ui/node_modules/@lit/reactive-element/src/decorators/base.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * Generates a public interface type that removes private and protected fields.\n * This allows accepting otherwise incompatible versions of the type (e.g. from\n * multiple copies of the same package in `node_modules`).\n */\nexport type Interface<T> = {\n  [K in keyof T]: T[K];\n};\n\nexport type Constructor<T> = {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  new (...args: any[]): T;\n};\n\n/**\n * Wraps up a few best practices when returning a property descriptor from a\n * decorator.\n *\n * Marks the defined property as configurable, and enumerable, and handles\n * the case where we have a busted Reflect.decorate zombiefill (e.g. in Angular\n * apps).\n *\n * @internal\n */\nexport const desc = (\n  obj: object,\n  name: PropertyKey | ClassAccessorDecoratorContext<unknown, unknown>,\n  descriptor: PropertyDescriptor\n) => {\n  // For backwards compatibility, we keep them configurable and enumerable.\n  descriptor.configurable = true;\n  descriptor.enumerable = true;\n  if (\n    // We check for Reflect.decorate each time, in case the zombiefill\n    // is applied via lazy loading some Angular code.\n    (Reflect as typeof Reflect & {decorate?: unknown}).decorate &&\n    typeof name !== 'object'\n  ) {\n    // If we're called as a legacy decorator, and Reflect.decorate is present\n    // then we have no guarantees that the returned descriptor will be\n    // defined on the class, so we must apply it directly ourselves.\n\n    Object.defineProperty(obj, name, descriptor);\n  }\n  return descriptor;\n};\n"],"names":[],"mappings":"AAAA;;;;IAoBA;;;;;;;;;;;;AAUO,MAAM,OAAO,CAClB,KACA,MACA;IAEA,yEAAyE;IACzE,WAAW,YAAY,GAAG;IAC1B,WAAW,UAAU,GAAG;IACxB,IACE,kEAAkE;IAClE,iDAAiD;IAChD,QAAkD,QAAQ,IAC3D,OAAO,SAAS,UAChB;QACA,yEAAyE;QACzE,kEAAkE;QAClE,gEAAgE;QAEhE,OAAO,cAAc,CAAC,KAAK,MAAM;IACnC;IACA,OAAO;AACT"}},
    {"offset": {"line": 1324, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1329, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@web3modal/ui/node_modules/@lit/reactive-element/src/decorators/query.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\nimport type {ReactiveElement} from '../reactive-element.js';\nimport {desc, type Interface} from './base.js';\n\nconst DEV_MODE = true;\n\nlet issueWarning: (code: string, warning: string) => void;\n\nif (DEV_MODE) {\n  // Ensure warnings are issued only 1x, even if multiple versions of Lit\n  // are loaded.\n  const issuedWarnings: Set<string | undefined> =\n    (globalThis.litIssuedWarnings ??= new Set());\n\n  // Issue a warning, if we haven't already.\n  issueWarning = (code: string, warning: string) => {\n    warning += code\n      ? ` See https://lit.dev/msg/${code} for more information.`\n      : '';\n    if (!issuedWarnings.has(warning)) {\n      console.warn(warning);\n      issuedWarnings.add(warning);\n    }\n  };\n}\n\nexport type QueryDecorator = {\n  // legacy\n  (\n    proto: Interface<ReactiveElement>,\n    name: PropertyKey,\n    descriptor?: PropertyDescriptor\n    // Note TypeScript requires the return type to be `void|any`\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): void | any;\n\n  // standard\n  <C extends Interface<ReactiveElement>, V extends Element | null>(\n    value: ClassAccessorDecoratorTarget<C, V>,\n    context: ClassAccessorDecoratorContext<C, V>\n  ): ClassAccessorDecoratorResult<C, V>;\n};\n\n/**\n * A property decorator that converts a class property into a getter that\n * executes a querySelector on the element's renderRoot.\n *\n * @param selector A DOMString containing one or more selectors to match.\n * @param cache An optional boolean which when true performs the DOM query only\n *     once and caches the result.\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\n *\n * ```ts\n * class MyElement {\n *   @query('#first')\n *   first: HTMLDivElement;\n *\n *   render() {\n *     return html`\n *       <div id=\"first\"></div>\n *       <div id=\"second\"></div>\n *     `;\n *   }\n * }\n * ```\n * @category Decorator\n */\nexport function query(selector: string, cache?: boolean): QueryDecorator {\n  return (<C extends Interface<ReactiveElement>, V extends Element | null>(\n    protoOrTarget: ClassAccessorDecoratorTarget<C, V>,\n    nameOrContext: PropertyKey | ClassAccessorDecoratorContext<C, V>,\n    descriptor?: PropertyDescriptor\n  ) => {\n    const doQuery = (el: Interface<ReactiveElement>): V => {\n      const result = (el.renderRoot?.querySelector(selector) ?? null) as V;\n      if (DEV_MODE && result === null && cache && !el.hasUpdated) {\n        const name =\n          typeof nameOrContext === 'object'\n            ? nameOrContext.name\n            : nameOrContext;\n        issueWarning(\n          '',\n          `@query'd field ${JSON.stringify(String(name))} with the 'cache' ` +\n            `flag set for selector '${selector}' has been accessed before ` +\n            `the first update and returned null. This is expected if the ` +\n            `renderRoot tree has not been provided beforehand (e.g. via ` +\n            `Declarative Shadow DOM). Therefore the value hasn't been cached.`\n        );\n      }\n      // TODO: if we want to allow users to assert that the query will never\n      // return null, we need a new option and to throw here if the result\n      // is null.\n      return result;\n    };\n    if (cache) {\n      // Accessors to wrap from either:\n      //   1. The decorator target, in the case of standard decorators\n      //   2. The property descriptor, in the case of experimental decorators\n      //      on auto-accessors.\n      //   3. Functions that access our own cache-key property on the instance,\n      //      in the case of experimental decorators on fields.\n      const {get, set} =\n        typeof nameOrContext === 'object'\n          ? protoOrTarget\n          : descriptor ??\n            (() => {\n              const key = DEV_MODE\n                ? Symbol(`${String(nameOrContext)} (@query() cache)`)\n                : Symbol();\n              type WithCache = ReactiveElement & {\n                [key: symbol]: Element | null;\n              };\n              return {\n                get() {\n                  return (this as WithCache)[key];\n                },\n                set(v) {\n                  (this as WithCache)[key] = v;\n                },\n              };\n            })();\n      return desc(protoOrTarget, nameOrContext, {\n        get(this: ReactiveElement): V {\n          let result: V = get!.call(this);\n          if (result === undefined) {\n            result = doQuery(this);\n            if (result !== null || this.hasUpdated) {\n              set!.call(this, result);\n            }\n          }\n          return result;\n        },\n      });\n    } else {\n      // This object works as the return type for both standard and\n      // experimental decorators.\n      return desc(protoOrTarget, nameOrContext, {\n        get(this: ReactiveElement) {\n          return doQuery(this);\n        },\n      });\n    }\n  }) as QueryDecorator;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;AAeA,MAAM,WAAW;AAEjB,IAAI;AAEJ,wCAAc;IACZ,uEAAuE;IACvE,cAAc;IACd,MAAM,iBACH,WAAW,iBAAiB,KAAK,IAAI;IAExC,0CAA0C;IAC1C,eAAe,CAAC,MAAc;QAC5B,WAAW,OACP,CAAA,yBAAA,EAA4B,KAAI,sBAAA,CAAwB,GACxD;QACJ,IAAI,CAAC,eAAe,GAAG,CAAC,UAAU;YAChC,QAAQ,IAAI,CAAC;YACb,eAAe,GAAG,CAAC;QACrB;IACF;AACF;AA4CM,SAAU,MAAM,QAAgB,EAAE,KAAe;IACrD,OAAQ,CACN,eACA,eACA;QAEA,MAAM,UAAU,CAAC;YACf,MAAM,SAAU,GAAG,UAAU,EAAE,cAAc,aAAa;YAC1D,IAAI,YAAY,WAAW,QAAQ,SAAS,CAAC,GAAG,UAAU,EAAE;gBAC1D,MAAM,OACJ,OAAO,kBAAkB,WACrB,cAAc,IAAI,GAClB;gBACN,aACE,IACA,CAAA,eAAA,EAAkB,KAAK,SAAS,CAAC,OAAO,OAAM,kBAAA,CAAoB,GAChE,CAAA,uBAAA,EAA0B,SAAQ,2BAAA,CAA6B,GAC/D,CAAA,4DAAA,CAA8D,GAC9D,CAAA,2DAAA,CAA6D,GAC7D,CAAA,gEAAA,CAAkE;YAExE;YACA,sEAAsE;YACtE,oEAAoE;YACpE,WAAW;YACX,OAAO;QACT;QACA,IAAI,OAAO;YACT,iCAAiC;YACjC,gEAAgE;YAChE,uEAAuE;YACvE,0BAA0B;YAC1B,yEAAyE;YACzE,yDAAyD;YACzD,MAAM,EAAC,GAAG,EAAE,GAAG,EAAC,GACd,OAAO,kBAAkB,WACrB,gBACA,cACA,CAAC;gBACC,MAAM,MAAM,uCACR,OAAO,CAAA,EAAG,OAAO,eAAc,iBAAA,CAAmB;gBAKtD,OAAO;oBACL;wBACE,OAAQ,IAAkB,CAAC,IAAI;oBACjC;oBACA,KAAI,CAAC;wBACF,IAAkB,CAAC,IAAI,GAAG;oBAC7B;;YAEJ,CAAC;YACP,OAAO,CAAA,GAAA,yNAAA,CAAA,OAAI,AAAJ,EAAK,eAAe,eAAe;gBACxC;oBACE,IAAI,SAAY,IAAK,IAAI,CAAC,IAAI;oBAC9B,IAAI,WAAW,WAAW;wBACxB,SAAS,QAAQ,IAAI;wBACrB,IAAI,WAAW,QAAQ,IAAI,CAAC,UAAU,EAAE;4BACtC,IAAK,IAAI,CAAC,IAAI,EAAE;wBAClB;oBACF;oBACA,OAAO;gBACT;;QAEJ,OAAO;YACL,6DAA6D;YAC7D,2BAA2B;YAC3B,OAAO,CAAA,GAAA,yNAAA,CAAA,OAAI,AAAJ,EAAK,eAAe,eAAe;gBACxC;oBACE,OAAO,QAAQ,IAAI;gBACrB;;QAEJ;IACF;AACF"}},
    {"offset": {"line": 1408, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1413, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@web3modal/ui/node_modules/@lit/reactive-element/src/decorators/query-all.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\nimport type {ReactiveElement} from '../reactive-element.js';\nimport {desc, type Interface} from './base.js';\n\nexport type QueryAllDecorator = {\n  // legacy\n  (\n    proto: Interface<ReactiveElement>,\n    name: PropertyKey,\n    descriptor?: PropertyDescriptor\n    // Note TypeScript requires the return type to be `void|any`\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): void | any;\n\n  // standard\n  <C extends Interface<ReactiveElement>, V extends NodeList>(\n    value: ClassAccessorDecoratorTarget<C, V>,\n    context: ClassAccessorDecoratorContext<C, V>\n  ): ClassAccessorDecoratorResult<C, V>;\n};\n\n// Shared fragment used to generate empty NodeLists when a render root is\n// undefined\nlet fragment: DocumentFragment;\n\n/**\n * A property decorator that converts a class property into a getter\n * that executes a querySelectorAll on the element's renderRoot.\n *\n * @param selector A DOMString containing one or more selectors to match.\n *\n * See:\n * https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll\n *\n * ```ts\n * class MyElement {\n *   @queryAll('div')\n *   divs: NodeListOf<HTMLDivElement>;\n *\n *   render() {\n *     return html`\n *       <div id=\"first\"></div>\n *       <div id=\"second\"></div>\n *     `;\n *   }\n * }\n * ```\n * @category Decorator\n */\nexport function queryAll(selector: string): QueryAllDecorator {\n  return ((\n    obj: object,\n    name: PropertyKey | ClassAccessorDecoratorContext<unknown, unknown>\n  ) => {\n    return desc(obj, name, {\n      get(this: ReactiveElement) {\n        const container =\n          this.renderRoot ?? (fragment ??= document.createDocumentFragment());\n        return container.querySelectorAll(selector);\n      },\n    });\n  }) as QueryAllDecorator;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;AAgCA,yEAAyE;AACzE,YAAY;AACZ,IAAI;AA0BE,SAAU,SAAS,QAAgB;IACvC,OAAQ,CACN,KACA;QAEA,OAAO,CAAA,GAAA,yNAAA,CAAA,OAAI,AAAJ,EAAK,KAAK,MAAM;YACrB;gBACE,MAAM,YACJ,IAAI,CAAC,UAAU,IAAI,CAAC,aAAa,SAAS,sBAAsB,EAAE;gBACpE,OAAO,UAAU,gBAAgB,CAAC;YACpC;;IAEJ;AACF"}},
    {"offset": {"line": 1436, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1441, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@web3modal/ui/node_modules/@lit/reactive-element/src/decorators/query-async.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n\nimport type {ReactiveElement} from '../reactive-element.js';\nimport {desc, type Interface} from './base.js';\n\nexport type QueryAsyncDecorator = {\n  // legacy\n  (\n    proto: Interface<ReactiveElement>,\n    name: PropertyKey,\n    descriptor?: PropertyDescriptor\n    // Note TypeScript requires the return type to be `void|any`\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): void | any;\n\n  // standard\n  <C extends Interface<ReactiveElement>, V extends Promise<Element | null>>(\n    value: ClassAccessorDecoratorTarget<C, V>,\n    context: ClassAccessorDecoratorContext<C, V>\n  ): ClassAccessorDecoratorResult<C, V>;\n};\n\n// Note, in the future, we may extend this decorator to support the use case\n// where the queried element may need to do work to become ready to interact\n// with (e.g. load some implementation code). If so, we might elect to\n// add a second argument defining a function that can be run to make the\n// queried element loaded/updated/ready.\n/**\n * A property decorator that converts a class property into a getter that\n * returns a promise that resolves to the result of a querySelector on the\n * element's renderRoot done after the element's `updateComplete` promise\n * resolves. When the queried property may change with element state, this\n * decorator can be used instead of requiring users to await the\n * `updateComplete` before accessing the property.\n *\n * @param selector A DOMString containing one or more selectors to match.\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\n *\n * ```ts\n * class MyElement {\n *   @queryAsync('#first')\n *   first: Promise<HTMLDivElement>;\n *\n *   render() {\n *     return html`\n *       <div id=\"first\"></div>\n *       <div id=\"second\"></div>\n *     `;\n *   }\n * }\n *\n * // external usage\n * async doSomethingWithFirst() {\n *  (await aMyElement.first).doSomething();\n * }\n * ```\n * @category Decorator\n */\nexport function queryAsync(selector: string) {\n  return ((\n    obj: object,\n    name: PropertyKey | ClassAccessorDecoratorContext<unknown, unknown>\n  ) => {\n    return desc(obj, name, {\n      async get(this: ReactiveElement) {\n        await this.updateComplete;\n        return this.renderRoot?.querySelector(selector) ?? null;\n      },\n    });\n  }) as QueryAsyncDecorator;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;AAsEM,SAAU,WAAW,QAAgB;IACzC,OAAQ,CACN,KACA;QAEA,OAAO,CAAA,GAAA,yNAAA,CAAA,OAAI,AAAJ,EAAK,KAAK,MAAM;YACrB,MAAM;gBACJ,MAAM,IAAI,CAAC,cAAc;gBACzB,OAAO,IAAI,CAAC,UAAU,EAAE,cAAc,aAAa;YACrD;;IAEJ;AACF"}},
    {"offset": {"line": 1461, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1466, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@web3modal/ui/node_modules/@lit/reactive-element/src/decorators/query-assigned-elements.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n\nimport type {ReactiveElement} from '../reactive-element.js';\nimport type {QueryAssignedNodesOptions} from './query-assigned-nodes.js';\nimport {desc, type Interface} from './base.js';\n\nexport type QueryAssignedElementsDecorator = {\n  // legacy\n  (\n    proto: Interface<ReactiveElement>,\n    name: PropertyKey,\n    descriptor?: PropertyDescriptor\n    // Note TypeScript requires the return type to be `void|any`\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): void | any;\n\n  // standard\n  <C extends Interface<ReactiveElement>, V extends Array<Element>>(\n    value: ClassAccessorDecoratorTarget<C, V>,\n    context: ClassAccessorDecoratorContext<C, V>\n  ): ClassAccessorDecoratorResult<C, V>;\n};\n\n/**\n * Options for the {@linkcode queryAssignedElements} decorator. Extends the\n * options that can be passed into\n * [HTMLSlotElement.assignedElements](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement/assignedElements).\n */\nexport interface QueryAssignedElementsOptions\n  extends QueryAssignedNodesOptions {\n  /**\n   * CSS selector used to filter the elements returned. For example, a selector\n   * of `\".item\"` will only include elements with the `item` class.\n   */\n  selector?: string;\n}\n\n/**\n * A property decorator that converts a class property into a getter that\n * returns the `assignedElements` of the given `slot`. Provides a declarative\n * way to use\n * [`HTMLSlotElement.assignedElements`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement/assignedElements).\n *\n * Can be passed an optional {@linkcode QueryAssignedElementsOptions} object.\n *\n * Example usage:\n * ```ts\n * class MyElement {\n *   @queryAssignedElements({ slot: 'list' })\n *   listItems!: Array<HTMLElement>;\n *   @queryAssignedElements()\n *   unnamedSlotEls!: Array<HTMLElement>;\n *\n *   render() {\n *     return html`\n *       <slot name=\"list\"></slot>\n *       <slot></slot>\n *     `;\n *   }\n * }\n * ```\n *\n * Note, the type of this property should be annotated as `Array<HTMLElement>`.\n *\n * @category Decorator\n */\nexport function queryAssignedElements(\n  options?: QueryAssignedElementsOptions\n): QueryAssignedElementsDecorator {\n  return (<V extends Array<Element>>(\n    obj: object,\n    name: PropertyKey | ClassAccessorDecoratorContext<unknown, unknown>\n  ) => {\n    const {slot, selector} = options ?? {};\n    const slotSelector = `slot${slot ? `[name=${slot}]` : ':not([name])'}`;\n    return desc(obj, name, {\n      get(this: ReactiveElement): V {\n        const slotEl =\n          this.renderRoot?.querySelector<HTMLSlotElement>(slotSelector);\n        const elements = slotEl?.assignedElements(options) ?? [];\n        return (\n          selector === undefined\n            ? elements\n            : elements.filter((node) => node.matches(selector))\n        ) as V;\n      },\n    });\n  }) as QueryAssignedElementsDecorator;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;AA6EM,SAAU,sBACd,OAAsC;IAEtC,OAAQ,CACN,KACA;QAEA,MAAM,EAAC,IAAI,EAAE,QAAQ,EAAC,GAAG,WAAW,CAAA;QACpC,MAAM,eAAe,CAAA,IAAA,EAAO,OAAO,CAAA,MAAA,EAAS,KAAI,CAAA,CAAG,GAAG,eAAc,CAAE;QACtE,OAAO,CAAA,GAAA,yNAAA,CAAA,OAAI,AAAJ,EAAK,KAAK,MAAM;YACrB;gBACE,MAAM,SACJ,IAAI,CAAC,UAAU,EAAE,cAA+B;gBAClD,MAAM,WAAW,QAAQ,iBAAiB,YAAY,EAAE;gBACxD,OACE,aAAa,YACT,WACA,SAAS,MAAM,CAAC,CAAC,OAAS,KAAK,OAAO,CAAC;YAE/C;;IAEJ;AACF"}},
    {"offset": {"line": 1489, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1494, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@web3modal/ui/node_modules/@lit/reactive-element/src/decorators/query-assigned-nodes.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\nimport type {ReactiveElement} from '../reactive-element.js';\nimport {desc, type Interface} from './base.js';\n\n/**\n * Options for the {@linkcode queryAssignedNodes} decorator. Extends the options\n * that can be passed into [HTMLSlotElement.assignedNodes](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement/assignedNodes).\n */\nexport interface QueryAssignedNodesOptions extends AssignedNodesOptions {\n  /**\n   * Name of the slot to query. Leave empty for the default slot.\n   */\n  slot?: string;\n}\n\nexport type QueryAssignedNodesDecorator = {\n  // legacy\n  (\n    proto: Interface<ReactiveElement>,\n    name: PropertyKey,\n    descriptor?: PropertyDescriptor\n    // Note TypeScript requires the return type to be `void|any`\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): void | any;\n\n  // standard\n  <C extends Interface<ReactiveElement>, V extends Array<Node>>(\n    value: ClassAccessorDecoratorTarget<C, V>,\n    context: ClassAccessorDecoratorContext<C, V>\n  ): ClassAccessorDecoratorResult<C, V>;\n};\n\n/**\n * A property decorator that converts a class property into a getter that\n * returns the `assignedNodes` of the given `slot`.\n *\n * Can be passed an optional {@linkcode QueryAssignedNodesOptions} object.\n *\n * Example usage:\n * ```ts\n * class MyElement {\n *   @queryAssignedNodes({slot: 'list', flatten: true})\n *   listItems!: Array<Node>;\n *\n *   render() {\n *     return html`\n *       <slot name=\"list\"></slot>\n *     `;\n *   }\n * }\n * ```\n *\n * Note the type of this property should be annotated as `Array<Node>`. Use the\n * queryAssignedElements decorator to list only elements, and optionally filter\n * the element list using a CSS selector.\n *\n * @category Decorator\n */\nexport function queryAssignedNodes(\n  options?: QueryAssignedNodesOptions\n): QueryAssignedNodesDecorator {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return (<V extends Array<Node>>(\n    obj: object,\n    name: PropertyKey | ClassAccessorDecoratorContext<unknown, unknown>\n  ) => {\n    const {slot} = options ?? {};\n    const slotSelector = `slot${slot ? `[name=${slot}]` : ':not([name])'}`;\n    return desc(obj, name, {\n      get(this: ReactiveElement): V {\n        const slotEl =\n          this.renderRoot?.querySelector<HTMLSlotElement>(slotSelector);\n        return (slotEl?.assignedNodes(options) ?? []) as unknown as V;\n      },\n    });\n  }) as QueryAssignedNodesDecorator;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;AAqEM,SAAU,mBACd,OAAmC;IAEnC,8DAA8D;IAC9D,OAAQ,CACN,KACA;QAEA,MAAM,EAAC,IAAI,EAAC,GAAG,WAAW,CAAA;QAC1B,MAAM,eAAe,CAAA,IAAA,EAAO,OAAO,CAAA,MAAA,EAAS,KAAI,CAAA,CAAG,GAAG,eAAc,CAAE;QACtE,OAAO,CAAA,GAAA,yNAAA,CAAA,OAAI,AAAJ,EAAK,KAAK,MAAM;YACrB;gBACE,MAAM,SACJ,IAAI,CAAC,UAAU,EAAE,cAA+B;gBAClD,OAAQ,QAAQ,cAAc,YAAY,EAAE;YAC9C;;IAEJ;AACF"}},
    {"offset": {"line": 1517, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1522, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@web3modal/scaffold/node_modules/@lit/reactive-element/src/css-tag.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nconst NODE_MODE = false;\n\n// Allows minifiers to rename references to globalThis\nconst global = globalThis;\n\n/**\n * Whether the current browser supports `adoptedStyleSheets`.\n */\nexport const supportsAdoptingStyleSheets: boolean =\n  global.ShadowRoot &&\n  (global.ShadyCSS === undefined || global.ShadyCSS.nativeShadow) &&\n  'adoptedStyleSheets' in Document.prototype &&\n  'replace' in CSSStyleSheet.prototype;\n\n/**\n * A CSSResult or native CSSStyleSheet.\n *\n * In browsers that support constructible CSS style sheets, CSSStyleSheet\n * object can be used for styling along side CSSResult from the `css`\n * template tag.\n */\nexport type CSSResultOrNative = CSSResult | CSSStyleSheet;\n\nexport type CSSResultArray = Array<CSSResultOrNative | CSSResultArray>;\n\n/**\n * A single CSSResult, CSSStyleSheet, or an array or nested arrays of those.\n */\nexport type CSSResultGroup = CSSResultOrNative | CSSResultArray;\n\nconst constructionToken = Symbol();\n\nconst cssTagCache = new WeakMap<TemplateStringsArray, CSSStyleSheet>();\n\n/**\n * A container for a string of CSS text, that may be used to create a CSSStyleSheet.\n *\n * CSSResult is the return value of `css`-tagged template literals and\n * `unsafeCSS()`. In order to ensure that CSSResults are only created via the\n * `css` tag and `unsafeCSS()`, CSSResult cannot be constructed directly.\n */\nexport class CSSResult {\n  // This property needs to remain unminified.\n  ['_$cssResult$'] = true;\n  readonly cssText: string;\n  private _styleSheet?: CSSStyleSheet;\n  private _strings: TemplateStringsArray | undefined;\n\n  private constructor(\n    cssText: string,\n    strings: TemplateStringsArray | undefined,\n    safeToken: symbol\n  ) {\n    if (safeToken !== constructionToken) {\n      throw new Error(\n        'CSSResult is not constructable. Use `unsafeCSS` or `css` instead.'\n      );\n    }\n    this.cssText = cssText;\n    this._strings = strings;\n  }\n\n  // This is a getter so that it's lazy. In practice, this means stylesheets\n  // are not created until the first element instance is made.\n  get styleSheet(): CSSStyleSheet | undefined {\n    // If `supportsAdoptingStyleSheets` is true then we assume CSSStyleSheet is\n    // constructable.\n    let styleSheet = this._styleSheet;\n    const strings = this._strings;\n    if (supportsAdoptingStyleSheets && styleSheet === undefined) {\n      const cacheable = strings !== undefined && strings.length === 1;\n      if (cacheable) {\n        styleSheet = cssTagCache.get(strings);\n      }\n      if (styleSheet === undefined) {\n        (this._styleSheet = styleSheet = new CSSStyleSheet()).replaceSync(\n          this.cssText\n        );\n        if (cacheable) {\n          cssTagCache.set(strings, styleSheet);\n        }\n      }\n    }\n    return styleSheet;\n  }\n\n  toString(): string {\n    return this.cssText;\n  }\n}\n\ntype ConstructableCSSResult = CSSResult & {\n  new (\n    cssText: string,\n    strings: TemplateStringsArray | undefined,\n    safeToken: symbol\n  ): CSSResult;\n};\n\nconst textFromCSSResult = (value: CSSResultGroup | number) => {\n  // This property needs to remain unminified.\n  if ((value as CSSResult)['_$cssResult$'] === true) {\n    return (value as CSSResult).cssText;\n  } else if (typeof value === 'number') {\n    return value;\n  } else {\n    throw new Error(\n      `Value passed to 'css' function must be a 'css' function result: ` +\n        `${value}. Use 'unsafeCSS' to pass non-literal values, but take care ` +\n        `to ensure page security.`\n    );\n  }\n};\n\n/**\n * Wrap a value for interpolation in a {@linkcode css} tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = (value: unknown) =>\n  new (CSSResult as ConstructableCSSResult)(\n    typeof value === 'string' ? value : String(value),\n    undefined,\n    constructionToken\n  );\n\n/**\n * A template literal tag which can be used with LitElement's\n * {@linkcode LitElement.styles} property to set element styles.\n *\n * For security reasons, only literal string values and number may be used in\n * embedded expressions. To incorporate non-literal values {@linkcode unsafeCSS}\n * may be used inside an expression.\n */\nexport const css = (\n  strings: TemplateStringsArray,\n  ...values: (CSSResultGroup | number)[]\n): CSSResult => {\n  const cssText =\n    strings.length === 1\n      ? strings[0]\n      : values.reduce(\n          (acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1],\n          strings[0]\n        );\n  return new (CSSResult as ConstructableCSSResult)(\n    cssText,\n    strings,\n    constructionToken\n  );\n};\n\n/**\n * Applies the given styles to a `shadowRoot`. When Shadow DOM is\n * available but `adoptedStyleSheets` is not, styles are appended to the\n * `shadowRoot` to [mimic spec behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n * Note, when shimming is used, any styles that are subsequently placed into\n * the shadowRoot should be placed *before* any shimmed adopted styles. This\n * will match spec behavior that gives adopted sheets precedence over styles in\n * shadowRoot.\n */\nexport const adoptStyles = (\n  renderRoot: ShadowRoot,\n  styles: Array<CSSResultOrNative>\n) => {\n  if (supportsAdoptingStyleSheets) {\n    (renderRoot as ShadowRoot).adoptedStyleSheets = styles.map((s) =>\n      s instanceof CSSStyleSheet ? s : s.styleSheet!\n    );\n  } else {\n    for (const s of styles) {\n      const style = document.createElement('style');\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const nonce = (global as any)['litNonce'];\n      if (nonce !== undefined) {\n        style.setAttribute('nonce', nonce);\n      }\n      style.textContent = (s as CSSResult).cssText;\n      renderRoot.appendChild(style);\n    }\n  }\n};\n\nconst cssResultFromStyleSheet = (sheet: CSSStyleSheet) => {\n  let cssText = '';\n  for (const rule of sheet.cssRules) {\n    cssText += rule.cssText;\n  }\n  return unsafeCSS(cssText);\n};\n\nexport const getCompatibleStyle =\n  supportsAdoptingStyleSheets ||\n  (NODE_MODE && global.CSSStyleSheet === undefined)\n    ? (s: CSSResultOrNative) => s\n    : (s: CSSResultOrNative) =>\n        s instanceof CSSStyleSheet ? cssResultFromStyleSheet(s) : s;\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;AAMA,MAAM,YAAY;AAElB,sDAAsD;AACtD,MAAM,SAAS;AAKR,MAAM,8BACX,OAAO,UAAU,IACjB,CAAC,OAAO,QAAQ,KAAK,aAAa,OAAO,QAAQ,CAAC,YAAY,KAC9D,wBAAwB,SAAS,SAAS,IAC1C,aAAa,cAAc,SAAS;AAkBtC,MAAM,oBAAoB;AAE1B,MAAM,cAAc,IAAI;AASlB,MAAO;IAOX,YACE,OAAe,EACf,OAAyC,EACzC,SAAiB,CAAA;QATnB,4CAA4C;QAC5C,IAAA,CAAC,eAAe,GAAG;QAUjB,IAAI,cAAc,mBAAmB;YACnC,MAAM,IAAI,MACR;QAEJ;QACA,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,QAAQ,GAAG;IAClB;IAEA,0EAA0E;IAC1E,4DAA4D;IAC5D,IAAI,aAAU;QACZ,2EAA2E;QAC3E,iBAAiB;QACjB,IAAI,aAAa,IAAI,CAAC,WAAW;QACjC,MAAM,UAAU,IAAI,CAAC,QAAQ;QAC7B,IAAI,+BAA+B,eAAe,WAAW;YAC3D,MAAM,YAAY,YAAY,aAAa,QAAQ,MAAM,KAAK;YAC9D,IAAI,WAAW;gBACb,aAAa,YAAY,GAAG,CAAC;YAC/B;YACA,IAAI,eAAe,WAAW;gBAC5B,CAAC,IAAI,CAAC,WAAW,GAAG,aAAa,IAAI,eAAe,EAAE,WAAW,CAC/D,IAAI,CAAC,OAAO;gBAEd,IAAI,WAAW;oBACb,YAAY,GAAG,CAAC,SAAS;gBAC3B;YACF;QACF;QACA,OAAO;IACT;IAEA,WAAQ;QACN,OAAO,IAAI,CAAC,OAAO;IACrB;;AAWF,MAAM,oBAAoB,CAAC;IACzB,4CAA4C;IAC5C,IAAK,KAAmB,CAAC,eAAe,KAAK,MAAM;QACjD,OAAQ,MAAoB,OAAO;IACrC,OAAO,IAAI,OAAO,UAAU,UAAU;QACpC,OAAO;IACT,OAAO;QACL,MAAM,IAAI,MACR,CAAA,gEAAA,CAAkE,GAChE,CAAA,EAAG,MAAK,4DAAA,CAA8D,GACtE,CAAA,wBAAA,CAA0B;IAEhC;AACF;AASO,MAAM,YAAY,CAAC,QACxB,IAAK,UACH,OAAO,UAAU,WAAW,QAAQ,OAAO,QAC3C,WACA;AAWG,MAAM,MAAM,CACjB,SACA,GAAG;IAEH,MAAM,UACJ,QAAQ,MAAM,KAAK,IACf,OAAO,CAAC,EAAE,GACV,OAAO,MAAM,CACX,CAAC,KAAK,GAAG,MAAQ,MAAM,kBAAkB,KAAK,OAAO,CAAC,MAAM,EAAE,EAC9D,OAAO,CAAC,EAAE;IAElB,OAAO,IAAK,UACV,SACA,SACA;AAEJ;AAWO,MAAM,cAAc,CACzB,YACA;IAEA,IAAI,6BAA6B;QAC9B,WAA0B,kBAAkB,GAAG,OAAO,GAAG,CAAC,CAAC,IAC1D,aAAa,gBAAgB,IAAI,EAAE,UAAW;IAElD,OAAO;QACL,KAAK,MAAM,KAAK,OAAQ;YACtB,MAAM,QAAQ,SAAS,aAAa,CAAC;YACrC,8DAA8D;YAC9D,MAAM,QAAS,MAAc,CAAC,WAAW;YACzC,IAAI,UAAU,WAAW;gBACvB,MAAM,YAAY,CAAC,SAAS;YAC9B;YACA,MAAM,WAAW,GAAI,EAAgB,OAAO;YAC5C,WAAW,WAAW,CAAC;QACzB;IACF;AACF;AAEA,MAAM,0BAA0B,CAAC;IAC/B,IAAI,UAAU;IACd,KAAK,MAAM,QAAQ,MAAM,QAAQ,CAAE;QACjC,WAAW,KAAK,OAAO;IACzB;IACA,OAAO,UAAU;AACnB;AAEO,MAAM,qBACX,+BACC,aAAa,OAAO,aAAa,KAAK,YACnC,CAAC,IAAyB,IAC1B,CAAC,IACC,aAAa,gBAAgB,wBAAwB,KAAK"}},
    {"offset": {"line": 1614, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1619, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@web3modal/scaffold/node_modules/@lit/reactive-element/src/reactive-element.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * Use this module if you want to create your own base class extending\n * {@link ReactiveElement}.\n * @packageDocumentation\n */\n\nimport {\n  getCompatibleStyle,\n  adoptStyles,\n  CSSResultGroup,\n  CSSResultOrNative,\n} from './css-tag.js';\nimport type {\n  ReactiveController,\n  ReactiveControllerHost,\n} from './reactive-controller.js';\n\n// In the Node build, this import will be injected by Rollup:\n// import {HTMLElement, customElements} from '@lit-labs/ssr-dom-shim';\n\nexport * from './css-tag.js';\nexport type {\n  ReactiveController,\n  ReactiveControllerHost,\n} from './reactive-controller.js';\n\n/**\n * Removes the `readonly` modifier from properties in the union K.\n *\n * This is a safer way to cast a value to a type with a mutable version of a\n * readonly field, than casting to an interface with the field re-declared\n * because it preserves the type of all the fields and warns on typos.\n */\ntype Mutable<T, K extends keyof T> = Omit<T, K> & {\n  -readonly [P in keyof Pick<T, K>]: P extends K ? T[P] : never;\n};\n\n// TODO (justinfagnani): Add `hasOwn` here when we ship ES2022\nconst {\n  is,\n  defineProperty,\n  getOwnPropertyDescriptor,\n  getOwnPropertyNames,\n  getOwnPropertySymbols,\n  getPrototypeOf,\n} = Object;\n\nconst NODE_MODE = false;\n\n// Lets a minifier replace globalThis references with a minified name\nconst global = globalThis;\n\nif (NODE_MODE) {\n  global.customElements ??= customElements;\n}\n\nconst DEV_MODE = true;\n\nlet issueWarning: (code: string, warning: string) => void;\n\nconst trustedTypes = (global as unknown as {trustedTypes?: {emptyScript: ''}})\n  .trustedTypes;\n\n// Temporary workaround for https://crbug.com/993268\n// Currently, any attribute starting with \"on\" is considered to be a\n// TrustedScript source. Such boolean attributes must be set to the equivalent\n// trusted emptyScript value.\nconst emptyStringForBooleanAttribute = trustedTypes\n  ? (trustedTypes.emptyScript as unknown as '')\n  : '';\n\nconst polyfillSupport = DEV_MODE\n  ? global.reactiveElementPolyfillSupportDevMode\n  : global.reactiveElementPolyfillSupport;\n\nif (DEV_MODE) {\n  // Ensure warnings are issued only 1x, even if multiple versions of Lit\n  // are loaded.\n  const issuedWarnings: Set<string | undefined> = (global.litIssuedWarnings ??=\n    new Set());\n\n  // Issue a warning, if we haven't already.\n  issueWarning = (code: string, warning: string) => {\n    warning += ` See https://lit.dev/msg/${code} for more information.`;\n    if (!issuedWarnings.has(warning)) {\n      console.warn(warning);\n      issuedWarnings.add(warning);\n    }\n  };\n\n  issueWarning(\n    'dev-mode',\n    `Lit is in dev mode. Not recommended for production!`\n  );\n\n  // Issue polyfill support warning.\n  if (global.ShadyDOM?.inUse && polyfillSupport === undefined) {\n    issueWarning(\n      'polyfill-support-missing',\n      `Shadow DOM is being polyfilled via \\`ShadyDOM\\` but ` +\n        `the \\`polyfill-support\\` module has not been loaded.`\n    );\n  }\n}\n\n/**\n * Contains types that are part of the unstable debug API.\n *\n * Everything in this API is not stable and may change or be removed in the future,\n * even on patch releases.\n */\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace ReactiveUnstable {\n  /**\n   * When Lit is running in dev mode and `window.emitLitDebugLogEvents` is true,\n   * we will emit 'lit-debug' events to window, with live details about the update and render\n   * lifecycle. These can be useful for writing debug tooling and visualizations.\n   *\n   * Please be aware that running with window.emitLitDebugLogEvents has performance overhead,\n   * making certain operations that are normally very cheap (like a no-op render) much slower,\n   * because we must copy data and dispatch events.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  export namespace DebugLog {\n    export type Entry = Update;\n    export interface Update {\n      kind: 'update';\n    }\n  }\n}\n\ninterface DebugLoggingWindow {\n  // Even in dev mode, we generally don't want to emit these events, as that's\n  // another level of cost, so only emit them when DEV_MODE is true _and_ when\n  // window.emitLitDebugEvents is true.\n  emitLitDebugLogEvents?: boolean;\n}\n\n/**\n * Useful for visualizing and logging insights into what the Lit template system is doing.\n *\n * Compiled out of prod mode builds.\n */\nconst debugLogEvent = DEV_MODE\n  ? (event: ReactiveUnstable.DebugLog.Entry) => {\n      const shouldEmit = (global as unknown as DebugLoggingWindow)\n        .emitLitDebugLogEvents;\n      if (!shouldEmit) {\n        return;\n      }\n      global.dispatchEvent(\n        new CustomEvent<ReactiveUnstable.DebugLog.Entry>('lit-debug', {\n          detail: event,\n        })\n      );\n    }\n  : undefined;\n\n/*\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\n/*@__INLINE__*/\nconst JSCompiler_renameProperty = <P extends PropertyKey>(\n  prop: P,\n  _obj: unknown\n): P => prop;\n\n/**\n * Converts property values to and from attribute values.\n */\nexport interface ComplexAttributeConverter<Type = unknown, TypeHint = unknown> {\n  /**\n   * Called to convert an attribute value to a property\n   * value.\n   */\n  fromAttribute?(value: string | null, type?: TypeHint): Type;\n\n  /**\n   * Called to convert a property value to an attribute\n   * value.\n   *\n   * It returns unknown instead of string, to be compatible with\n   * https://github.com/WICG/trusted-types (and similar efforts).\n   */\n  toAttribute?(value: Type, type?: TypeHint): unknown;\n}\n\ntype AttributeConverter<Type = unknown, TypeHint = unknown> =\n  | ComplexAttributeConverter<Type>\n  | ((value: string | null, type?: TypeHint) => Type);\n\n/**\n * Defines options for a property accessor.\n */\nexport interface PropertyDeclaration<Type = unknown, TypeHint = unknown> {\n  /**\n   * When set to `true`, indicates the property is internal private state. The\n   * property should not be set by users. When using TypeScript, this property\n   * should be marked as `private` or `protected`, and it is also a common\n   * practice to use a leading `_` in the name. The property is not added to\n   * `observedAttributes`.\n   */\n  readonly state?: boolean;\n\n  /**\n   * Indicates how and whether the property becomes an observed attribute.\n   * If the value is `false`, the property is not added to `observedAttributes`.\n   * If true or absent, the lowercased property name is observed (e.g. `fooBar`\n   * becomes `foobar`). If a string, the string value is observed (e.g\n   * `attribute: 'foo-bar'`).\n   */\n  readonly attribute?: boolean | string;\n\n  /**\n   * Indicates the type of the property. This is used only as a hint for the\n   * `converter` to determine how to convert the attribute\n   * to/from a property.\n   */\n  readonly type?: TypeHint;\n\n  /**\n   * Indicates how to convert the attribute to/from a property. If this value\n   * is a function, it is used to convert the attribute value a the property\n   * value. If it's an object, it can have keys for `fromAttribute` and\n   * `toAttribute`. If no `toAttribute` function is provided and\n   * `reflect` is set to `true`, the property value is set directly to the\n   * attribute. A default `converter` is used if none is provided; it supports\n   * `Boolean`, `String`, `Number`, `Object`, and `Array`. Note,\n   * when a property changes and the converter is used to update the attribute,\n   * the property is never updated again as a result of the attribute changing,\n   * and vice versa.\n   */\n  readonly converter?: AttributeConverter<Type, TypeHint>;\n\n  /**\n   * Indicates if the property should reflect to an attribute.\n   * If `true`, when the property is set, the attribute is set using the\n   * attribute name determined according to the rules for the `attribute`\n   * property option and the value of the property converted using the rules\n   * from the `converter` property option.\n   */\n  readonly reflect?: boolean;\n\n  /**\n   * A function that indicates if a property should be considered changed when\n   * it is set. The function should take the `newValue` and `oldValue` and\n   * return `true` if an update should be requested.\n   */\n  hasChanged?(value: Type, oldValue: Type): boolean;\n\n  /**\n   * Indicates whether an accessor will be created for this property. By\n   * default, an accessor will be generated for this property that requests an\n   * update when set. If this flag is `true`, no accessor will be created, and\n   * it will be the user's responsibility to call\n   * `this.requestUpdate(propertyName, oldValue)` to request an update when\n   * the property changes.\n   */\n  readonly noAccessor?: boolean;\n\n  /**\n   * Whether this property is wrapping accessors. This is set by `@property`\n   * to control the initial value change and reflection logic.\n   *\n   * @internal\n   */\n  wrapped?: boolean;\n}\n\n/**\n * Map of properties to PropertyDeclaration options. For each property an\n * accessor is made, and the property is processed according to the\n * PropertyDeclaration options.\n */\nexport interface PropertyDeclarations {\n  readonly [key: string]: PropertyDeclaration;\n}\n\ntype PropertyDeclarationMap = Map<PropertyKey, PropertyDeclaration>;\n\ntype AttributeMap = Map<string, PropertyKey>;\n\n/**\n * A Map of property keys to values.\n *\n * Takes an optional type parameter T, which when specified as a non-any,\n * non-unknown type, will make the Map more strongly-typed, associating the map\n * keys with their corresponding value type on T.\n *\n * Use `PropertyValues<this>` when overriding ReactiveElement.update() and\n * other lifecycle methods in order to get stronger type-checking on keys\n * and values.\n */\n// This type is conditional so that if the parameter T is not specified, or\n// is `any`, the type will include `Map<PropertyKey, unknown>`. Since T is not\n// given in the uses of PropertyValues in this file, all uses here fallback to\n// meaning `Map<PropertyKey, unknown>`, but if a developer uses\n// `PropertyValues<this>` (or any other value for T) they will get a\n// strongly-typed Map type.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type PropertyValues<T = any> = T extends object\n  ? PropertyValueMap<T>\n  : Map<PropertyKey, unknown>;\n\n/**\n * Do not use, instead prefer {@linkcode PropertyValues}.\n */\n// This type must be exported such that JavaScript generated by the Google\n// Closure Compiler can import a type reference.\nexport interface PropertyValueMap<T> extends Map<PropertyKey, unknown> {\n  get<K extends keyof T>(k: K): T[K] | undefined;\n  set<K extends keyof T>(key: K, value: T[K]): this;\n  has<K extends keyof T>(k: K): boolean;\n  delete<K extends keyof T>(k: K): boolean;\n}\n\nexport const defaultConverter: ComplexAttributeConverter = {\n  toAttribute(value: unknown, type?: unknown): unknown {\n    switch (type) {\n      case Boolean:\n        value = value ? emptyStringForBooleanAttribute : null;\n        break;\n      case Object:\n      case Array:\n        // if the value is `null` or `undefined` pass this through\n        // to allow removing/no change behavior.\n        value = value == null ? value : JSON.stringify(value);\n        break;\n    }\n    return value;\n  },\n\n  fromAttribute(value: string | null, type?: unknown) {\n    let fromValue: unknown = value;\n    switch (type) {\n      case Boolean:\n        fromValue = value !== null;\n        break;\n      case Number:\n        fromValue = value === null ? null : Number(value);\n        break;\n      case Object:\n      case Array:\n        // Do *not* generate exception when invalid JSON is set as elements\n        // don't normally complain on being mis-configured.\n        // TODO(sorvell): Do generate exception in *dev mode*.\n        try {\n          // Assert to adhere to Bazel's \"must type assert JSON parse\" rule.\n          fromValue = JSON.parse(value!) as unknown;\n        } catch (e) {\n          fromValue = null;\n        }\n        break;\n    }\n    return fromValue;\n  },\n};\n\nexport interface HasChanged {\n  (value: unknown, old: unknown): boolean;\n}\n\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual: HasChanged = (value: unknown, old: unknown): boolean =>\n  !is(value, old);\n\nconst defaultPropertyDeclaration: PropertyDeclaration = {\n  attribute: true,\n  type: String,\n  converter: defaultConverter,\n  reflect: false,\n  hasChanged: notEqual,\n};\n\n/**\n * A string representing one of the supported dev mode warning categories.\n */\nexport type WarningKind =\n  | 'change-in-update'\n  | 'migration'\n  | 'async-perform-update';\n\nexport type Initializer = (element: ReactiveElement) => void;\n\n// Temporary, until google3 is on TypeScript 5.2\ndeclare global {\n  interface SymbolConstructor {\n    readonly metadata: unique symbol;\n  }\n}\n\n// Ensure metadata is enabled. TypeScript does not polyfill\n// Symbol.metadata, so we must ensure that it exists.\n(Symbol as {metadata: symbol}).metadata ??= Symbol('metadata');\n\ndeclare global {\n  // This is public global API, do not change!\n  // eslint-disable-next-line no-var\n  var litPropertyMetadata: WeakMap<\n    object,\n    Map<PropertyKey, PropertyDeclaration>\n  >;\n}\n\n// Map from a class's metadata object to property options\n// Note that we must use nullish-coalescing assignment so that we only use one\n// map even if we load multiple version of this module.\nglobal.litPropertyMetadata ??= new WeakMap<\n  object,\n  Map<PropertyKey, PropertyDeclaration>\n>();\n\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclasses to render updates as desired.\n * @noInheritDoc\n */\nexport abstract class ReactiveElement\n  // In the Node build, this `extends` clause will be substituted with\n  // `(globalThis.HTMLElement ?? HTMLElement)`.\n  //\n  // This way, we will first prefer any global `HTMLElement` polyfill that the\n  // user has assigned, and then fall back to the `HTMLElement` shim which has\n  // been imported (see note at the top of this file about how this import is\n  // generated by Rollup). Note that the `HTMLElement` variable has been\n  // shadowed by this import, so it no longer refers to the global.\n  extends HTMLElement\n  implements ReactiveControllerHost\n{\n  // Note: these are patched in only in DEV_MODE.\n  /**\n   * Read or set all the enabled warning categories for this class.\n   *\n   * This property is only used in development builds.\n   *\n   * @nocollapse\n   * @category dev-mode\n   */\n  static enabledWarnings?: WarningKind[];\n\n  /**\n   * Enable the given warning category for this class.\n   *\n   * This method only exists in development builds, so it should be accessed\n   * with a guard like:\n   *\n   * ```ts\n   * // Enable for all ReactiveElement subclasses\n   * ReactiveElement.enableWarning?.('migration');\n   *\n   * // Enable for only MyElement and subclasses\n   * MyElement.enableWarning?.('migration');\n   * ```\n   *\n   * @nocollapse\n   * @category dev-mode\n   */\n  static enableWarning?: (warningKind: WarningKind) => void;\n\n  /**\n   * Disable the given warning category for this class.\n   *\n   * This method only exists in development builds, so it should be accessed\n   * with a guard like:\n   *\n   * ```ts\n   * // Disable for all ReactiveElement subclasses\n   * ReactiveElement.disableWarning?.('migration');\n   *\n   * // Disable for only MyElement and subclasses\n   * MyElement.disableWarning?.('migration');\n   * ```\n   *\n   * @nocollapse\n   * @category dev-mode\n   */\n  static disableWarning?: (warningKind: WarningKind) => void;\n\n  /**\n   * Adds an initializer function to the class that is called during instance\n   * construction.\n   *\n   * This is useful for code that runs against a `ReactiveElement`\n   * subclass, such as a decorator, that needs to do work for each\n   * instance, such as setting up a `ReactiveController`.\n   *\n   * ```ts\n   * const myDecorator = (target: typeof ReactiveElement, key: string) => {\n   *   target.addInitializer((instance: ReactiveElement) => {\n   *     // This is run during construction of the element\n   *     new MyController(instance);\n   *   });\n   * }\n   * ```\n   *\n   * Decorating a field will then cause each instance to run an initializer\n   * that adds a controller:\n   *\n   * ```ts\n   * class MyElement extends LitElement {\n   *   @myDecorator foo;\n   * }\n   * ```\n   *\n   * Initializers are stored per-constructor. Adding an initializer to a\n   * subclass does not add it to a superclass. Since initializers are run in\n   * constructors, initializers will run in order of the class hierarchy,\n   * starting with superclasses and progressing to the instance's class.\n   *\n   * @nocollapse\n   */\n  static addInitializer(initializer: Initializer) {\n    this.__prepare();\n    (this._initializers ??= []).push(initializer);\n  }\n\n  static _initializers?: Initializer[];\n\n  /*\n   * Due to closure compiler ES6 compilation bugs, @nocollapse is required on\n   * all static methods and properties with initializers.  Reference:\n   * - https://github.com/google/closure-compiler/issues/1776\n   */\n\n  /**\n   * Maps attribute names to properties; for example `foobar` attribute to\n   * `fooBar` property. Created lazily on user subclasses when finalizing the\n   * class.\n   * @nocollapse\n   */\n  private static __attributeToPropertyMap: AttributeMap;\n\n  /**\n   * Marks class as having been finalized, which includes creating properties\n   * from `static properties`, but does *not* include all properties created\n   * from decorators.\n   * @nocollapse\n   */\n  protected static finalized: true | undefined;\n\n  /**\n   * Memoized list of all element properties, including any superclass\n   * properties. Created lazily on user subclasses when finalizing the class.\n   *\n   * @nocollapse\n   * @category properties\n   */\n  static elementProperties: PropertyDeclarationMap;\n\n  /**\n   * User-supplied object that maps property names to `PropertyDeclaration`\n   * objects containing options for configuring reactive properties. When\n   * a reactive property is set the element will update and render.\n   *\n   * By default properties are public fields, and as such, they should be\n   * considered as primarily settable by element users, either via attribute or\n   * the property itself.\n   *\n   * Generally, properties that are changed by the element should be private or\n   * protected fields and should use the `state: true` option. Properties\n   * marked as `state` do not reflect from the corresponding attribute\n   *\n   * However, sometimes element code does need to set a public property. This\n   * should typically only be done in response to user interaction, and an event\n   * should be fired informing the user; for example, a checkbox sets its\n   * `checked` property when clicked and fires a `changed` event. Mutating\n   * public properties should typically not be done for non-primitive (object or\n   * array) properties. In other cases when an element needs to manage state, a\n   * private property set with the `state: true` option should be used. When\n   * needed, state properties can be initialized via public properties to\n   * facilitate complex interactions.\n   * @nocollapse\n   * @category properties\n   */\n  static properties: PropertyDeclarations;\n\n  /**\n   * Memoized list of all element styles.\n   * Created lazily on user subclasses when finalizing the class.\n   * @nocollapse\n   * @category styles\n   */\n  static elementStyles: Array<CSSResultOrNative> = [];\n\n  /**\n   * Array of styles to apply to the element. The styles should be defined\n   * using the {@linkcode css} tag function, via constructible stylesheets, or\n   * imported from native CSS module scripts.\n   *\n   * Note on Content Security Policy:\n   *\n   * Element styles are implemented with `<style>` tags when the browser doesn't\n   * support adopted StyleSheets. To use such `<style>` tags with the style-src\n   * CSP directive, the style-src value must either include 'unsafe-inline' or\n   * `nonce-<base64-value>` with `<base64-value>` replaced be a server-generated\n   * nonce.\n   *\n   * To provide a nonce to use on generated `<style>` elements, set\n   * `window.litNonce` to a server-generated nonce in your page's HTML, before\n   * loading application code:\n   *\n   * ```html\n   * <script>\n   *   // Generated and unique per request:\n   *   window.litNonce = 'a1b2c3d4';\n   * </script>\n   * ```\n   * @nocollapse\n   * @category styles\n   */\n  static styles?: CSSResultGroup;\n\n  /**\n   * Returns a list of attributes corresponding to the registered properties.\n   * @nocollapse\n   * @category attributes\n   */\n  static get observedAttributes() {\n    // Ensure we've created all properties\n    this.finalize();\n    // this.__attributeToPropertyMap is only undefined after finalize() in\n    // ReactiveElement itself. ReactiveElement.observedAttributes is only\n    // accessed with ReactiveElement as the receiver when a subclass or mixin\n    // calls super.observedAttributes\n    return (\n      this.__attributeToPropertyMap && [...this.__attributeToPropertyMap.keys()]\n    );\n  }\n\n  private __instanceProperties?: PropertyValues = undefined;\n\n  /**\n   * Creates a property accessor on the element prototype if one does not exist\n   * and stores a {@linkcode PropertyDeclaration} for the property with the\n   * given options. The property setter calls the property's `hasChanged`\n   * property option or uses a strict identity check to determine whether or not\n   * to request an update.\n   *\n   * This method may be overridden to customize properties; however,\n   * when doing so, it's important to call `super.createProperty` to ensure\n   * the property is setup correctly. This method calls\n   * `getPropertyDescriptor` internally to get a descriptor to install.\n   * To customize what properties do when they are get or set, override\n   * `getPropertyDescriptor`. To customize the options for a property,\n   * implement `createProperty` like this:\n   *\n   * ```ts\n   * static createProperty(name, options) {\n   *   options = Object.assign(options, {myOption: true});\n   *   super.createProperty(name, options);\n   * }\n   * ```\n   *\n   * @nocollapse\n   * @category properties\n   */\n  static createProperty(\n    name: PropertyKey,\n    options: PropertyDeclaration = defaultPropertyDeclaration\n  ) {\n    // If this is a state property, force the attribute to false.\n    if (options.state) {\n      (options as Mutable<PropertyDeclaration, 'attribute'>).attribute = false;\n    }\n    this.__prepare();\n    this.elementProperties.set(name, options);\n    if (!options.noAccessor) {\n      const key = DEV_MODE\n        ? // Use Symbol.for in dev mode to make it easier to maintain state\n          // when doing HMR.\n          Symbol.for(`${String(name)} (@property() cache)`)\n        : Symbol();\n      const descriptor = this.getPropertyDescriptor(name, key, options);\n      if (descriptor !== undefined) {\n        defineProperty(this.prototype, name, descriptor);\n      }\n    }\n  }\n\n  /**\n   * Returns a property descriptor to be defined on the given named property.\n   * If no descriptor is returned, the property will not become an accessor.\n   * For example,\n   *\n   * ```ts\n   * class MyElement extends LitElement {\n   *   static getPropertyDescriptor(name, key, options) {\n   *     const defaultDescriptor =\n   *         super.getPropertyDescriptor(name, key, options);\n   *     const setter = defaultDescriptor.set;\n   *     return {\n   *       get: defaultDescriptor.get,\n   *       set(value) {\n   *         setter.call(this, value);\n   *         // custom action.\n   *       },\n   *       configurable: true,\n   *       enumerable: true\n   *     }\n   *   }\n   * }\n   * ```\n   *\n   * @nocollapse\n   * @category properties\n   */\n  protected static getPropertyDescriptor(\n    name: PropertyKey,\n    key: string | symbol,\n    options: PropertyDeclaration\n  ): PropertyDescriptor | undefined {\n    const {get, set} = getOwnPropertyDescriptor(this.prototype, name) ?? {\n      get(this: ReactiveElement) {\n        return this[key as keyof typeof this];\n      },\n      set(this: ReactiveElement, v: unknown) {\n        (this as unknown as Record<string | symbol, unknown>)[key] = v;\n      },\n    };\n    if (DEV_MODE && get == null) {\n      if ('value' in (getOwnPropertyDescriptor(this.prototype, name) ?? {})) {\n        throw new Error(\n          `Field ${JSON.stringify(String(name))} on ` +\n            `${this.name} was declared as a reactive property ` +\n            `but it's actually declared as a value on the prototype. ` +\n            `Usually this is due to using @property or @state on a method.`\n        );\n      }\n      issueWarning(\n        'reactive-property-without-getter',\n        `Field ${JSON.stringify(String(name))} on ` +\n          `${this.name} was declared as a reactive property ` +\n          `but it does not have a getter. This will be an error in a ` +\n          `future version of Lit.`\n      );\n    }\n    return {\n      get(this: ReactiveElement) {\n        return get?.call(this);\n      },\n      set(this: ReactiveElement, value: unknown) {\n        const oldValue = get?.call(this);\n        set!.call(this, value);\n        this.requestUpdate(name, oldValue, options);\n      },\n      configurable: true,\n      enumerable: true,\n    };\n  }\n\n  /**\n   * Returns the property options associated with the given property.\n   * These options are defined with a `PropertyDeclaration` via the `properties`\n   * object or the `@property` decorator and are registered in\n   * `createProperty(...)`.\n   *\n   * Note, this method should be considered \"final\" and not overridden. To\n   * customize the options for a given property, override\n   * {@linkcode createProperty}.\n   *\n   * @nocollapse\n   * @final\n   * @category properties\n   */\n  static getPropertyOptions(name: PropertyKey) {\n    return this.elementProperties.get(name) ?? defaultPropertyDeclaration;\n  }\n\n  // Temporary, until google3 is on TypeScript 5.2\n  declare static [Symbol.metadata]: object & Record<PropertyKey, unknown>;\n\n  /**\n   * Initializes static own properties of the class used in bookkeeping\n   * for element properties, initializers, etc.\n   *\n   * Can be called multiple times by code that needs to ensure these\n   * properties exist before using them.\n   *\n   * This method ensures the superclass is finalized so that inherited\n   * property metadata can be copied down.\n   * @nocollapse\n   */\n  private static __prepare() {\n    if (\n      this.hasOwnProperty(JSCompiler_renameProperty('elementProperties', this))\n    ) {\n      // Already prepared\n      return;\n    }\n    // Finalize any superclasses\n    const superCtor = getPrototypeOf(this) as typeof ReactiveElement;\n    superCtor.finalize();\n\n    // Create own set of initializers for this class if any exist on the\n    // superclass and copy them down. Note, for a small perf boost, avoid\n    // creating initializers unless needed.\n    if (superCtor._initializers !== undefined) {\n      this._initializers = [...superCtor._initializers];\n    }\n    // Initialize elementProperties from the superclass\n    this.elementProperties = new Map(superCtor.elementProperties);\n  }\n\n  /**\n   * Finishes setting up the class so that it's ready to be registered\n   * as a custom element and instantiated.\n   *\n   * This method is called by the ReactiveElement.observedAttributes getter.\n   * If you override the observedAttributes getter, you must either call\n   * super.observedAttributes to trigger finalization, or call finalize()\n   * yourself.\n   *\n   * @nocollapse\n   */\n  protected static finalize() {\n    if (this.hasOwnProperty(JSCompiler_renameProperty('finalized', this))) {\n      return;\n    }\n    this.finalized = true;\n    this.__prepare();\n\n    // Create properties from the static properties block:\n    if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n      const props = this.properties;\n      const propKeys = [\n        ...getOwnPropertyNames(props),\n        ...getOwnPropertySymbols(props),\n      ] as Array<keyof typeof props>;\n      for (const p of propKeys) {\n        this.createProperty(p, props[p]);\n      }\n    }\n\n    // Create properties from standard decorator metadata:\n    const metadata = this[Symbol.metadata];\n    if (metadata !== null) {\n      const properties = litPropertyMetadata.get(metadata);\n      if (properties !== undefined) {\n        for (const [p, options] of properties) {\n          this.elementProperties.set(p, options);\n        }\n      }\n    }\n\n    // Create the attribute-to-property map\n    this.__attributeToPropertyMap = new Map();\n    for (const [p, options] of this.elementProperties) {\n      const attr = this.__attributeNameForProperty(p, options);\n      if (attr !== undefined) {\n        this.__attributeToPropertyMap.set(attr, p);\n      }\n    }\n\n    this.elementStyles = this.finalizeStyles(this.styles);\n\n    if (DEV_MODE) {\n      if (this.hasOwnProperty('createProperty')) {\n        issueWarning(\n          'no-override-create-property',\n          'Overriding ReactiveElement.createProperty() is deprecated. ' +\n            'The override will not be called with standard decorators'\n        );\n      }\n      if (this.hasOwnProperty('getPropertyDescriptor')) {\n        issueWarning(\n          'no-override-get-property-descriptor',\n          'Overriding ReactiveElement.getPropertyDescriptor() is deprecated. ' +\n            'The override will not be called with standard decorators'\n        );\n      }\n    }\n  }\n\n  /**\n   * Options used when calling `attachShadow`. Set this property to customize\n   * the options for the shadowRoot; for example, to create a closed\n   * shadowRoot: `{mode: 'closed'}`.\n   *\n   * Note, these options are used in `createRenderRoot`. If this method\n   * is customized, options should be respected if possible.\n   * @nocollapse\n   * @category rendering\n   */\n  static shadowRootOptions: ShadowRootInit = {mode: 'open'};\n\n  /**\n   * Takes the styles the user supplied via the `static styles` property and\n   * returns the array of styles to apply to the element.\n   * Override this method to integrate into a style management system.\n   *\n   * Styles are deduplicated preserving the _last_ instance in the list. This\n   * is a performance optimization to avoid duplicated styles that can occur\n   * especially when composing via subclassing. The last item is kept to try\n   * to preserve the cascade order with the assumption that it's most important\n   * that last added styles override previous styles.\n   *\n   * @nocollapse\n   * @category styles\n   */\n  protected static finalizeStyles(\n    styles?: CSSResultGroup\n  ): Array<CSSResultOrNative> {\n    const elementStyles = [];\n    if (Array.isArray(styles)) {\n      // Dedupe the flattened array in reverse order to preserve the last items.\n      // Casting to Array<unknown> works around TS error that\n      // appears to come from trying to flatten a type CSSResultArray.\n      const set = new Set((styles as Array<unknown>).flat(Infinity).reverse());\n      // Then preserve original order by adding the set items in reverse order.\n      for (const s of set) {\n        elementStyles.unshift(getCompatibleStyle(s as CSSResultOrNative));\n      }\n    } else if (styles !== undefined) {\n      elementStyles.push(getCompatibleStyle(styles));\n    }\n    return elementStyles;\n  }\n\n  /**\n   * Node or ShadowRoot into which element DOM should be rendered. Defaults\n   * to an open shadowRoot.\n   * @category rendering\n   */\n  readonly renderRoot!: HTMLElement | DocumentFragment;\n\n  /**\n   * Returns the property name for the given attribute `name`.\n   * @nocollapse\n   */\n  private static __attributeNameForProperty(\n    name: PropertyKey,\n    options: PropertyDeclaration\n  ) {\n    const attribute = options.attribute;\n    return attribute === false\n      ? undefined\n      : typeof attribute === 'string'\n      ? attribute\n      : typeof name === 'string'\n      ? name.toLowerCase()\n      : undefined;\n  }\n\n  // Initialize to an unresolved Promise so we can make sure the element has\n  // connected before first update.\n  private __updatePromise!: Promise<boolean>;\n\n  /**\n   * True if there is a pending update as a result of calling `requestUpdate()`.\n   * Should only be read.\n   * @category updates\n   */\n  isUpdatePending = false;\n\n  /**\n   * Is set to `true` after the first update. The element code cannot assume\n   * that `renderRoot` exists before the element `hasUpdated`.\n   * @category updates\n   */\n  hasUpdated = false;\n\n  /**\n   * Map with keys for any properties that have changed since the last\n   * update cycle with previous values.\n   *\n   * @internal\n   */\n  _$changedProperties!: PropertyValues;\n\n  /**\n   * Properties that should be reflected when updated.\n   */\n  private __reflectingProperties?: Set<PropertyKey>;\n\n  /**\n   * Name of currently reflecting property\n   */\n  private __reflectingProperty: PropertyKey | null = null;\n\n  /**\n   * Set of controllers.\n   */\n  private __controllers?: Set<ReactiveController>;\n\n  constructor() {\n    super();\n    this.__initialize();\n  }\n\n  /**\n   * Internal only override point for customizing work done when elements\n   * are constructed.\n   */\n  private __initialize() {\n    this.__updatePromise = new Promise<boolean>(\n      (res) => (this.enableUpdating = res)\n    );\n    this._$changedProperties = new Map();\n    // This enqueues a microtask that ust run before the first update, so it\n    // must be called before requestUpdate()\n    this.__saveInstanceProperties();\n    // ensures first update will be caught by an early access of\n    // `updateComplete`\n    this.requestUpdate();\n    (this.constructor as typeof ReactiveElement)._initializers?.forEach((i) =>\n      i(this)\n    );\n  }\n\n  /**\n   * Registers a `ReactiveController` to participate in the element's reactive\n   * update cycle. The element automatically calls into any registered\n   * controllers during its lifecycle callbacks.\n   *\n   * If the element is connected when `addController()` is called, the\n   * controller's `hostConnected()` callback will be immediately called.\n   * @category controllers\n   */\n  addController(controller: ReactiveController) {\n    (this.__controllers ??= new Set()).add(controller);\n    // If a controller is added after the element has been connected,\n    // call hostConnected. Note, re-using existence of `renderRoot` here\n    // (which is set in connectedCallback) to avoid the need to track a\n    // first connected state.\n    if (this.renderRoot !== undefined && this.isConnected) {\n      controller.hostConnected?.();\n    }\n  }\n\n  /**\n   * Removes a `ReactiveController` from the element.\n   * @category controllers\n   */\n  removeController(controller: ReactiveController) {\n    this.__controllers?.delete(controller);\n  }\n\n  /**\n   * Fixes any properties set on the instance before upgrade time.\n   * Otherwise these would shadow the accessor and break these properties.\n   * The properties are stored in a Map which is played back after the\n   * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n   * (<=41), properties created for native platform properties like (`id` or\n   * `name`) may not have default values set in the element constructor. On\n   * these browsers native properties appear on instances and therefore their\n   * default value will overwrite any element default (e.g. if the element sets\n   * this.id = 'id' in the constructor, the 'id' will become '' since this is\n   * the native platform default).\n   */\n  private __saveInstanceProperties() {\n    const instanceProperties = new Map<PropertyKey, unknown>();\n    const elementProperties = (this.constructor as typeof ReactiveElement)\n      .elementProperties;\n    for (const p of elementProperties.keys() as IterableIterator<keyof this>) {\n      if (this.hasOwnProperty(p)) {\n        instanceProperties.set(p, this[p]);\n        delete this[p];\n      }\n    }\n    if (instanceProperties.size > 0) {\n      this.__instanceProperties = instanceProperties;\n    }\n  }\n\n  /**\n   * Returns the node into which the element should render and by default\n   * creates and returns an open shadowRoot. Implement to customize where the\n   * element's DOM is rendered. For example, to render into the element's\n   * childNodes, return `this`.\n   *\n   * @return Returns a node into which to render.\n   * @category rendering\n   */\n  protected createRenderRoot(): HTMLElement | DocumentFragment {\n    const renderRoot =\n      this.shadowRoot ??\n      this.attachShadow(\n        (this.constructor as typeof ReactiveElement).shadowRootOptions\n      );\n    adoptStyles(\n      renderRoot,\n      (this.constructor as typeof ReactiveElement).elementStyles\n    );\n    return renderRoot;\n  }\n\n  /**\n   * On first connection, creates the element's renderRoot, sets up\n   * element styling, and enables updating.\n   * @category lifecycle\n   */\n  connectedCallback() {\n    // Create renderRoot before controllers `hostConnected`\n    (this as Mutable<typeof this, 'renderRoot'>).renderRoot ??=\n      this.createRenderRoot();\n    this.enableUpdating(true);\n    this.__controllers?.forEach((c) => c.hostConnected?.());\n  }\n\n  /**\n   * Note, this method should be considered final and not overridden. It is\n   * overridden on the element instance with a function that triggers the first\n   * update.\n   * @category updates\n   */\n  protected enableUpdating(_requestedUpdate: boolean) {}\n\n  /**\n   * Allows for `super.disconnectedCallback()` in extensions while\n   * reserving the possibility of making non-breaking feature additions\n   * when disconnecting at some point in the future.\n   * @category lifecycle\n   */\n  disconnectedCallback() {\n    this.__controllers?.forEach((c) => c.hostDisconnected?.());\n  }\n\n  /**\n   * Synchronizes property values when attributes change.\n   *\n   * Specifically, when an attribute is set, the corresponding property is set.\n   * You should rarely need to implement this callback. If this method is\n   * overridden, `super.attributeChangedCallback(name, _old, value)` must be\n   * called.\n   *\n   * See [using the lifecycle callbacks](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#using_the_lifecycle_callbacks)\n   * on MDN for more information about the `attributeChangedCallback`.\n   * @category attributes\n   */\n  attributeChangedCallback(\n    name: string,\n    _old: string | null,\n    value: string | null\n  ) {\n    this._$attributeToProperty(name, value);\n  }\n\n  private __propertyToAttribute(name: PropertyKey, value: unknown) {\n    const elemProperties: PropertyDeclarationMap = (\n      this.constructor as typeof ReactiveElement\n    ).elementProperties;\n    const options = elemProperties.get(name)!;\n    const attr = (\n      this.constructor as typeof ReactiveElement\n    ).__attributeNameForProperty(name, options);\n    if (attr !== undefined && options.reflect === true) {\n      const converter =\n        (options.converter as ComplexAttributeConverter)?.toAttribute !==\n        undefined\n          ? (options.converter as ComplexAttributeConverter)\n          : defaultConverter;\n      const attrValue = converter.toAttribute!(value, options.type);\n      if (\n        DEV_MODE &&\n        (this.constructor as typeof ReactiveElement).enabledWarnings!.includes(\n          'migration'\n        ) &&\n        attrValue === undefined\n      ) {\n        issueWarning(\n          'undefined-attribute-value',\n          `The attribute value for the ${name as string} property is ` +\n            `undefined on element ${this.localName}. The attribute will be ` +\n            `removed, but in the previous version of \\`ReactiveElement\\`, ` +\n            `the attribute would not have changed.`\n        );\n      }\n      // Track if the property is being reflected to avoid\n      // setting the property again via `attributeChangedCallback`. Note:\n      // 1. this takes advantage of the fact that the callback is synchronous.\n      // 2. will behave incorrectly if multiple attributes are in the reaction\n      // stack at time of calling. However, since we process attributes\n      // in `update` this should not be possible (or an extreme corner case\n      // that we'd like to discover).\n      // mark state reflecting\n      this.__reflectingProperty = name;\n      if (attrValue == null) {\n        this.removeAttribute(attr);\n      } else {\n        this.setAttribute(attr, attrValue as string);\n      }\n      // mark state not reflecting\n      this.__reflectingProperty = null;\n    }\n  }\n\n  /** @internal */\n  _$attributeToProperty(name: string, value: string | null) {\n    const ctor = this.constructor as typeof ReactiveElement;\n    // Note, hint this as an `AttributeMap` so closure clearly understands\n    // the type; it has issues with tracking types through statics\n    const propName = (ctor.__attributeToPropertyMap as AttributeMap).get(name);\n    // Use tracking info to avoid reflecting a property value to an attribute\n    // if it was just set because the attribute changed.\n    if (propName !== undefined && this.__reflectingProperty !== propName) {\n      const options = ctor.getPropertyOptions(propName);\n      const converter =\n        typeof options.converter === 'function'\n          ? {fromAttribute: options.converter}\n          : options.converter?.fromAttribute !== undefined\n          ? options.converter\n          : defaultConverter;\n      // mark state reflecting\n      this.__reflectingProperty = propName;\n      this[propName as keyof this] = converter.fromAttribute!(\n        value,\n        options.type\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      ) as any;\n      // mark state not reflecting\n      this.__reflectingProperty = null;\n    }\n  }\n\n  /**\n   * Requests an update which is processed asynchronously. This should be called\n   * when an element should update based on some state not triggered by setting\n   * a reactive property. In this case, pass no arguments. It should also be\n   * called when manually implementing a property setter. In this case, pass the\n   * property `name` and `oldValue` to ensure that any configured property\n   * options are honored.\n   *\n   * @param name name of requesting property\n   * @param oldValue old value of requesting property\n   * @param options property options to use instead of the previously\n   *     configured options\n   * @category updates\n   */\n  requestUpdate(\n    name?: PropertyKey,\n    oldValue?: unknown,\n    options?: PropertyDeclaration\n  ): void {\n    // If we have a property key, perform property update steps.\n    if (name !== undefined) {\n      if (DEV_MODE && (name as unknown) instanceof Event) {\n        issueWarning(\n          ``,\n          `The requestUpdate() method was called with an Event as the property name. This is probably a mistake caused by binding this.requestUpdate as an event listener. Instead bind a function that will call it with no arguments: () => this.requestUpdate()`\n        );\n      }\n      options ??= (\n        this.constructor as typeof ReactiveElement\n      ).getPropertyOptions(name);\n      const hasChanged = options.hasChanged ?? notEqual;\n      const newValue = this[name as keyof this];\n      if (hasChanged(newValue, oldValue)) {\n        this._$changeProperty(name, oldValue, options);\n      } else {\n        // Abort the request if the property should not be considered changed.\n        return;\n      }\n    }\n    if (this.isUpdatePending === false) {\n      this.__updatePromise = this.__enqueueUpdate();\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _$changeProperty(\n    name: PropertyKey,\n    oldValue: unknown,\n    options: PropertyDeclaration\n  ) {\n    // TODO (justinfagnani): Create a benchmark of Map.has() + Map.set(\n    // vs just Map.set()\n    if (!this._$changedProperties.has(name)) {\n      this._$changedProperties.set(name, oldValue);\n    }\n    // Add to reflecting properties set.\n    // Note, it's important that every change has a chance to add the\n    // property to `__reflectingProperties`. This ensures setting\n    // attribute + property reflects correctly.\n    if (options.reflect === true && this.__reflectingProperty !== name) {\n      (this.__reflectingProperties ??= new Set<PropertyKey>()).add(name);\n    }\n  }\n\n  /**\n   * Sets up the element to asynchronously update.\n   */\n  private async __enqueueUpdate() {\n    this.isUpdatePending = true;\n    try {\n      // Ensure any previous update has resolved before updating.\n      // This `await` also ensures that property changes are batched.\n      await this.__updatePromise;\n    } catch (e) {\n      // Refire any previous errors async so they do not disrupt the update\n      // cycle. Errors are refired so developers have a chance to observe\n      // them, and this can be done by implementing\n      // `window.onunhandledrejection`.\n      Promise.reject(e);\n    }\n    const result = this.scheduleUpdate();\n    // If `scheduleUpdate` returns a Promise, we await it. This is done to\n    // enable coordinating updates with a scheduler. Note, the result is\n    // checked to avoid delaying an additional microtask unless we need to.\n    if (result != null) {\n      await result;\n    }\n    return !this.isUpdatePending;\n  }\n\n  /**\n   * Schedules an element update. You can override this method to change the\n   * timing of updates by returning a Promise. The update will await the\n   * returned Promise, and you should resolve the Promise to allow the update\n   * to proceed. If this method is overridden, `super.scheduleUpdate()`\n   * must be called.\n   *\n   * For instance, to schedule updates to occur just before the next frame:\n   *\n   * ```ts\n   * override protected async scheduleUpdate(): Promise<unknown> {\n   *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n   *   super.scheduleUpdate();\n   * }\n   * ```\n   * @category updates\n   */\n  protected scheduleUpdate(): void | Promise<unknown> {\n    const result = this.performUpdate();\n    if (\n      DEV_MODE &&\n      (this.constructor as typeof ReactiveElement).enabledWarnings!.includes(\n        'async-perform-update'\n      ) &&\n      typeof (result as unknown as Promise<unknown> | undefined)?.then ===\n        'function'\n    ) {\n      issueWarning(\n        'async-perform-update',\n        `Element ${this.localName} returned a Promise from performUpdate(). ` +\n          `This behavior is deprecated and will be removed in a future ` +\n          `version of ReactiveElement.`\n      );\n    }\n    return result;\n  }\n\n  /**\n   * Performs an element update. Note, if an exception is thrown during the\n   * update, `firstUpdated` and `updated` will not be called.\n   *\n   * Call `performUpdate()` to immediately process a pending update. This should\n   * generally not be needed, but it can be done in rare cases when you need to\n   * update synchronously.\n   *\n   * @category updates\n   */\n  protected performUpdate(): void {\n    // Abort any update if one is not pending when this is called.\n    // This can happen if `performUpdate` is called early to \"flush\"\n    // the update.\n    if (!this.isUpdatePending) {\n      return;\n    }\n    debugLogEvent?.({kind: 'update'});\n    if (!this.hasUpdated) {\n      // Create renderRoot before first update. This occurs in `connectedCallback`\n      // but is done here to support out of tree calls to `enableUpdating`/`performUpdate`.\n      (this as Mutable<typeof this, 'renderRoot'>).renderRoot ??=\n        this.createRenderRoot();\n      if (DEV_MODE) {\n        // Produce warning if any reactive properties on the prototype are\n        // shadowed by class fields. Instance fields set before upgrade are\n        // deleted by this point, so any own property is caused by class field\n        // initialization in the constructor.\n        const ctor = this.constructor as typeof ReactiveElement;\n        const shadowedProperties = [...ctor.elementProperties.keys()].filter(\n          (p) => this.hasOwnProperty(p) && p in getPrototypeOf(this)\n        );\n        if (shadowedProperties.length) {\n          throw new Error(\n            `The following properties on element ${this.localName} will not ` +\n              `trigger updates as expected because they are set using class ` +\n              `fields: ${shadowedProperties.join(', ')}. ` +\n              `Native class fields and some compiled output will overwrite ` +\n              `accessors used for detecting changes. See ` +\n              `https://lit.dev/msg/class-field-shadowing ` +\n              `for more information.`\n          );\n        }\n      }\n      // Mixin instance properties once, if they exist.\n      if (this.__instanceProperties) {\n        // TODO (justinfagnani): should we use the stored value? Could a new value\n        // have been set since we stored the own property value?\n        for (const [p, value] of this.__instanceProperties) {\n          this[p as keyof this] = value as this[keyof this];\n        }\n        this.__instanceProperties = undefined;\n      }\n      // Trigger initial value reflection and populate the initial\n      // changedProperties map, but only for the case of experimental\n      // decorators on accessors, which will not have already populated the\n      // changedProperties map. We can't know if these accessors had\n      // initializers, so we just set them anyway - a difference from\n      // experimental decorators on fields and standard decorators on\n      // auto-accessors.\n      // For context why experimentalDecorators with auto accessors are handled\n      // specifically also see:\n      // https://github.com/lit/lit/pull/4183#issuecomment-1711959635\n      const elementProperties = (this.constructor as typeof ReactiveElement)\n        .elementProperties;\n      if (elementProperties.size > 0) {\n        for (const [p, options] of elementProperties) {\n          if (\n            options.wrapped === true &&\n            !this._$changedProperties.has(p) &&\n            this[p as keyof this] !== undefined\n          ) {\n            this._$changeProperty(p, this[p as keyof this], options);\n          }\n        }\n      }\n    }\n    let shouldUpdate = false;\n    const changedProperties = this._$changedProperties;\n    try {\n      shouldUpdate = this.shouldUpdate(changedProperties);\n      if (shouldUpdate) {\n        this.willUpdate(changedProperties);\n        this.__controllers?.forEach((c) => c.hostUpdate?.());\n        this.update(changedProperties);\n      } else {\n        this.__markUpdated();\n      }\n    } catch (e) {\n      // Prevent `firstUpdated` and `updated` from running when there's an\n      // update exception.\n      shouldUpdate = false;\n      // Ensure element can accept additional updates after an exception.\n      this.__markUpdated();\n      throw e;\n    }\n    // The update is no longer considered pending and further updates are now allowed.\n    if (shouldUpdate) {\n      this._$didUpdate(changedProperties);\n    }\n  }\n\n  /**\n   * Invoked before `update()` to compute values needed during the update.\n   *\n   * Implement `willUpdate` to compute property values that depend on other\n   * properties and are used in the rest of the update process.\n   *\n   * ```ts\n   * willUpdate(changedProperties) {\n   *   // only need to check changed properties for an expensive computation.\n   *   if (changedProperties.has('firstName') || changedProperties.has('lastName')) {\n   *     this.sha = computeSHA(`${this.firstName} ${this.lastName}`);\n   *   }\n   * }\n   *\n   * render() {\n   *   return html`SHA: ${this.sha}`;\n   * }\n   * ```\n   *\n   * @category updates\n   */\n  protected willUpdate(_changedProperties: PropertyValues): void {}\n\n  // Note, this is an override point for polyfill-support.\n  // @internal\n  _$didUpdate(changedProperties: PropertyValues) {\n    this.__controllers?.forEach((c) => c.hostUpdated?.());\n    if (!this.hasUpdated) {\n      this.hasUpdated = true;\n      this.firstUpdated(changedProperties);\n    }\n    this.updated(changedProperties);\n    if (\n      DEV_MODE &&\n      this.isUpdatePending &&\n      (this.constructor as typeof ReactiveElement).enabledWarnings!.includes(\n        'change-in-update'\n      )\n    ) {\n      issueWarning(\n        'change-in-update',\n        `Element ${this.localName} scheduled an update ` +\n          `(generally because a property was set) ` +\n          `after an update completed, causing a new update to be scheduled. ` +\n          `This is inefficient and should be avoided unless the next update ` +\n          `can only be scheduled as a side effect of the previous update.`\n      );\n    }\n  }\n\n  private __markUpdated() {\n    this._$changedProperties = new Map();\n    this.isUpdatePending = false;\n  }\n\n  /**\n   * Returns a Promise that resolves when the element has completed updating.\n   * The Promise value is a boolean that is `true` if the element completed the\n   * update without triggering another update. The Promise result is `false` if\n   * a property was set inside `updated()`. If the Promise is rejected, an\n   * exception was thrown during the update.\n   *\n   * To await additional asynchronous work, override the `getUpdateComplete`\n   * method. For example, it is sometimes useful to await a rendered element\n   * before fulfilling this Promise. To do this, first await\n   * `super.getUpdateComplete()`, then any subsequent state.\n   *\n   * @return A promise of a boolean that resolves to true if the update completed\n   *     without triggering another update.\n   * @category updates\n   */\n  get updateComplete(): Promise<boolean> {\n    return this.getUpdateComplete();\n  }\n\n  /**\n   * Override point for the `updateComplete` promise.\n   *\n   * It is not safe to override the `updateComplete` getter directly due to a\n   * limitation in TypeScript which means it is not possible to call a\n   * superclass getter (e.g. `super.updateComplete.then(...)`) when the target\n   * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).\n   * This method should be overridden instead. For example:\n   *\n   * ```ts\n   * class MyElement extends LitElement {\n   *   override async getUpdateComplete() {\n   *     const result = await super.getUpdateComplete();\n   *     await this._myChild.updateComplete;\n   *     return result;\n   *   }\n   * }\n   * ```\n   *\n   * @return A promise of a boolean that resolves to true if the update completed\n   *     without triggering another update.\n   * @category updates\n   */\n  protected getUpdateComplete(): Promise<boolean> {\n    return this.__updatePromise;\n  }\n\n  /**\n   * Controls whether or not `update()` should be called when the element requests\n   * an update. By default, this method always returns `true`, but this can be\n   * customized to control when to update.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected shouldUpdate(_changedProperties: PropertyValues): boolean {\n    return true;\n  }\n\n  /**\n   * Updates the element. This method reflects property values to attributes.\n   * It can be overridden to render and keep updated element DOM.\n   * Setting properties inside this method will *not* trigger\n   * another update.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected update(_changedProperties: PropertyValues) {\n    // The forEach() expression will only run when when __reflectingProperties is\n    // defined, and it returns undefined, setting __reflectingProperties to\n    // undefined\n    this.__reflectingProperties &&= this.__reflectingProperties.forEach((p) =>\n      this.__propertyToAttribute(p, this[p as keyof this])\n    ) as undefined;\n    this.__markUpdated();\n  }\n\n  /**\n   * Invoked whenever the element is updated. Implement to perform\n   * post-updating tasks via DOM APIs, for example, focusing an element.\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected updated(_changedProperties: PropertyValues) {}\n\n  /**\n   * Invoked when the element is first updated. Implement to perform one time\n   * work on the element after update.\n   *\n   * ```ts\n   * firstUpdated() {\n   *   this.renderRoot.getElementById('my-text-area').focus();\n   * }\n   * ```\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected firstUpdated(_changedProperties: PropertyValues) {}\n}\n// Assigned here to work around a jscompiler bug with static fields\n// when compiling to ES5.\n// https://github.com/google/closure-compiler/issues/3177\n(ReactiveElement as unknown as Record<string, unknown>)[\n  JSCompiler_renameProperty('elementProperties', ReactiveElement)\n] = new Map();\n(ReactiveElement as unknown as Record<string, unknown>)[\n  JSCompiler_renameProperty('finalized', ReactiveElement)\n] = new Map();\n\n// Apply polyfills if available\npolyfillSupport?.({ReactiveElement});\n\n// Dev mode warnings...\nif (DEV_MODE) {\n  // Default warning set.\n  ReactiveElement.enabledWarnings = [\n    'change-in-update',\n    'async-perform-update',\n  ];\n  const ensureOwnWarnings = function (ctor: typeof ReactiveElement) {\n    if (\n      !ctor.hasOwnProperty(JSCompiler_renameProperty('enabledWarnings', ctor))\n    ) {\n      ctor.enabledWarnings = ctor.enabledWarnings!.slice();\n    }\n  };\n  ReactiveElement.enableWarning = function (\n    this: typeof ReactiveElement,\n    warning: WarningKind\n  ) {\n    ensureOwnWarnings(this);\n    if (!this.enabledWarnings!.includes(warning)) {\n      this.enabledWarnings!.push(warning);\n    }\n  };\n  ReactiveElement.disableWarning = function (\n    this: typeof ReactiveElement,\n    warning: WarningKind\n  ) {\n    ensureOwnWarnings(this);\n    const i = this.enabledWarnings!.indexOf(warning);\n    if (i >= 0) {\n      this.enabledWarnings!.splice(i, 1);\n    }\n  };\n}\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for ReactiveElement usage.\n(global.reactiveElementVersions ??= []).push('2.0.4');\nif (DEV_MODE && global.reactiveElementVersions.length > 1) {\n  issueWarning!(\n    'multiple-versions',\n    `Multiple versions of Lit loaded. Loading multiple versions ` +\n      `is not recommended.`\n  );\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 2581, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2595, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@web3modal/scaffold/node_modules/@lit/reactive-element/src/decorators/custom-element.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n\nimport type {Constructor} from './base.js';\n\n/**\n * Allow for custom element classes with private constructors\n */\ntype CustomElementClass = Omit<typeof HTMLElement, 'new'>;\n\nexport type CustomElementDecorator = {\n  // legacy\n  (cls: CustomElementClass): void;\n\n  // standard\n  (\n    target: CustomElementClass,\n    context: ClassDecoratorContext<Constructor<HTMLElement>>\n  ): void;\n};\n\n/**\n * Class decorator factory that defines the decorated class as a custom element.\n *\n * ```js\n * @customElement('my-element')\n * class MyElement extends LitElement {\n *   render() {\n *     return html``;\n *   }\n * }\n * ```\n * @category Decorator\n * @param tagName The tag name of the custom element to define.\n */\nexport const customElement =\n  (tagName: string): CustomElementDecorator =>\n  (\n    classOrTarget: CustomElementClass | Constructor<HTMLElement>,\n    context?: ClassDecoratorContext<Constructor<HTMLElement>>\n  ) => {\n    if (context !== undefined) {\n      context.addInitializer(() => {\n        customElements.define(\n          tagName,\n          classOrTarget as CustomElementConstructor\n        );\n      });\n    } else {\n      customElements.define(tagName, classOrTarget as CustomElementConstructor);\n    }\n  };\n"],"names":[],"mappings":"AAAA;;;;IA+BA;;;;;;;;;;;;;;;;AAcO,MAAM,gBACX,CAAC,UACD,CACE,eACA;QAEA,IAAI,YAAY,WAAW;YACzB,QAAQ,cAAc,CAAC;gBACrB,eAAe,MAAM,CACnB,SACA;YAEJ;QACF,OAAO;YACL,eAAe,MAAM,CAAC,SAAS;QACjC;IACF"}},
    {"offset": {"line": 2624, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2629, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@web3modal/scaffold/node_modules/@lit/reactive-element/src/decorators/property.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n\nimport {\n  type PropertyDeclaration,\n  type ReactiveElement,\n  defaultConverter,\n  notEqual,\n} from '../reactive-element.js';\nimport type {Interface} from './base.js';\n\nconst DEV_MODE = true;\n\nlet issueWarning: (code: string, warning: string) => void;\n\nif (DEV_MODE) {\n  // Ensure warnings are issued only 1x, even if multiple versions of Lit\n  // are loaded.\n  const issuedWarnings: Set<string | undefined> =\n    (globalThis.litIssuedWarnings ??= new Set());\n\n  // Issue a warning, if we haven't already.\n  issueWarning = (code: string, warning: string) => {\n    warning += ` See https://lit.dev/msg/${code} for more information.`;\n    if (!issuedWarnings.has(warning)) {\n      console.warn(warning);\n      issuedWarnings.add(warning);\n    }\n  };\n}\n\n// Overloads for property decorator so that TypeScript can infer the correct\n// return type when a decorator is used as an accessor decorator or a setter\n// decorator.\nexport type PropertyDecorator = {\n  // accessor decorator signature\n  <C extends Interface<ReactiveElement>, V>(\n    target: ClassAccessorDecoratorTarget<C, V>,\n    context: ClassAccessorDecoratorContext<C, V>\n  ): ClassAccessorDecoratorResult<C, V>;\n\n  // setter decorator signature\n  <C extends Interface<ReactiveElement>, V>(\n    target: (value: V) => void,\n    context: ClassSetterDecoratorContext<C, V>\n  ): (this: C, value: V) => void;\n\n  // legacy decorator signature\n  (\n    protoOrDescriptor: Object,\n    name: PropertyKey,\n    descriptor?: PropertyDescriptor\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): any;\n};\n\nconst legacyProperty = (\n  options: PropertyDeclaration | undefined,\n  proto: Object,\n  name: PropertyKey\n) => {\n  const hasOwnProperty = proto.hasOwnProperty(name);\n  (proto.constructor as typeof ReactiveElement).createProperty(\n    name,\n    hasOwnProperty ? {...options, wrapped: true} : options\n  );\n  // For accessors (which have a descriptor on the prototype) we need to\n  // return a descriptor, otherwise TypeScript overwrites the descriptor we\n  // define in createProperty() with the original descriptor. We don't do this\n  // for fields, which don't have a descriptor, because this could overwrite\n  // descriptor defined by other decorators.\n  return hasOwnProperty\n    ? Object.getOwnPropertyDescriptor(proto, name)\n    : undefined;\n};\n\n// This is duplicated from a similar variable in reactive-element.ts, but\n// actually makes sense to have this default defined with the decorator, so\n// that different decorators could have different defaults.\nconst defaultPropertyDeclaration: PropertyDeclaration = {\n  attribute: true,\n  type: String,\n  converter: defaultConverter,\n  reflect: false,\n  hasChanged: notEqual,\n};\n\n// Temporary type, until google3 is on TypeScript 5.2\ntype StandardPropertyContext<C, V> = (\n  | ClassAccessorDecoratorContext<C, V>\n  | ClassSetterDecoratorContext<C, V>\n) & {metadata: object};\n\n/**\n * Wraps a class accessor or setter so that `requestUpdate()` is called with the\n * property name and old value when the accessor is set.\n */\nexport const standardProperty = <C extends Interface<ReactiveElement>, V>(\n  options: PropertyDeclaration = defaultPropertyDeclaration,\n  target: ClassAccessorDecoratorTarget<C, V> | ((value: V) => void),\n  context: StandardPropertyContext<C, V>\n): ClassAccessorDecoratorResult<C, V> | ((this: C, value: V) => void) => {\n  const {kind, metadata} = context;\n\n  if (DEV_MODE && metadata == null) {\n    issueWarning(\n      'missing-class-metadata',\n      `The class ${target} is missing decorator metadata. This ` +\n        `could mean that you're using a compiler that supports decorators ` +\n        `but doesn't support decorator metadata, such as TypeScript 5.1. ` +\n        `Please update your compiler.`\n    );\n  }\n\n  // Store the property options\n  let properties = globalThis.litPropertyMetadata.get(metadata);\n  if (properties === undefined) {\n    globalThis.litPropertyMetadata.set(metadata, (properties = new Map()));\n  }\n  properties.set(context.name, options);\n\n  if (kind === 'accessor') {\n    // Standard decorators cannot dynamically modify the class, so we can't\n    // replace a field with accessors. The user must use the new `accessor`\n    // keyword instead.\n    const {name} = context;\n    return {\n      set(this: ReactiveElement, v: V) {\n        const oldValue = (\n          target as ClassAccessorDecoratorTarget<C, V>\n        ).get.call(this as unknown as C);\n        (target as ClassAccessorDecoratorTarget<C, V>).set.call(\n          this as unknown as C,\n          v\n        );\n        this.requestUpdate(name, oldValue, options);\n      },\n      init(this: ReactiveElement, v: V): V {\n        if (v !== undefined) {\n          this._$changeProperty(name, undefined, options);\n        }\n        return v;\n      },\n    } as unknown as ClassAccessorDecoratorResult<C, V>;\n  } else if (kind === 'setter') {\n    const {name} = context;\n    return function (this: ReactiveElement, value: V) {\n      const oldValue = this[name as keyof ReactiveElement];\n      (target as (value: V) => void).call(this, value);\n      this.requestUpdate(name, oldValue, options);\n    } as unknown as (this: C, value: V) => void;\n  }\n  throw new Error(`Unsupported decorator location: ${kind}`);\n};\n\n/**\n * A class field or accessor decorator which creates a reactive property that\n * reflects a corresponding attribute value. When a decorated property is set\n * the element will update and render. A {@linkcode PropertyDeclaration} may\n * optionally be supplied to configure property features.\n *\n * This decorator should only be used for public fields. As public fields,\n * properties should be considered as primarily settable by element users,\n * either via attribute or the property itself.\n *\n * Generally, properties that are changed by the element should be private or\n * protected fields and should use the {@linkcode state} decorator.\n *\n * However, sometimes element code does need to set a public property. This\n * should typically only be done in response to user interaction, and an event\n * should be fired informing the user; for example, a checkbox sets its\n * `checked` property when clicked and fires a `changed` event. Mutating public\n * properties should typically not be done for non-primitive (object or array)\n * properties. In other cases when an element needs to manage state, a private\n * property decorated via the {@linkcode state} decorator should be used. When\n * needed, state properties can be initialized via public properties to\n * facilitate complex interactions.\n *\n * ```ts\n * class MyElement {\n *   @property({ type: Boolean })\n *   clicked = false;\n * }\n * ```\n * @category Decorator\n * @ExportDecoratedItems\n */\nexport function property(options?: PropertyDeclaration): PropertyDecorator {\n  return <C extends Interface<ReactiveElement>, V>(\n    protoOrTarget:\n      | object\n      | ClassAccessorDecoratorTarget<C, V>\n      | ((value: V) => void),\n    nameOrContext:\n      | PropertyKey\n      | ClassAccessorDecoratorContext<C, V>\n      | ClassSetterDecoratorContext<C, V>\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): any => {\n    return (\n      typeof nameOrContext === 'object'\n        ? standardProperty<C, V>(\n            options,\n            protoOrTarget as\n              | ClassAccessorDecoratorTarget<C, V>\n              | ((value: V) => void),\n            nameOrContext as StandardPropertyContext<C, V>\n          )\n        : legacyProperty(\n            options,\n            protoOrTarget as Object,\n            nameOrContext as PropertyKey\n          )\n    ) as PropertyDecorator;\n  };\n}\n"],"names":[],"mappings":"AAAA;;;;IAMA;;;;;;;;;;;;;AAeA,MAAM,WAAW;AAEjB,IAAI;AAEJ,wCAAc;IACZ,uEAAuE;IACvE,cAAc;IACd,MAAM,iBACH,WAAW,iBAAiB,KAAK,IAAI;IAExC,0CAA0C;IAC1C,eAAe,CAAC,MAAc;QAC5B,WAAW,CAAA,yBAAA,EAA4B,KAAI,sBAAA,CAAwB;QACnE,IAAI,CAAC,eAAe,GAAG,CAAC,UAAU;YAChC,QAAQ,IAAI,CAAC;YACb,eAAe,GAAG,CAAC;QACrB;IACF;AACF;AA2BA,MAAM,iBAAiB,CACrB,SACA,OACA;IAEA,MAAM,iBAAiB,MAAM,cAAc,CAAC;IAC3C,MAAM,WAAsC,CAAC,cAAc,CAC1D,MACA,iBAAiB;QAAC,GAAG,OAAO;QAAE,SAAS;IAAI,IAAI;IAEjD,sEAAsE;IACtE,yEAAyE;IACzE,4EAA4E;IAC5E,0EAA0E;IAC1E,0CAA0C;IAC1C,OAAO,iBACH,OAAO,wBAAwB,CAAC,OAAO,QACvC;AACN;AAEA,yEAAyE;AACzE,2EAA2E;AAC3E,2DAA2D;AAC3D,MAAM,6BAAkD;IACtD,WAAW;IACX,MAAM;IACN,WAAW,gPAAA,CAAA,mBAAgB;IAC3B,SAAS;IACT,YAAY,gPAAA,CAAA,WAAQ;;AAaf,MAAM,mBAAmB,CAC9B,UAA+B,0BAA0B,EACzD,QACA;IAEA,MAAM,EAAC,IAAI,EAAE,QAAQ,EAAC,GAAG;IAEzB,IAAI,YAAY,YAAY,MAAM;QAChC,aACE,0BACA,CAAA,UAAA,EAAa,OAAM,qCAAA,CAAuC,GACxD,CAAA,iEAAA,CAAmE,GACnE,CAAA,gEAAA,CAAkE,GAClE,CAAA,4BAAA,CAA8B;IAEpC;IAEA,6BAA6B;IAC7B,IAAI,aAAa,WAAW,mBAAmB,CAAC,GAAG,CAAC;IACpD,IAAI,eAAe,WAAW;QAC5B,WAAW,mBAAmB,CAAC,GAAG,CAAC,UAAW,aAAa,IAAI;IACjE;IACA,WAAW,GAAG,CAAC,QAAQ,IAAI,EAAE;IAE7B,IAAI,SAAS,YAAY;QACvB,uEAAuE;QACvE,uEAAuE;QACvE,mBAAmB;QACnB,MAAM,EAAC,IAAI,EAAC,GAAG;QACf,OAAO;YACL,KAA2B,CAAI;gBAC7B,MAAM,WACJ,OACA,GAAG,CAAC,IAAI,CAAC,IAAoB;gBAC9B,OAA8C,GAAG,CAAC,IAAI,CACrD,IAAoB,EACpB;gBAEF,IAAI,CAAC,aAAa,CAAC,MAAM,UAAU;YACrC;YACA,MAA4B,CAAI;gBAC9B,IAAI,MAAM,WAAW;oBACnB,IAAI,CAAC,gBAAgB,CAAC,MAAM,WAAW;gBACzC;gBACA,OAAO;YACT;;IAEJ,OAAO,IAAI,SAAS,UAAU;QAC5B,MAAM,EAAC,IAAI,EAAC,GAAG;QACf,OAAO,SAAiC,KAAQ;YAC9C,MAAM,WAAW,IAAI,CAAC,KAA8B;YACnD,OAA8B,IAAI,CAAC,IAAI,EAAE;YAC1C,IAAI,CAAC,aAAa,CAAC,MAAM,UAAU;QACrC;IACF;IACA,MAAM,IAAI,MAAM,CAAA,gCAAA,EAAmC,KAAI,CAAE;AAC3D;AAkCM,SAAU,SAAS,OAA6B;IACpD,OAAO,CACL,eAIA;QAMA,OACE,OAAO,kBAAkB,WACrB,iBACE,SACA,eAGA,iBAEF,eACE,SACA,eACA;IAGV;AACF"}},
    {"offset": {"line": 2728, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2733, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@web3modal/scaffold/node_modules/@lit/reactive-element/src/decorators/state.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n\nimport {property} from './property.js';\n\nexport interface StateDeclaration<Type = unknown> {\n  /**\n   * A function that indicates if a property should be considered changed when\n   * it is set. The function should take the `newValue` and `oldValue` and\n   * return `true` if an update should be requested.\n   */\n  hasChanged?(value: Type, oldValue: Type): boolean;\n}\n\n/**\n * @deprecated use StateDeclaration\n */\nexport type InternalPropertyDeclaration<Type = unknown> =\n  StateDeclaration<Type>;\n\n/**\n * Declares a private or protected reactive property that still triggers\n * updates to the element when it changes. It does not reflect from the\n * corresponding attribute.\n *\n * Properties declared this way must not be used from HTML or HTML templating\n * systems, they're solely for properties internal to the element. These\n * properties may be renamed by optimization tools like closure compiler.\n * @category Decorator\n */\nexport function state(options?: StateDeclaration) {\n  return property({\n    ...options,\n    // Add both `state` and `attribute` because we found a third party\n    // controller that is keying off of PropertyOptions.state to determine\n    // whether a field is a private internal property or not.\n    state: true,\n    attribute: false,\n  });\n}\n"],"names":[],"mappings":"AAAA;;;;IAMA;;;;;;;;;;;AAkCM,SAAU,MAAM,OAA0B;IAC9C,OAAO,CAAA,GAAA,mOAAA,CAAA,WAAQ,AAAR,EAAS;QACd,GAAG,OAAO;QACV,kEAAkE;QAClE,sEAAsE;QACtE,yDAAyD;QACzD,OAAO;QACP,WAAW;;AAEf"}},
    {"offset": {"line": 2758, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2763, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@web3modal/scaffold/node_modules/@lit/reactive-element/src/decorators/event-options.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n\nimport type {ReactiveElement} from '../reactive-element.js';\nimport type {Interface} from './base.js';\n\nexport type EventOptionsDecorator = {\n  // legacy\n  (\n    proto: Interface<ReactiveElement>,\n    name: PropertyKey\n    // Note TypeScript requires the return type to be `void|any`\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): void | any;\n\n  // standard\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  <C, V extends (this: C, ...args: any) => any>(\n    value: V,\n    _context: ClassMethodDecoratorContext<C, V>\n  ): void;\n};\n\n/**\n * Adds event listener options to a method used as an event listener in a\n * lit-html template.\n *\n * @param options An object that specifies event listener options as accepted by\n * `EventTarget#addEventListener` and `EventTarget#removeEventListener`.\n *\n * Current browsers support the `capture`, `passive`, and `once` options. See:\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters\n *\n * ```ts\n * class MyElement {\n *   clicked = false;\n *\n *   render() {\n *     return html`\n *       <div @click=${this._onClick}>\n *         <button></button>\n *       </div>\n *     `;\n *   }\n *\n *   @eventOptions({capture: true})\n *   _onClick(e) {\n *     this.clicked = true;\n *   }\n * }\n * ```\n * @category Decorator\n */\nexport function eventOptions(\n  options: AddEventListenerOptions\n): EventOptionsDecorator {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return (<C, V extends (this: C, ...args: any) => any>(\n    protoOrValue: V,\n    nameOrContext: PropertyKey | ClassMethodDecoratorContext<C, V>\n  ) => {\n    const method =\n      typeof protoOrValue === 'function'\n        ? protoOrValue\n        : protoOrValue[nameOrContext as keyof ReactiveElement];\n    Object.assign(method, options);\n  }) as EventOptionsDecorator;\n}\n"],"names":[],"mappings":"AAAA;;;;IAiCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BM,SAAU,aACd,OAAgC;IAEhC,8DAA8D;IAC9D,OAAQ,CACN,cACA;QAEA,MAAM,SACJ,OAAO,iBAAiB,aACpB,eACA,YAAY,CAAC,cAAuC;QAC1D,OAAO,MAAM,CAAC,QAAQ;IACxB;AACF"}},
    {"offset": {"line": 2806, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2811, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@web3modal/scaffold/node_modules/@lit/reactive-element/src/decorators/base.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * Generates a public interface type that removes private and protected fields.\n * This allows accepting otherwise incompatible versions of the type (e.g. from\n * multiple copies of the same package in `node_modules`).\n */\nexport type Interface<T> = {\n  [K in keyof T]: T[K];\n};\n\nexport type Constructor<T> = {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  new (...args: any[]): T;\n};\n\n/**\n * Wraps up a few best practices when returning a property descriptor from a\n * decorator.\n *\n * Marks the defined property as configurable, and enumerable, and handles\n * the case where we have a busted Reflect.decorate zombiefill (e.g. in Angular\n * apps).\n *\n * @internal\n */\nexport const desc = (\n  obj: object,\n  name: PropertyKey | ClassAccessorDecoratorContext<unknown, unknown>,\n  descriptor: PropertyDescriptor\n) => {\n  // For backwards compatibility, we keep them configurable and enumerable.\n  descriptor.configurable = true;\n  descriptor.enumerable = true;\n  if (\n    // We check for Reflect.decorate each time, in case the zombiefill\n    // is applied via lazy loading some Angular code.\n    (Reflect as typeof Reflect & {decorate?: unknown}).decorate &&\n    typeof name !== 'object'\n  ) {\n    // If we're called as a legacy decorator, and Reflect.decorate is present\n    // then we have no guarantees that the returned descriptor will be\n    // defined on the class, so we must apply it directly ourselves.\n\n    Object.defineProperty(obj, name, descriptor);\n  }\n  return descriptor;\n};\n"],"names":[],"mappings":"AAAA;;;;IAoBA;;;;;;;;;;;;AAUO,MAAM,OAAO,CAClB,KACA,MACA;IAEA,yEAAyE;IACzE,WAAW,YAAY,GAAG;IAC1B,WAAW,UAAU,GAAG;IACxB,IACE,kEAAkE;IAClE,iDAAiD;IAChD,QAAkD,QAAQ,IAC3D,OAAO,SAAS,UAChB;QACA,yEAAyE;QACzE,kEAAkE;QAClE,gEAAgE;QAEhE,OAAO,cAAc,CAAC,KAAK,MAAM;IACnC;IACA,OAAO;AACT"}},
    {"offset": {"line": 2841, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2846, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@web3modal/scaffold/node_modules/@lit/reactive-element/src/decorators/query.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\nimport type {ReactiveElement} from '../reactive-element.js';\nimport {desc, type Interface} from './base.js';\n\nconst DEV_MODE = true;\n\nlet issueWarning: (code: string, warning: string) => void;\n\nif (DEV_MODE) {\n  // Ensure warnings are issued only 1x, even if multiple versions of Lit\n  // are loaded.\n  const issuedWarnings: Set<string | undefined> =\n    (globalThis.litIssuedWarnings ??= new Set());\n\n  // Issue a warning, if we haven't already.\n  issueWarning = (code: string, warning: string) => {\n    warning += code\n      ? ` See https://lit.dev/msg/${code} for more information.`\n      : '';\n    if (!issuedWarnings.has(warning)) {\n      console.warn(warning);\n      issuedWarnings.add(warning);\n    }\n  };\n}\n\nexport type QueryDecorator = {\n  // legacy\n  (\n    proto: Interface<ReactiveElement>,\n    name: PropertyKey,\n    descriptor?: PropertyDescriptor\n    // Note TypeScript requires the return type to be `void|any`\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): void | any;\n\n  // standard\n  <C extends Interface<ReactiveElement>, V extends Element | null>(\n    value: ClassAccessorDecoratorTarget<C, V>,\n    context: ClassAccessorDecoratorContext<C, V>\n  ): ClassAccessorDecoratorResult<C, V>;\n};\n\n/**\n * A property decorator that converts a class property into a getter that\n * executes a querySelector on the element's renderRoot.\n *\n * @param selector A DOMString containing one or more selectors to match.\n * @param cache An optional boolean which when true performs the DOM query only\n *     once and caches the result.\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\n *\n * ```ts\n * class MyElement {\n *   @query('#first')\n *   first: HTMLDivElement;\n *\n *   render() {\n *     return html`\n *       <div id=\"first\"></div>\n *       <div id=\"second\"></div>\n *     `;\n *   }\n * }\n * ```\n * @category Decorator\n */\nexport function query(selector: string, cache?: boolean): QueryDecorator {\n  return (<C extends Interface<ReactiveElement>, V extends Element | null>(\n    protoOrTarget: ClassAccessorDecoratorTarget<C, V>,\n    nameOrContext: PropertyKey | ClassAccessorDecoratorContext<C, V>,\n    descriptor?: PropertyDescriptor\n  ) => {\n    const doQuery = (el: Interface<ReactiveElement>): V => {\n      const result = (el.renderRoot?.querySelector(selector) ?? null) as V;\n      if (DEV_MODE && result === null && cache && !el.hasUpdated) {\n        const name =\n          typeof nameOrContext === 'object'\n            ? nameOrContext.name\n            : nameOrContext;\n        issueWarning(\n          '',\n          `@query'd field ${JSON.stringify(String(name))} with the 'cache' ` +\n            `flag set for selector '${selector}' has been accessed before ` +\n            `the first update and returned null. This is expected if the ` +\n            `renderRoot tree has not been provided beforehand (e.g. via ` +\n            `Declarative Shadow DOM). Therefore the value hasn't been cached.`\n        );\n      }\n      // TODO: if we want to allow users to assert that the query will never\n      // return null, we need a new option and to throw here if the result\n      // is null.\n      return result;\n    };\n    if (cache) {\n      // Accessors to wrap from either:\n      //   1. The decorator target, in the case of standard decorators\n      //   2. The property descriptor, in the case of experimental decorators\n      //      on auto-accessors.\n      //   3. Functions that access our own cache-key property on the instance,\n      //      in the case of experimental decorators on fields.\n      const {get, set} =\n        typeof nameOrContext === 'object'\n          ? protoOrTarget\n          : descriptor ??\n            (() => {\n              const key = DEV_MODE\n                ? Symbol(`${String(nameOrContext)} (@query() cache)`)\n                : Symbol();\n              type WithCache = ReactiveElement & {\n                [key: symbol]: Element | null;\n              };\n              return {\n                get() {\n                  return (this as WithCache)[key];\n                },\n                set(v) {\n                  (this as WithCache)[key] = v;\n                },\n              };\n            })();\n      return desc(protoOrTarget, nameOrContext, {\n        get(this: ReactiveElement): V {\n          let result: V = get!.call(this);\n          if (result === undefined) {\n            result = doQuery(this);\n            if (result !== null || this.hasUpdated) {\n              set!.call(this, result);\n            }\n          }\n          return result;\n        },\n      });\n    } else {\n      // This object works as the return type for both standard and\n      // experimental decorators.\n      return desc(protoOrTarget, nameOrContext, {\n        get(this: ReactiveElement) {\n          return doQuery(this);\n        },\n      });\n    }\n  }) as QueryDecorator;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;AAeA,MAAM,WAAW;AAEjB,IAAI;AAEJ,wCAAc;IACZ,uEAAuE;IACvE,cAAc;IACd,MAAM,iBACH,WAAW,iBAAiB,KAAK,IAAI;IAExC,0CAA0C;IAC1C,eAAe,CAAC,MAAc;QAC5B,WAAW,OACP,CAAA,yBAAA,EAA4B,KAAI,sBAAA,CAAwB,GACxD;QACJ,IAAI,CAAC,eAAe,GAAG,CAAC,UAAU;YAChC,QAAQ,IAAI,CAAC;YACb,eAAe,GAAG,CAAC;QACrB;IACF;AACF;AA4CM,SAAU,MAAM,QAAgB,EAAE,KAAe;IACrD,OAAQ,CACN,eACA,eACA;QAEA,MAAM,UAAU,CAAC;YACf,MAAM,SAAU,GAAG,UAAU,EAAE,cAAc,aAAa;YAC1D,IAAI,YAAY,WAAW,QAAQ,SAAS,CAAC,GAAG,UAAU,EAAE;gBAC1D,MAAM,OACJ,OAAO,kBAAkB,WACrB,cAAc,IAAI,GAClB;gBACN,aACE,IACA,CAAA,eAAA,EAAkB,KAAK,SAAS,CAAC,OAAO,OAAM,kBAAA,CAAoB,GAChE,CAAA,uBAAA,EAA0B,SAAQ,2BAAA,CAA6B,GAC/D,CAAA,4DAAA,CAA8D,GAC9D,CAAA,2DAAA,CAA6D,GAC7D,CAAA,gEAAA,CAAkE;YAExE;YACA,sEAAsE;YACtE,oEAAoE;YACpE,WAAW;YACX,OAAO;QACT;QACA,IAAI,OAAO;YACT,iCAAiC;YACjC,gEAAgE;YAChE,uEAAuE;YACvE,0BAA0B;YAC1B,yEAAyE;YACzE,yDAAyD;YACzD,MAAM,EAAC,GAAG,EAAE,GAAG,EAAC,GACd,OAAO,kBAAkB,WACrB,gBACA,cACA,CAAC;gBACC,MAAM,MAAM,uCACR,OAAO,CAAA,EAAG,OAAO,eAAc,iBAAA,CAAmB;gBAKtD,OAAO;oBACL;wBACE,OAAQ,IAAkB,CAAC,IAAI;oBACjC;oBACA,KAAI,CAAC;wBACF,IAAkB,CAAC,IAAI,GAAG;oBAC7B;;YAEJ,CAAC;YACP,OAAO,CAAA,GAAA,+NAAA,CAAA,OAAI,AAAJ,EAAK,eAAe,eAAe;gBACxC;oBACE,IAAI,SAAY,IAAK,IAAI,CAAC,IAAI;oBAC9B,IAAI,WAAW,WAAW;wBACxB,SAAS,QAAQ,IAAI;wBACrB,IAAI,WAAW,QAAQ,IAAI,CAAC,UAAU,EAAE;4BACtC,IAAK,IAAI,CAAC,IAAI,EAAE;wBAClB;oBACF;oBACA,OAAO;gBACT;;QAEJ,OAAO;YACL,6DAA6D;YAC7D,2BAA2B;YAC3B,OAAO,CAAA,GAAA,+NAAA,CAAA,OAAI,AAAJ,EAAK,eAAe,eAAe;gBACxC;oBACE,OAAO,QAAQ,IAAI;gBACrB;;QAEJ;IACF;AACF"}},
    {"offset": {"line": 2925, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2930, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@web3modal/scaffold/node_modules/@lit/reactive-element/src/decorators/query-all.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\nimport type {ReactiveElement} from '../reactive-element.js';\nimport {desc, type Interface} from './base.js';\n\nexport type QueryAllDecorator = {\n  // legacy\n  (\n    proto: Interface<ReactiveElement>,\n    name: PropertyKey,\n    descriptor?: PropertyDescriptor\n    // Note TypeScript requires the return type to be `void|any`\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): void | any;\n\n  // standard\n  <C extends Interface<ReactiveElement>, V extends NodeList>(\n    value: ClassAccessorDecoratorTarget<C, V>,\n    context: ClassAccessorDecoratorContext<C, V>\n  ): ClassAccessorDecoratorResult<C, V>;\n};\n\n// Shared fragment used to generate empty NodeLists when a render root is\n// undefined\nlet fragment: DocumentFragment;\n\n/**\n * A property decorator that converts a class property into a getter\n * that executes a querySelectorAll on the element's renderRoot.\n *\n * @param selector A DOMString containing one or more selectors to match.\n *\n * See:\n * https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll\n *\n * ```ts\n * class MyElement {\n *   @queryAll('div')\n *   divs: NodeListOf<HTMLDivElement>;\n *\n *   render() {\n *     return html`\n *       <div id=\"first\"></div>\n *       <div id=\"second\"></div>\n *     `;\n *   }\n * }\n * ```\n * @category Decorator\n */\nexport function queryAll(selector: string): QueryAllDecorator {\n  return ((\n    obj: object,\n    name: PropertyKey | ClassAccessorDecoratorContext<unknown, unknown>\n  ) => {\n    return desc(obj, name, {\n      get(this: ReactiveElement) {\n        const container =\n          this.renderRoot ?? (fragment ??= document.createDocumentFragment());\n        return container.querySelectorAll(selector);\n      },\n    });\n  }) as QueryAllDecorator;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;AAgCA,yEAAyE;AACzE,YAAY;AACZ,IAAI;AA0BE,SAAU,SAAS,QAAgB;IACvC,OAAQ,CACN,KACA;QAEA,OAAO,CAAA,GAAA,+NAAA,CAAA,OAAI,AAAJ,EAAK,KAAK,MAAM;YACrB;gBACE,MAAM,YACJ,IAAI,CAAC,UAAU,IAAI,CAAC,aAAa,SAAS,sBAAsB,EAAE;gBACpE,OAAO,UAAU,gBAAgB,CAAC;YACpC;;IAEJ;AACF"}},
    {"offset": {"line": 2953, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2958, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@web3modal/scaffold/node_modules/@lit/reactive-element/src/decorators/query-async.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n\nimport type {ReactiveElement} from '../reactive-element.js';\nimport {desc, type Interface} from './base.js';\n\nexport type QueryAsyncDecorator = {\n  // legacy\n  (\n    proto: Interface<ReactiveElement>,\n    name: PropertyKey,\n    descriptor?: PropertyDescriptor\n    // Note TypeScript requires the return type to be `void|any`\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): void | any;\n\n  // standard\n  <C extends Interface<ReactiveElement>, V extends Promise<Element | null>>(\n    value: ClassAccessorDecoratorTarget<C, V>,\n    context: ClassAccessorDecoratorContext<C, V>\n  ): ClassAccessorDecoratorResult<C, V>;\n};\n\n// Note, in the future, we may extend this decorator to support the use case\n// where the queried element may need to do work to become ready to interact\n// with (e.g. load some implementation code). If so, we might elect to\n// add a second argument defining a function that can be run to make the\n// queried element loaded/updated/ready.\n/**\n * A property decorator that converts a class property into a getter that\n * returns a promise that resolves to the result of a querySelector on the\n * element's renderRoot done after the element's `updateComplete` promise\n * resolves. When the queried property may change with element state, this\n * decorator can be used instead of requiring users to await the\n * `updateComplete` before accessing the property.\n *\n * @param selector A DOMString containing one or more selectors to match.\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\n *\n * ```ts\n * class MyElement {\n *   @queryAsync('#first')\n *   first: Promise<HTMLDivElement>;\n *\n *   render() {\n *     return html`\n *       <div id=\"first\"></div>\n *       <div id=\"second\"></div>\n *     `;\n *   }\n * }\n *\n * // external usage\n * async doSomethingWithFirst() {\n *  (await aMyElement.first).doSomething();\n * }\n * ```\n * @category Decorator\n */\nexport function queryAsync(selector: string) {\n  return ((\n    obj: object,\n    name: PropertyKey | ClassAccessorDecoratorContext<unknown, unknown>\n  ) => {\n    return desc(obj, name, {\n      async get(this: ReactiveElement) {\n        await this.updateComplete;\n        return this.renderRoot?.querySelector(selector) ?? null;\n      },\n    });\n  }) as QueryAsyncDecorator;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;AAsEM,SAAU,WAAW,QAAgB;IACzC,OAAQ,CACN,KACA;QAEA,OAAO,CAAA,GAAA,+NAAA,CAAA,OAAI,AAAJ,EAAK,KAAK,MAAM;YACrB,MAAM;gBACJ,MAAM,IAAI,CAAC,cAAc;gBACzB,OAAO,IAAI,CAAC,UAAU,EAAE,cAAc,aAAa;YACrD;;IAEJ;AACF"}},
    {"offset": {"line": 2978, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2983, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@web3modal/scaffold/node_modules/@lit/reactive-element/src/decorators/query-assigned-elements.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n\nimport type {ReactiveElement} from '../reactive-element.js';\nimport type {QueryAssignedNodesOptions} from './query-assigned-nodes.js';\nimport {desc, type Interface} from './base.js';\n\nexport type QueryAssignedElementsDecorator = {\n  // legacy\n  (\n    proto: Interface<ReactiveElement>,\n    name: PropertyKey,\n    descriptor?: PropertyDescriptor\n    // Note TypeScript requires the return type to be `void|any`\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): void | any;\n\n  // standard\n  <C extends Interface<ReactiveElement>, V extends Array<Element>>(\n    value: ClassAccessorDecoratorTarget<C, V>,\n    context: ClassAccessorDecoratorContext<C, V>\n  ): ClassAccessorDecoratorResult<C, V>;\n};\n\n/**\n * Options for the {@linkcode queryAssignedElements} decorator. Extends the\n * options that can be passed into\n * [HTMLSlotElement.assignedElements](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement/assignedElements).\n */\nexport interface QueryAssignedElementsOptions\n  extends QueryAssignedNodesOptions {\n  /**\n   * CSS selector used to filter the elements returned. For example, a selector\n   * of `\".item\"` will only include elements with the `item` class.\n   */\n  selector?: string;\n}\n\n/**\n * A property decorator that converts a class property into a getter that\n * returns the `assignedElements` of the given `slot`. Provides a declarative\n * way to use\n * [`HTMLSlotElement.assignedElements`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement/assignedElements).\n *\n * Can be passed an optional {@linkcode QueryAssignedElementsOptions} object.\n *\n * Example usage:\n * ```ts\n * class MyElement {\n *   @queryAssignedElements({ slot: 'list' })\n *   listItems!: Array<HTMLElement>;\n *   @queryAssignedElements()\n *   unnamedSlotEls!: Array<HTMLElement>;\n *\n *   render() {\n *     return html`\n *       <slot name=\"list\"></slot>\n *       <slot></slot>\n *     `;\n *   }\n * }\n * ```\n *\n * Note, the type of this property should be annotated as `Array<HTMLElement>`.\n *\n * @category Decorator\n */\nexport function queryAssignedElements(\n  options?: QueryAssignedElementsOptions\n): QueryAssignedElementsDecorator {\n  return (<V extends Array<Element>>(\n    obj: object,\n    name: PropertyKey | ClassAccessorDecoratorContext<unknown, unknown>\n  ) => {\n    const {slot, selector} = options ?? {};\n    const slotSelector = `slot${slot ? `[name=${slot}]` : ':not([name])'}`;\n    return desc(obj, name, {\n      get(this: ReactiveElement): V {\n        const slotEl =\n          this.renderRoot?.querySelector<HTMLSlotElement>(slotSelector);\n        const elements = slotEl?.assignedElements(options) ?? [];\n        return (\n          selector === undefined\n            ? elements\n            : elements.filter((node) => node.matches(selector))\n        ) as V;\n      },\n    });\n  }) as QueryAssignedElementsDecorator;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;AA6EM,SAAU,sBACd,OAAsC;IAEtC,OAAQ,CACN,KACA;QAEA,MAAM,EAAC,IAAI,EAAE,QAAQ,EAAC,GAAG,WAAW,CAAA;QACpC,MAAM,eAAe,CAAA,IAAA,EAAO,OAAO,CAAA,MAAA,EAAS,KAAI,CAAA,CAAG,GAAG,eAAc,CAAE;QACtE,OAAO,CAAA,GAAA,+NAAA,CAAA,OAAI,AAAJ,EAAK,KAAK,MAAM;YACrB;gBACE,MAAM,SACJ,IAAI,CAAC,UAAU,EAAE,cAA+B;gBAClD,MAAM,WAAW,QAAQ,iBAAiB,YAAY,EAAE;gBACxD,OACE,aAAa,YACT,WACA,SAAS,MAAM,CAAC,CAAC,OAAS,KAAK,OAAO,CAAC;YAE/C;;IAEJ;AACF"}},
    {"offset": {"line": 3006, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3011, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@web3modal/scaffold/node_modules/@lit/reactive-element/src/decorators/query-assigned-nodes.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\nimport type {ReactiveElement} from '../reactive-element.js';\nimport {desc, type Interface} from './base.js';\n\n/**\n * Options for the {@linkcode queryAssignedNodes} decorator. Extends the options\n * that can be passed into [HTMLSlotElement.assignedNodes](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement/assignedNodes).\n */\nexport interface QueryAssignedNodesOptions extends AssignedNodesOptions {\n  /**\n   * Name of the slot to query. Leave empty for the default slot.\n   */\n  slot?: string;\n}\n\nexport type QueryAssignedNodesDecorator = {\n  // legacy\n  (\n    proto: Interface<ReactiveElement>,\n    name: PropertyKey,\n    descriptor?: PropertyDescriptor\n    // Note TypeScript requires the return type to be `void|any`\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): void | any;\n\n  // standard\n  <C extends Interface<ReactiveElement>, V extends Array<Node>>(\n    value: ClassAccessorDecoratorTarget<C, V>,\n    context: ClassAccessorDecoratorContext<C, V>\n  ): ClassAccessorDecoratorResult<C, V>;\n};\n\n/**\n * A property decorator that converts a class property into a getter that\n * returns the `assignedNodes` of the given `slot`.\n *\n * Can be passed an optional {@linkcode QueryAssignedNodesOptions} object.\n *\n * Example usage:\n * ```ts\n * class MyElement {\n *   @queryAssignedNodes({slot: 'list', flatten: true})\n *   listItems!: Array<Node>;\n *\n *   render() {\n *     return html`\n *       <slot name=\"list\"></slot>\n *     `;\n *   }\n * }\n * ```\n *\n * Note the type of this property should be annotated as `Array<Node>`. Use the\n * queryAssignedElements decorator to list only elements, and optionally filter\n * the element list using a CSS selector.\n *\n * @category Decorator\n */\nexport function queryAssignedNodes(\n  options?: QueryAssignedNodesOptions\n): QueryAssignedNodesDecorator {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return (<V extends Array<Node>>(\n    obj: object,\n    name: PropertyKey | ClassAccessorDecoratorContext<unknown, unknown>\n  ) => {\n    const {slot} = options ?? {};\n    const slotSelector = `slot${slot ? `[name=${slot}]` : ':not([name])'}`;\n    return desc(obj, name, {\n      get(this: ReactiveElement): V {\n        const slotEl =\n          this.renderRoot?.querySelector<HTMLSlotElement>(slotSelector);\n        return (slotEl?.assignedNodes(options) ?? []) as unknown as V;\n      },\n    });\n  }) as QueryAssignedNodesDecorator;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;AAqEM,SAAU,mBACd,OAAmC;IAEnC,8DAA8D;IAC9D,OAAQ,CACN,KACA;QAEA,MAAM,EAAC,IAAI,EAAC,GAAG,WAAW,CAAA;QAC1B,MAAM,eAAe,CAAA,IAAA,EAAO,OAAO,CAAA,MAAA,EAAS,KAAI,CAAA,CAAG,GAAG,eAAc,CAAE;QACtE,OAAO,CAAA,GAAA,+NAAA,CAAA,OAAI,AAAJ,EAAK,KAAK,MAAM;YACrB;gBACE,MAAM,SACJ,IAAI,CAAC,UAAU,EAAE,cAA+B;gBAClD,OAAQ,QAAQ,cAAc,YAAY,EAAE;YAC9C;;IAEJ;AACF"}},
    {"offset": {"line": 3034, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}
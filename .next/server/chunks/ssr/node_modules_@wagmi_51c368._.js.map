{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/utils/deserialize.ts"],"sourcesContent":["type Reviver = (key: string, value: any) => any\n\nexport function deserialize<type>(value: string, reviver?: Reviver): type {\n  return JSON.parse(value, (key, value_) => {\n    let value = value_\n    if (value?.__type === 'bigint') value = BigInt(value.value)\n    if (value?.__type === 'Map') value = new Map(value.value)\n    return reviver?.(key, value) ?? value\n  })\n}\n"],"names":[],"mappings":";;;AAEM,SAAU,YAAkB,KAAa,EAAE,OAAiB;IAChE,OAAO,KAAK,KAAK,CAAC,OAAO,CAAC,KAAK;QAC7B,IAAI,QAAQ;QACZ,IAAI,OAAO,WAAW,UAAU,QAAQ,OAAO,MAAM,KAAK;QAC1D,IAAI,OAAO,WAAW,OAAO,QAAQ,IAAI,IAAI,MAAM,KAAK;QACxD,OAAO,UAAU,KAAK,UAAU;IAClC;AACF"}},
    {"offset": {"line": 16, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 21, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/utils/cookie.ts"],"sourcesContent":["import type { Config, State } from '../createConfig.js'\nimport type { BaseStorage } from '../createStorage.js'\nimport { deserialize } from './deserialize.js'\n\nexport const cookieStorage = {\n  getItem(key) {\n    if (typeof window === 'undefined') return null\n    const value = parseCookie(document.cookie, key)\n    return value ?? null\n  },\n  setItem(key, value) {\n    if (typeof window === 'undefined') return\n    document.cookie = `${key}=${value};path=/;samesite=Lax`\n  },\n  removeItem(key) {\n    if (typeof window === 'undefined') return\n    document.cookie = `${key}=;max-age=-1;path=/`\n  },\n} satisfies BaseStorage\n\nexport function cookieToInitialState(config: Config, cookie?: string | null) {\n  if (!cookie) return undefined\n  const key = `${config.storage?.key}.store`\n  const parsed = parseCookie(cookie, key)\n  if (!parsed) return undefined\n  return deserialize<{ state: State }>(parsed).state\n}\n\nexport function parseCookie(cookie: string, key: string) {\n  const keyValue = cookie.split('; ').find((x) => x.startsWith(`${key}=`))\n  if (!keyValue) return undefined\n  return keyValue.substring(key.length + 1)\n}\n"],"names":[],"mappings":";;;;;;;;AAIO,MAAM,gBAAgB;IAC3B,SAAQ,GAAG;QACT,IAAI,OAAO,WAAW,aAAa,OAAO;QAC1C,MAAM,QAAQ,YAAY,SAAS,MAAM,EAAE;QAC3C,OAAO,SAAS;IAClB;IACA,SAAQ,GAAG,EAAE,KAAK;QAChB,IAAI,OAAO,WAAW,aAAa;QACnC,SAAS,MAAM,GAAG,CAAA,EAAG,IAAG,CAAA,EAAI,MAAK,oBAAA,CAAsB;IACzD;IACA,YAAW,GAAG;QACZ,IAAI,OAAO,WAAW,aAAa;QACnC,SAAS,MAAM,GAAG,CAAA,EAAG,IAAG,mBAAA,CAAqB;IAC/C;;AAGI,SAAU,qBAAqB,MAAc,EAAE,MAAsB;IACzE,IAAI,CAAC,QAAQ,OAAO;IACpB,MAAM,MAAM,CAAA,EAAG,OAAO,OAAO,EAAE,IAAG,MAAA,CAAQ;IAC1C,MAAM,SAAS,YAAY,QAAQ;IACnC,IAAI,CAAC,QAAQ,OAAO;IACpB,OAAO,CAAA,GAAA,sKAAA,CAAA,cAAW,AAAX,EAA8B,QAAQ,KAAK;AACpD;AAEM,SAAU,YAAY,MAAc,EAAE,GAAW;IACrD,MAAM,WAAW,OAAO,KAAK,CAAC,MAAM,IAAI,CAAC,CAAC,IAAM,EAAE,UAAU,CAAC,CAAA,EAAG,IAAG,CAAA,CAAG;IACtE,IAAI,CAAC,UAAU,OAAO;IACtB,OAAO,SAAS,SAAS,CAAC,IAAI,MAAM,GAAG;AACzC"}},
    {"offset": {"line": 56, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 61, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/version.ts"],"sourcesContent":["export const version = '2.14.1'\n"],"names":[],"mappings":";;;AAAO,MAAM,UAAU"}},
    {"offset": {"line": 65, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 70, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/utils/getVersion.ts"],"sourcesContent":["import { version } from '../version.js'\n\nexport const getVersion = () => `@wagmi/core@${version}`\n"],"names":[],"mappings":";;;;;;AAEO,MAAM,aAAa,IAAM,CAAA,YAAA,EAAe,yJAAA,CAAA,UAAO,CAAA,CAAE"}},
    {"offset": {"line": 77, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 82, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/errors/base.ts"],"sourcesContent":["import type { Compute, OneOf } from '../types/utils.js'\nimport { getVersion } from '../utils/getVersion.js'\n\nexport type ErrorType<name extends string = 'Error'> = Error & { name: name }\n\ntype BaseErrorOptions = Compute<\n  OneOf<{ details?: string | undefined } | { cause: BaseError | Error }> & {\n    docsPath?: string | undefined\n    docsSlug?: string | undefined\n    metaMessages?: string[] | undefined\n  }\n>\n\nexport type BaseErrorType = BaseError & { name: 'WagmiCoreError' }\nexport class BaseError extends Error {\n  details: string\n  docsPath?: string | undefined\n  metaMessages?: string[] | undefined\n  shortMessage: string\n\n  override name = 'WagmiCoreError'\n  get docsBaseUrl() {\n    return 'https://wagmi.sh/core'\n  }\n  get version() {\n    return getVersion()\n  }\n\n  constructor(shortMessage: string, options: BaseErrorOptions = {}) {\n    super()\n\n    const details =\n      options.cause instanceof BaseError\n        ? options.cause.details\n        : options.cause?.message\n          ? options.cause.message\n          : options.details!\n    const docsPath =\n      options.cause instanceof BaseError\n        ? options.cause.docsPath || options.docsPath\n        : options.docsPath\n\n    this.message = [\n      shortMessage || 'An error occurred.',\n      '',\n      ...(options.metaMessages ? [...options.metaMessages, ''] : []),\n      ...(docsPath\n        ? [\n            `Docs: ${this.docsBaseUrl}${docsPath}.html${\n              options.docsSlug ? `#${options.docsSlug}` : ''\n            }`,\n          ]\n        : []),\n      ...(details ? [`Details: ${details}`] : []),\n      `Version: ${this.version}`,\n    ].join('\\n')\n\n    if (options.cause) this.cause = options.cause\n    this.details = details\n    this.docsPath = docsPath\n    this.metaMessages = options.metaMessages\n    this.shortMessage = shortMessage\n  }\n\n  walk(fn?: (err: unknown) => boolean) {\n    return this.#walk(this, fn)\n  }\n\n  #walk(err: unknown, fn?: (err: unknown) => boolean): unknown {\n    if (fn?.(err)) return err\n    if ((err as Error).cause) return this.#walk((err as Error).cause, fn)\n    return err\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;AAcM,MAAO,kBAAkB;IAO7B,IAAI,cAAW;QACb,OAAO;IACT;IACA,IAAI,UAAO;QACT,OAAO,CAAA,GAAA,qKAAA,CAAA,aAAU,AAAV;IACT;IAEA,YAAY,YAAoB,EAAE,UAA4B,CAAA,CAAE,CAAA;QAC9D,KAAK;;QAdP,OAAA,cAAA,CAAA,IAAA,EAAA,WAAA;;;;;;QACA,OAAA,cAAA,CAAA,IAAA,EAAA,YAAA;;;;;;QACA,OAAA,cAAA,CAAA,IAAA,EAAA,gBAAA;;;;;;QACA,OAAA,cAAA,CAAA,IAAA,EAAA,gBAAA;;;;;;QAES,OAAA,cAAA,CAAA,IAAA,EAAA,QAAA;;;;mBAAO;;QAWd,MAAM,UACJ,QAAQ,KAAK,YAAY,YACrB,QAAQ,KAAK,CAAC,OAAO,GACrB,QAAQ,KAAK,EAAE,UACb,QAAQ,KAAK,CAAC,OAAO,GACrB,QAAQ,OAAQ;QACxB,MAAM,WACJ,QAAQ,KAAK,YAAY,YACrB,QAAQ,KAAK,CAAC,QAAQ,IAAI,QAAQ,QAAQ,GAC1C,QAAQ,QAAQ;QAEtB,IAAI,CAAC,OAAO,GAAG;YACb,gBAAgB;YAChB;eACI,QAAQ,YAAY,GAAG;mBAAI,QAAQ,YAAY;gBAAE;aAAG,GAAG,EAAE;eACzD,WACA;gBACE,CAAA,MAAA,EAAS,IAAI,CAAC,WAAW,CAAA,EAAG,SAAQ,KAAA,EAClC,QAAQ,QAAQ,GAAG,CAAA,CAAA,EAAI,QAAQ,QAAQ,CAAA,CAAE,GAAG,GAC9C,CAAE;aACH,GACD,EAAE;eACF,UAAU;gBAAC,CAAA,SAAA,EAAY,QAAO,CAAE;aAAC,GAAG,EAAE;YAC1C,CAAA,SAAA,EAAY,IAAI,CAAC,OAAO,CAAA,CAAE;SAC3B,CAAC,IAAI,CAAC;QAEP,IAAI,QAAQ,KAAK,EAAE,IAAI,CAAC,KAAK,GAAG,QAAQ,KAAK;QAC7C,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,QAAQ,GAAG;QAChB,IAAI,CAAC,YAAY,GAAG,QAAQ,YAAY;QACxC,IAAI,CAAC,YAAY,GAAG;IACtB;IAEA,KAAK,EAA8B,EAAA;QACjC,OAAO,uBAAA,IAAI,EAAA,sBAAA,KAAA,iBAAM,IAAA,CAAV,IAAI,EAAO,IAAI,EAAE;IAC1B;;iFAEM,GAAY,EAAE,EAA8B;IAChD,IAAI,KAAK,MAAM,OAAO;IACtB,IAAK,IAAc,KAAK,EAAE,OAAO,uBAAA,IAAI,EAAA,sBAAA,KAAA,iBAAM,IAAA,CAAV,IAAI,EAAQ,IAAc,KAAK,EAAE;IAClE,OAAO;AACT"}},
    {"offset": {"line": 166, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 171, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/errors/config.ts"],"sourcesContent":["import type { Address } from 'viem'\n\nimport type { Connector } from '../createConfig.js'\nimport { BaseError } from './base.js'\n\nexport type ChainNotConfiguredErrorType = ChainNotConfiguredError & {\n  name: 'ChainNotConfiguredError'\n}\nexport class ChainNotConfiguredError extends BaseError {\n  override name = 'ChainNotConfiguredError'\n  constructor() {\n    super('Chain not configured.')\n  }\n}\n\nexport type ConnectorAlreadyConnectedErrorType =\n  ConnectorAlreadyConnectedError & {\n    name: 'ConnectorAlreadyConnectedError'\n  }\nexport class ConnectorAlreadyConnectedError extends BaseError {\n  override name = 'ConnectorAlreadyConnectedError'\n  constructor() {\n    super('Connector already connected.')\n  }\n}\n\nexport type ConnectorNotConnectedErrorType = ConnectorNotConnectedError & {\n  name: 'ConnectorNotConnectedError'\n}\nexport class ConnectorNotConnectedError extends BaseError {\n  override name = 'ConnectorNotConnectedError'\n  constructor() {\n    super('Connector not connected.')\n  }\n}\n\nexport type ConnectorNotFoundErrorType = ConnectorNotFoundError & {\n  name: 'ConnectorNotFoundError'\n}\nexport class ConnectorNotFoundError extends BaseError {\n  override name = 'ConnectorNotFoundError'\n  constructor() {\n    super('Connector not found.')\n  }\n}\n\nexport type ConnectorAccountNotFoundErrorType =\n  ConnectorAccountNotFoundError & {\n    name: 'ConnectorAccountNotFoundError'\n  }\nexport class ConnectorAccountNotFoundError extends BaseError {\n  override name = 'ConnectorAccountNotFoundError'\n  constructor({\n    address,\n    connector,\n  }: {\n    address: Address\n    connector: Connector\n  }) {\n    super(`Account \"${address}\" not found for connector \"${connector.name}\".`)\n  }\n}\n\nexport type ConnectorChainMismatchErrorType = ConnectorAccountNotFoundError & {\n  name: 'ConnectorChainMismatchError'\n}\nexport class ConnectorChainMismatchError extends BaseError {\n  override name = 'ConnectorChainMismatchError'\n  constructor({\n    connectionChainId,\n    connectorChainId,\n  }: {\n    connectionChainId: number\n    connectorChainId: number\n  }) {\n    super(\n      `The current chain of the connector (id: ${connectorChainId}) does not match the connection's chain (id: ${connectionChainId}).`,\n      {\n        metaMessages: [\n          `Current Chain ID:  ${connectorChainId}`,\n          `Expected Chain ID: ${connectionChainId}`,\n        ],\n      },\n    )\n  }\n}\n\nexport type ConnectorUnavailableReconnectingErrorType =\n  ConnectorUnavailableReconnectingError & {\n    name: 'ConnectorUnavailableReconnectingError'\n  }\nexport class ConnectorUnavailableReconnectingError extends BaseError {\n  override name = 'ConnectorUnavailableReconnectingError'\n  constructor({ connector }: { connector: { name: string } }) {\n    super(`Connector \"${connector.name}\" unavailable while reconnecting.`, {\n      details: [\n        'During the reconnection step, the only connector methods guaranteed to be available are: `id`, `name`, `type`, `uuid`.',\n        'All other methods are not guaranteed to be available until reconnection completes and connectors are fully restored.',\n        'This error commonly occurs for connectors that asynchronously inject after reconnection has already started.',\n      ].join(' '),\n    })\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;AAQM,MAAO,gCAAgC,gKAAA,CAAA,YAAS;IAEpD,aAAA;QACE,KAAK,CAAC;QAFC,OAAA,cAAA,CAAA,IAAA,EAAA,QAAA;;;;mBAAO;;IAGhB;;AAOI,MAAO,uCAAuC,gKAAA,CAAA,YAAS;IAE3D,aAAA;QACE,KAAK,CAAC;QAFC,OAAA,cAAA,CAAA,IAAA,EAAA,QAAA;;;;mBAAO;;IAGhB;;AAMI,MAAO,mCAAmC,gKAAA,CAAA,YAAS;IAEvD,aAAA;QACE,KAAK,CAAC;QAFC,OAAA,cAAA,CAAA,IAAA,EAAA,QAAA;;;;mBAAO;;IAGhB;;AAMI,MAAO,+BAA+B,gKAAA,CAAA,YAAS;IAEnD,aAAA;QACE,KAAK,CAAC;QAFC,OAAA,cAAA,CAAA,IAAA,EAAA,QAAA;;;;mBAAO;;IAGhB;;AAOI,MAAO,sCAAsC,gKAAA,CAAA,YAAS;IAE1D,YAAY,EACV,OAAO,EACP,SAAS,EAIV,CAAA;QACC,KAAK,CAAC,CAAA,SAAA,EAAY,QAAO,2BAAA,EAA8B,UAAU,IAAI,CAAA,EAAA,CAAI;QARlE,OAAA,cAAA,CAAA,IAAA,EAAA,QAAA;;;;mBAAO;;IAShB;;AAMI,MAAO,oCAAoC,gKAAA,CAAA,YAAS;IAExD,YAAY,EACV,iBAAiB,EACjB,gBAAgB,EAIjB,CAAA;QACC,KAAK,CACH,CAAA,wCAAA,EAA2C,iBAAgB,6CAAA,EAAgD,kBAAiB,EAAA,CAAI,EAChI;YACE,cAAc;gBACZ,CAAA,mBAAA,EAAsB,iBAAgB,CAAE;gBACxC,CAAA,mBAAA,EAAsB,kBAAiB,CAAE;aAC1C;;QAdE,OAAA,cAAA,CAAA,IAAA,EAAA,QAAA;;;;mBAAO;;IAiBhB;;AAOI,MAAO,8CAA8C,gKAAA,CAAA,YAAS;IAElE,YAAY,EAAE,SAAS,EAAmC,CAAA;QACxD,KAAK,CAAC,CAAA,WAAA,EAAc,UAAU,IAAI,CAAA,iCAAA,CAAmC,EAAE;YACrE,SAAS;gBACP;gBACA;gBACA;aACD,CAAC,IAAI,CAAC;;QAPF,OAAA,cAAA,CAAA,IAAA,EAAA,QAAA;;;;mBAAO;;IAShB"}},
    {"offset": {"line": 271, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 276, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/errors/connector.ts"],"sourcesContent":["import type { Connector } from '../createConfig.js'\nimport { BaseError } from './base.js'\n\nexport type ProviderNotFoundErrorType = ProviderNotFoundError & {\n  name: 'ProviderNotFoundError'\n}\nexport class ProviderNotFoundError extends BaseError {\n  override name = 'ProviderNotFoundError'\n  constructor() {\n    super('Provider not found.')\n  }\n}\n\nexport type SwitchChainNotSupportedErrorType = SwitchChainNotSupportedError & {\n  name: 'SwitchChainNotSupportedError'\n}\nexport class SwitchChainNotSupportedError extends BaseError {\n  override name = 'SwitchChainNotSupportedError'\n\n  constructor({ connector }: { connector: Connector }) {\n    super(`\"${connector.name}\" does not support programmatic chain switching.`)\n  }\n}\n"],"names":[],"mappings":";;;;;;;AAMM,MAAO,8BAA8B,gKAAA,CAAA,YAAS;IAElD,aAAA;QACE,KAAK,CAAC;QAFC,OAAA,cAAA,CAAA,IAAA,EAAA,QAAA;;;;mBAAO;;IAGhB;;AAMI,MAAO,qCAAqC,gKAAA,CAAA,YAAS;IAGzD,YAAY,EAAE,SAAS,EAA4B,CAAA;QACjD,KAAK,CAAC,CAAA,CAAA,EAAI,UAAU,IAAI,CAAA,gDAAA,CAAkD;QAHnE,OAAA,cAAA,CAAA,IAAA,EAAA,QAAA;;;;mBAAO;;IAIhB"}},
    {"offset": {"line": 305, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 310, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/connectors/createConnector.ts"],"sourcesContent":["import type {\n  AddEthereumChainParameter,\n  Address,\n  Chain,\n  Client,\n  ProviderConnectInfo,\n  ProviderMessage,\n} from 'viem'\n\nimport type { Transport } from '../createConfig.js'\nimport type { Emitter } from '../createEmitter.js'\nimport type { Storage } from '../createStorage.js'\nimport type { Compute, ExactPartial, StrictOmit } from '../types/utils.js'\n\nexport type ConnectorEventMap = {\n  change: {\n    accounts?: readonly Address[] | undefined\n    chainId?: number | undefined\n  }\n  connect: { accounts: readonly Address[]; chainId: number }\n  disconnect: never\n  error: { error: Error }\n  message: { type: string; data?: unknown | undefined }\n}\n\nexport type CreateConnectorFn<\n  provider = unknown,\n  properties extends Record<string, unknown> = Record<string, unknown>,\n  storageItem extends Record<string, unknown> = Record<string, unknown>,\n> = (config: {\n  chains: readonly [Chain, ...Chain[]]\n  emitter: Emitter<ConnectorEventMap>\n  storage?: Compute<Storage<storageItem>> | null | undefined\n  transports?: Record<number, Transport> | undefined\n}) => Compute<\n  {\n    readonly icon?: string | undefined\n    readonly id: string\n    readonly name: string\n    readonly rdns?: string | undefined\n    readonly supportsSimulation?: boolean | undefined\n    readonly type: string\n\n    setup?(): Promise<void>\n    connect(\n      parameters?:\n        | { chainId?: number | undefined; isReconnecting?: boolean | undefined }\n        | undefined,\n    ): Promise<{\n      accounts: readonly Address[]\n      chainId: number\n    }>\n    disconnect(): Promise<void>\n    getAccounts(): Promise<readonly Address[]>\n    getChainId(): Promise<number>\n    getProvider(\n      parameters?: { chainId?: number | undefined } | undefined,\n    ): Promise<provider>\n    getClient?(\n      parameters?: { chainId?: number | undefined } | undefined,\n    ): Promise<Client>\n    isAuthorized(): Promise<boolean>\n    switchChain?(\n      parameters: Compute<{\n        addEthereumChainParameter?:\n          | ExactPartial<StrictOmit<AddEthereumChainParameter, 'chainId'>>\n          | undefined\n        chainId: number\n      }>,\n    ): Promise<Chain>\n\n    onAccountsChanged(accounts: string[]): void\n    onChainChanged(chainId: string): void\n    onConnect?(connectInfo: ProviderConnectInfo): void\n    onDisconnect(error?: Error | undefined): void\n    onMessage?(message: ProviderMessage): void\n  } & properties\n>\n\nexport function createConnector<\n  provider,\n  properties extends Record<string, unknown> = Record<string, unknown>,\n  storageItem extends Record<string, unknown> = Record<string, unknown>,\n>(createConnectorFn: CreateConnectorFn<provider, properties, storageItem>) {\n  return createConnectorFn\n}\n"],"names":[],"mappings":";;;AA+EM,SAAU,gBAId,iBAAuE;IACvE,OAAO;AACT"}},
    {"offset": {"line": 316, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 321, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/connectors/injected.ts"],"sourcesContent":["import {\n  type AddEthereumChainParameter,\n  type Address,\n  type EIP1193Provider,\n  type ProviderConnectInfo,\n  type ProviderRpcError,\n  ResourceUnavailableRpcError,\n  type RpcError,\n  SwitchChainError,\n  UserRejectedRequestError,\n  getAddress,\n  numberToHex,\n  withRetry,\n  withTimeout,\n} from 'viem'\n\nimport type { Connector } from '../createConfig.js'\nimport { ChainNotConfiguredError } from '../errors/config.js'\nimport { ProviderNotFoundError } from '../errors/connector.js'\nimport type { Compute } from '../types/utils.js'\nimport { createConnector } from './createConnector.js'\n\nexport type InjectedParameters = {\n  /**\n   * Some injected providers do not support programmatic disconnect.\n   * This flag simulates the disconnect behavior by keeping track of connection status in storage.\n   * @default true\n   */\n  shimDisconnect?: boolean | undefined\n  /**\n   * [EIP-1193](https://eips.ethereum.org/EIPS/eip-1193) Ethereum Provider to target\n   */\n  target?: TargetId | Target | (() => Target | undefined) | undefined\n  unstable_shimAsyncInject?: boolean | number | undefined\n}\n\n// Regex of wallets/providers that can accurately simulate contract calls & display contract revert reasons.\nconst supportsSimulationIdRegex = /(rabby|trustwallet)/\n\ninjected.type = 'injected' as const\nexport function injected(parameters: InjectedParameters = {}) {\n  const { shimDisconnect = true, unstable_shimAsyncInject } = parameters\n\n  function getTarget(): Compute<Target & { id: string }> {\n    const target = parameters.target\n    if (typeof target === 'function') {\n      const result = target()\n      if (result) return result\n    }\n\n    if (typeof target === 'object') return target\n\n    if (typeof target === 'string')\n      return {\n        ...(targetMap[target as keyof typeof targetMap] ?? {\n          id: target,\n          name: `${target[0]!.toUpperCase()}${target.slice(1)}`,\n          provider: `is${target[0]!.toUpperCase()}${target.slice(1)}`,\n        }),\n      }\n\n    return {\n      id: 'injected',\n      name: 'Injected',\n      provider(window) {\n        return window?.ethereum\n      },\n    }\n  }\n\n  type Provider = WalletProvider | undefined\n  type Properties = {\n    onConnect(connectInfo: ProviderConnectInfo): void\n  }\n  type StorageItem = {\n    [_ in 'injected.connected' | `${string}.disconnected`]: true\n  }\n\n  let accountsChanged: Connector['onAccountsChanged'] | undefined\n  let chainChanged: Connector['onChainChanged'] | undefined\n  let connect: Connector['onConnect'] | undefined\n  let disconnect: Connector['onDisconnect'] | undefined\n\n  return createConnector<Provider, Properties, StorageItem>((config) => ({\n    get icon() {\n      return getTarget().icon\n    },\n    get id() {\n      return getTarget().id\n    },\n    get name() {\n      return getTarget().name\n    },\n    get supportsSimulation() {\n      return supportsSimulationIdRegex.test(this.id.toLowerCase())\n    },\n    type: injected.type,\n    async setup() {\n      const provider = await this.getProvider()\n      // Only start listening for events if `target` is set, otherwise `injected()` will also receive events\n      if (provider?.on && parameters.target) {\n        if (!connect) {\n          connect = this.onConnect.bind(this)\n          provider.on('connect', connect)\n        }\n\n        // We shouldn't need to listen for `'accountsChanged'` here since the `'connect'` event should suffice (and wallet shouldn't be connected yet).\n        // Some wallets, like MetaMask, do not implement the `'connect'` event and overload `'accountsChanged'` instead.\n        if (!accountsChanged) {\n          accountsChanged = this.onAccountsChanged.bind(this)\n          provider.on('accountsChanged', accountsChanged)\n        }\n      }\n    },\n    async connect({ chainId, isReconnecting } = {}) {\n      const provider = await this.getProvider()\n      if (!provider) throw new ProviderNotFoundError()\n\n      let accounts: readonly Address[] = []\n      if (isReconnecting) accounts = await this.getAccounts().catch(() => [])\n      else if (shimDisconnect) {\n        // Attempt to show another prompt for selecting account if `shimDisconnect` flag is enabled\n        try {\n          const permissions = await provider.request({\n            method: 'wallet_requestPermissions',\n            params: [{ eth_accounts: {} }],\n          })\n          accounts = (permissions[0]?.caveats?.[0]?.value as string[])?.map(\n            (x) => getAddress(x),\n          )\n          // `'wallet_requestPermissions'` can return a different order of accounts than `'eth_accounts'`\n          // switch to `'eth_accounts'` ordering if more than one account is connected\n          // https://github.com/wevm/wagmi/issues/4140\n          if (accounts.length > 0) {\n            const sortedAccounts = await this.getAccounts()\n            accounts = sortedAccounts\n          }\n        } catch (err) {\n          const error = err as RpcError\n          // Not all injected providers support `wallet_requestPermissions` (e.g. MetaMask iOS).\n          // Only bubble up error if user rejects request\n          if (error.code === UserRejectedRequestError.code)\n            throw new UserRejectedRequestError(error)\n          // Or prompt is already open\n          if (error.code === ResourceUnavailableRpcError.code) throw error\n        }\n      }\n\n      try {\n        if (!accounts?.length && !isReconnecting) {\n          const requestedAccounts = await provider.request({\n            method: 'eth_requestAccounts',\n          })\n          accounts = requestedAccounts.map((x) => getAddress(x))\n        }\n\n        // Manage EIP-1193 event listeners\n        // https://eips.ethereum.org/EIPS/eip-1193#events\n        if (connect) {\n          provider.removeListener('connect', connect)\n          connect = undefined\n        }\n        if (!accountsChanged) {\n          accountsChanged = this.onAccountsChanged.bind(this)\n          provider.on('accountsChanged', accountsChanged)\n        }\n        if (!chainChanged) {\n          chainChanged = this.onChainChanged.bind(this)\n          provider.on('chainChanged', chainChanged)\n        }\n        if (!disconnect) {\n          disconnect = this.onDisconnect.bind(this)\n          provider.on('disconnect', disconnect)\n        }\n\n        // Switch to chain if provided\n        let currentChainId = await this.getChainId()\n        if (chainId && currentChainId !== chainId) {\n          const chain = await this.switchChain!({ chainId }).catch((error) => {\n            if (error.code === UserRejectedRequestError.code) throw error\n            return { id: currentChainId }\n          })\n          currentChainId = chain?.id ?? currentChainId\n        }\n\n        // Remove disconnected shim if it exists\n        if (shimDisconnect)\n          await config.storage?.removeItem(`${this.id}.disconnected`)\n\n        // Add connected shim if no target exists\n        if (!parameters.target)\n          await config.storage?.setItem('injected.connected', true)\n\n        return { accounts, chainId: currentChainId }\n      } catch (err) {\n        const error = err as RpcError\n        if (error.code === UserRejectedRequestError.code)\n          throw new UserRejectedRequestError(error)\n        if (error.code === ResourceUnavailableRpcError.code)\n          throw new ResourceUnavailableRpcError(error)\n        throw error\n      }\n    },\n    async disconnect() {\n      const provider = await this.getProvider()\n      if (!provider) throw new ProviderNotFoundError()\n\n      // Manage EIP-1193 event listeners\n      if (chainChanged) {\n        provider.removeListener('chainChanged', chainChanged)\n        chainChanged = undefined\n      }\n      if (disconnect) {\n        provider.removeListener('disconnect', disconnect)\n        disconnect = undefined\n      }\n      if (!connect) {\n        connect = this.onConnect.bind(this)\n        provider.on('connect', connect)\n      }\n\n      // Experimental support for MetaMask disconnect\n      // https://github.com/MetaMask/metamask-improvement-proposals/blob/main/MIPs/mip-2.md\n      try {\n        // Adding timeout as not all wallets support this method and can hang\n        // https://github.com/wevm/wagmi/issues/4064\n        await withTimeout(\n          () =>\n            // TODO: Remove explicit type for viem@3\n            provider.request<{\n              Method: 'wallet_revokePermissions'\n              Parameters: [permissions: { eth_accounts: Record<string, any> }]\n              ReturnType: null\n            }>({\n              // `'wallet_revokePermissions'` added in `viem@2.10.3`\n              method: 'wallet_revokePermissions',\n              params: [{ eth_accounts: {} }],\n            }),\n          { timeout: 100 },\n        )\n      } catch {}\n\n      // Add shim signalling connector is disconnected\n      if (shimDisconnect) {\n        await config.storage?.setItem(`${this.id}.disconnected`, true)\n      }\n\n      if (!parameters.target)\n        await config.storage?.removeItem('injected.connected')\n    },\n    async getAccounts() {\n      const provider = await this.getProvider()\n      if (!provider) throw new ProviderNotFoundError()\n      const accounts = await provider.request({ method: 'eth_accounts' })\n      return accounts.map((x) => getAddress(x))\n    },\n    async getChainId() {\n      const provider = await this.getProvider()\n      if (!provider) throw new ProviderNotFoundError()\n      const hexChainId = await provider.request({ method: 'eth_chainId' })\n      return Number(hexChainId)\n    },\n    async getProvider() {\n      if (typeof window === 'undefined') return undefined\n\n      let provider: Provider\n      const target = getTarget()\n      if (typeof target.provider === 'function')\n        provider = target.provider(window as Window | undefined)\n      else if (typeof target.provider === 'string')\n        provider = findProvider(window, target.provider)\n      else provider = target.provider\n\n      // Some wallets do not conform to EIP-1193 (e.g. Trust Wallet)\n      // https://github.com/wevm/wagmi/issues/3526#issuecomment-1912683002\n      if (provider && !provider.removeListener) {\n        // Try using `off` handler if it exists, otherwise noop\n        if ('off' in provider && typeof provider.off === 'function')\n          provider.removeListener =\n            provider.off as typeof provider.removeListener\n        else provider.removeListener = () => {}\n      }\n\n      return provider\n    },\n    async isAuthorized() {\n      try {\n        const isDisconnected =\n          shimDisconnect &&\n          // If shim exists in storage, connector is disconnected\n          (await config.storage?.getItem(`${this.id}.disconnected`))\n        if (isDisconnected) return false\n\n        // Don't allow injected connector to connect if no target is set and it hasn't already connected\n        // (e.g. flag in storage is not set). This prevents a targetless injected connector from connecting\n        // automatically whenever there is a targeted connector configured.\n        if (!parameters.target) {\n          const connected = await config.storage?.getItem('injected.connected')\n          if (!connected) return false\n        }\n\n        const provider = await this.getProvider()\n        if (!provider) {\n          if (\n            unstable_shimAsyncInject !== undefined &&\n            unstable_shimAsyncInject !== false\n          ) {\n            // If no provider is found, check for async injection\n            // https://github.com/wevm/references/issues/167\n            // https://github.com/MetaMask/detect-provider\n            const handleEthereum = async () => {\n              if (typeof window !== 'undefined')\n                window.removeEventListener(\n                  'ethereum#initialized',\n                  handleEthereum,\n                )\n              const provider = await this.getProvider()\n              return !!provider\n            }\n            const timeout =\n              typeof unstable_shimAsyncInject === 'number'\n                ? unstable_shimAsyncInject\n                : 1_000\n            const res = await Promise.race([\n              ...(typeof window !== 'undefined'\n                ? [\n                    new Promise<boolean>((resolve) =>\n                      window.addEventListener(\n                        'ethereum#initialized',\n                        () => resolve(handleEthereum()),\n                        { once: true },\n                      ),\n                    ),\n                  ]\n                : []),\n              new Promise<boolean>((resolve) =>\n                setTimeout(() => resolve(handleEthereum()), timeout),\n              ),\n            ])\n            if (res) return true\n          }\n\n          throw new ProviderNotFoundError()\n        }\n\n        // Use retry strategy as some injected wallets (e.g. MetaMask) fail to\n        // immediately resolve JSON-RPC requests on page load.\n        const accounts = await withRetry(() => this.getAccounts())\n        return !!accounts.length\n      } catch {\n        return false\n      }\n    },\n    async switchChain({ addEthereumChainParameter, chainId }) {\n      const provider = await this.getProvider()\n      if (!provider) throw new ProviderNotFoundError()\n\n      const chain = config.chains.find((x) => x.id === chainId)\n      if (!chain) throw new SwitchChainError(new ChainNotConfiguredError())\n\n      try {\n        await Promise.all([\n          provider\n            .request({\n              method: 'wallet_switchEthereumChain',\n              params: [{ chainId: numberToHex(chainId) }],\n            })\n            // During `'wallet_switchEthereumChain'`, MetaMask makes a `'net_version'` RPC call to the target chain.\n            // If this request fails, MetaMask does not emit the `'chainChanged'` event, but will still switch the chain.\n            // To counter this behavior, we request and emit the current chain ID to confirm the chain switch either via\n            // this callback or an externally emitted `'chainChanged'` event.\n            // https://github.com/MetaMask/metamask-extension/issues/24247\n            .then(async () => {\n              const currentChainId = await this.getChainId()\n              if (currentChainId === chainId)\n                config.emitter.emit('change', { chainId })\n            }),\n          new Promise<void>((resolve) => {\n            const listener = ((data) => {\n              if ('chainId' in data && data.chainId === chainId) {\n                config.emitter.off('change', listener)\n                resolve()\n              }\n            }) satisfies Parameters<typeof config.emitter.on>[1]\n            config.emitter.on('change', listener)\n          }),\n        ])\n        return chain\n      } catch (err) {\n        const error = err as RpcError\n\n        // Indicates chain is not added to provider\n        if (\n          error.code === 4902 ||\n          // Unwrapping for MetaMask Mobile\n          // https://github.com/MetaMask/metamask-mobile/issues/2944#issuecomment-976988719\n          (error as ProviderRpcError<{ originalError?: { code: number } }>)\n            ?.data?.originalError?.code === 4902\n        ) {\n          try {\n            const { default: blockExplorer, ...blockExplorers } =\n              chain.blockExplorers ?? {}\n            let blockExplorerUrls: string[] | undefined\n            if (addEthereumChainParameter?.blockExplorerUrls)\n              blockExplorerUrls = addEthereumChainParameter.blockExplorerUrls\n            else if (blockExplorer)\n              blockExplorerUrls = [\n                blockExplorer.url,\n                ...Object.values(blockExplorers).map((x) => x.url),\n              ]\n\n            let rpcUrls: readonly string[]\n            if (addEthereumChainParameter?.rpcUrls?.length)\n              rpcUrls = addEthereumChainParameter.rpcUrls\n            else rpcUrls = [chain.rpcUrls.default?.http[0] ?? '']\n\n            const addEthereumChain = {\n              blockExplorerUrls,\n              chainId: numberToHex(chainId),\n              chainName: addEthereumChainParameter?.chainName ?? chain.name,\n              iconUrls: addEthereumChainParameter?.iconUrls,\n              nativeCurrency:\n                addEthereumChainParameter?.nativeCurrency ??\n                chain.nativeCurrency,\n              rpcUrls,\n            } satisfies AddEthereumChainParameter\n\n            await provider.request({\n              method: 'wallet_addEthereumChain',\n              params: [addEthereumChain],\n            })\n\n            const currentChainId = await this.getChainId()\n            if (currentChainId !== chainId)\n              throw new UserRejectedRequestError(\n                new Error('User rejected switch after adding network.'),\n              )\n\n            return chain\n          } catch (error) {\n            throw new UserRejectedRequestError(error as Error)\n          }\n        }\n\n        if (error.code === UserRejectedRequestError.code)\n          throw new UserRejectedRequestError(error)\n        throw new SwitchChainError(error)\n      }\n    },\n    async onAccountsChanged(accounts) {\n      // Disconnect if there are no accounts\n      if (accounts.length === 0) this.onDisconnect()\n      // Connect if emitter is listening for connect event (e.g. is disconnected and connects through wallet interface)\n      else if (config.emitter.listenerCount('connect')) {\n        const chainId = (await this.getChainId()).toString()\n        this.onConnect({ chainId })\n        // Remove disconnected shim if it exists\n        if (shimDisconnect)\n          await config.storage?.removeItem(`${this.id}.disconnected`)\n      }\n      // Regular change event\n      else\n        config.emitter.emit('change', {\n          accounts: accounts.map((x) => getAddress(x)),\n        })\n    },\n    onChainChanged(chain) {\n      const chainId = Number(chain)\n      config.emitter.emit('change', { chainId })\n    },\n    async onConnect(connectInfo) {\n      const accounts = await this.getAccounts()\n      if (accounts.length === 0) return\n\n      const chainId = Number(connectInfo.chainId)\n      config.emitter.emit('connect', { accounts, chainId })\n\n      // Manage EIP-1193 event listeners\n      const provider = await this.getProvider()\n      if (provider) {\n        if (connect) {\n          provider.removeListener('connect', connect)\n          connect = undefined\n        }\n        if (!accountsChanged) {\n          accountsChanged = this.onAccountsChanged.bind(this)\n          provider.on('accountsChanged', accountsChanged)\n        }\n        if (!chainChanged) {\n          chainChanged = this.onChainChanged.bind(this)\n          provider.on('chainChanged', chainChanged)\n        }\n        if (!disconnect) {\n          disconnect = this.onDisconnect.bind(this)\n          provider.on('disconnect', disconnect)\n        }\n      }\n    },\n    async onDisconnect(error) {\n      const provider = await this.getProvider()\n\n      // If MetaMask emits a `code: 1013` error, wait for reconnection before disconnecting\n      // https://github.com/MetaMask/providers/pull/120\n      if (error && (error as RpcError<1013>).code === 1013) {\n        if (provider && !!(await this.getAccounts()).length) return\n      }\n\n      // No need to remove `${this.id}.disconnected` from storage because `onDisconnect` is typically\n      // only called when the wallet is disconnected through the wallet's interface, meaning the wallet\n      // actually disconnected and we don't need to simulate it.\n      config.emitter.emit('disconnect')\n\n      // Manage EIP-1193 event listeners\n      if (provider) {\n        if (chainChanged) {\n          provider.removeListener('chainChanged', chainChanged)\n          chainChanged = undefined\n        }\n        if (disconnect) {\n          provider.removeListener('disconnect', disconnect)\n          disconnect = undefined\n        }\n        if (!connect) {\n          connect = this.onConnect.bind(this)\n          provider.on('connect', connect)\n        }\n      }\n    },\n  }))\n}\n\nconst targetMap = {\n  coinbaseWallet: {\n    id: 'coinbaseWallet',\n    name: 'Coinbase Wallet',\n    provider(window) {\n      if (window?.coinbaseWalletExtension) return window.coinbaseWalletExtension\n      return findProvider(window, 'isCoinbaseWallet')\n    },\n  },\n  metaMask: {\n    id: 'metaMask',\n    name: 'MetaMask',\n    provider(window) {\n      return findProvider(window, (provider) => {\n        if (!provider.isMetaMask) return false\n        // Brave tries to make itself look like MetaMask\n        // Could also try RPC `web3_clientVersion` if following is unreliable\n        if (provider.isBraveWallet && !provider._events && !provider._state)\n          return false\n        // Other wallets that try to look like MetaMask\n        const flags = [\n          'isApexWallet',\n          'isAvalanche',\n          'isBitKeep',\n          'isBlockWallet',\n          'isKuCoinWallet',\n          'isMathWallet',\n          'isOkxWallet',\n          'isOKExWallet',\n          'isOneInchIOSWallet',\n          'isOneInchAndroidWallet',\n          'isOpera',\n          'isPortal',\n          'isRabby',\n          'isTokenPocket',\n          'isTokenary',\n          'isUniswapWallet',\n          'isZerion',\n        ] satisfies WalletProviderFlags[]\n        for (const flag of flags) if (provider[flag]) return false\n        return true\n      })\n    },\n  },\n  phantom: {\n    id: 'phantom',\n    name: 'Phantom',\n    provider(window) {\n      if (window?.phantom?.ethereum) return window.phantom?.ethereum\n      return findProvider(window, 'isPhantom')\n    },\n  },\n} as const satisfies TargetMap\n\ntype TargetMap = { [_ in TargetId]?: Target | undefined }\n\ntype Target = {\n  icon?: string | undefined\n  id: string\n  name: string\n  provider:\n    | WalletProviderFlags\n    | WalletProvider\n    | ((window?: Window | undefined) => WalletProvider | undefined)\n}\n\n/** @deprecated */\ntype TargetId = Compute<WalletProviderFlags> extends `is${infer name}`\n  ? name extends `${infer char}${infer rest}`\n    ? `${Lowercase<char>}${rest}`\n    : never\n  : never\n\n/**\n * @deprecated As of 2024/10/16, we are no longer accepting new provider flags as EIP-6963 should be used instead.\n */\ntype WalletProviderFlags =\n  | 'isApexWallet'\n  | 'isAvalanche'\n  | 'isBackpack'\n  | 'isBifrost'\n  | 'isBitKeep'\n  | 'isBitski'\n  | 'isBlockWallet'\n  | 'isBraveWallet'\n  | 'isCoinbaseWallet'\n  | 'isDawn'\n  | 'isEnkrypt'\n  | 'isExodus'\n  | 'isFrame'\n  | 'isFrontier'\n  | 'isGamestop'\n  | 'isHyperPay'\n  | 'isImToken'\n  | 'isKuCoinWallet'\n  | 'isMathWallet'\n  | 'isMetaMask'\n  | 'isOkxWallet'\n  | 'isOKExWallet'\n  | 'isOneInchAndroidWallet'\n  | 'isOneInchIOSWallet'\n  | 'isOpera'\n  | 'isPhantom'\n  | 'isPortal'\n  | 'isRabby'\n  | 'isRainbow'\n  | 'isStatus'\n  | 'isTally'\n  | 'isTokenPocket'\n  | 'isTokenary'\n  | 'isTrust'\n  | 'isTrustWallet'\n  | 'isUniswapWallet'\n  | 'isXDEFI'\n  | 'isZerion'\n\ntype WalletProvider = Compute<\n  EIP1193Provider & {\n    [key in WalletProviderFlags]?: true | undefined\n  } & {\n    providers?: WalletProvider[] | undefined\n    /** Only exists in MetaMask as of 2022/04/03 */\n    _events?: { connect?: (() => void) | undefined } | undefined\n    /** Only exists in MetaMask as of 2022/04/03 */\n    _state?:\n      | {\n          accounts?: string[]\n          initialized?: boolean\n          isConnected?: boolean\n          isPermanentlyDisconnected?: boolean\n          isUnlocked?: boolean\n        }\n      | undefined\n  }\n>\n\ntype Window = {\n  coinbaseWalletExtension?: WalletProvider | undefined\n  ethereum?: WalletProvider | undefined\n  phantom?: { ethereum: WalletProvider } | undefined\n}\n\nfunction findProvider(\n  window: globalThis.Window | Window | undefined,\n  select?: WalletProviderFlags | ((provider: WalletProvider) => boolean),\n) {\n  function isProvider(provider: WalletProvider) {\n    if (typeof select === 'function') return select(provider)\n    if (typeof select === 'string') return provider[select]\n    return true\n  }\n\n  const ethereum = (window as Window).ethereum\n  if (ethereum?.providers)\n    return ethereum.providers.find((provider) => isProvider(provider))\n  if (ethereum && isProvider(ethereum)) return ethereum\n  return undefined\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 820, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 825, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/createEmitter.ts"],"sourcesContent":["import { EventEmitter } from 'eventemitter3'\n\ntype EventMap = Record<string, object | never>\ntype EventKey<eventMap extends EventMap> = string & keyof eventMap\ntype EventFn<parameters extends unknown[] = any[]> = (\n  ...parameters: parameters\n) => void\nexport type EventData<\n  eventMap extends EventMap,\n  eventName extends keyof eventMap,\n> = (eventMap[eventName] extends [never] ? unknown : eventMap[eventName]) & {\n  uid: string\n}\n\nexport class Emitter<eventMap extends EventMap> {\n  _emitter = new EventEmitter()\n\n  constructor(public uid: string) {}\n\n  on<key extends EventKey<eventMap>>(\n    eventName: key,\n    fn: EventFn<\n      eventMap[key] extends [never]\n        ? [{ uid: string }]\n        : [data: eventMap[key] & { uid: string }]\n    >,\n  ) {\n    this._emitter.on(eventName, fn as EventFn)\n  }\n\n  once<key extends EventKey<eventMap>>(\n    eventName: key,\n    fn: EventFn<\n      eventMap[key] extends [never]\n        ? [{ uid: string }]\n        : [data: eventMap[key] & { uid: string }]\n    >,\n  ) {\n    this._emitter.once(eventName, fn as EventFn)\n  }\n\n  off<key extends EventKey<eventMap>>(\n    eventName: key,\n    fn: EventFn<\n      eventMap[key] extends [never]\n        ? [{ uid: string }]\n        : [data: eventMap[key] & { uid: string }]\n    >,\n  ) {\n    this._emitter.off(eventName, fn as EventFn)\n  }\n\n  emit<key extends EventKey<eventMap>>(\n    eventName: key,\n    ...params: eventMap[key] extends [never] ? [] : [data: eventMap[key]]\n  ) {\n    const data = params[0]\n    this._emitter.emit(eventName, { uid: this.uid, ...data })\n  }\n\n  listenerCount<key extends EventKey<eventMap>>(eventName: key) {\n    return this._emitter.listenerCount(eventName)\n  }\n}\n\nexport function createEmitter<eventMap extends EventMap>(uid: string) {\n  return new Emitter<eventMap>(uid)\n}\n"],"names":[],"mappings":";;;;;;;;AAcM,MAAO;IAGX,YAAmB,GAAW,CAAA;QAAlB,OAAA,cAAA,CAAA,IAAA,EAAA,OAAA;;;;mBAAO;;QAFnB,OAAA,cAAA,CAAA,IAAA,EAAA,YAAA;;;;mBAAW,IAAI,iLAAA,CAAA,eAAY;;IAEM;IAEjC,GACE,SAAc,EACd,EAIC,EAAA;QAED,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,WAAW;IAC9B;IAEA,KACE,SAAc,EACd,EAIC,EAAA;QAED,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW;IAChC;IAEA,IACE,SAAc,EACd,EAIC,EAAA;QAED,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,WAAW;IAC/B;IAEA,KACE,SAAc,EACd,GAAG,MAAkE,EAAA;QAErE,MAAM,OAAO,MAAM,CAAC,EAAE;QACtB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW;YAAE,KAAK,IAAI,CAAC,GAAG;YAAE,GAAG,IAAI;QAAA;IACxD;IAEA,cAA8C,SAAc,EAAA;QAC1D,OAAO,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC;IACrC;;AAGI,SAAU,cAAyC,GAAW;IAClE,OAAO,IAAI,QAAkB;AAC/B"}},
    {"offset": {"line": 871, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 876, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/utils/serialize.ts"],"sourcesContent":["/**\n * Get the reference key for the circular value\n *\n * @param keys the keys to build the reference key from\n * @param cutoff the maximum number of keys to include\n * @returns the reference key\n */\nfunction getReferenceKey(keys: string[], cutoff: number) {\n  return keys.slice(0, cutoff).join('.') || '.'\n}\n\n/**\n * Faster `Array.prototype.indexOf` implementation build for slicing / splicing\n *\n * @param array the array to match the value in\n * @param value the value to match\n * @returns the matching index, or -1\n */\nfunction getCutoff(array: any[], value: any) {\n  const { length } = array\n\n  for (let index = 0; index < length; ++index) {\n    if (array[index] === value) {\n      return index + 1\n    }\n  }\n\n  return 0\n}\n\ntype StandardReplacer = (key: string, value: any) => any\ntype CircularReplacer = (key: string, value: any, referenceKey: string) => any\n\n/**\n * Create a replacer method that handles circular values\n *\n * @param [replacer] a custom replacer to use for non-circular values\n * @param [circularReplacer] a custom replacer to use for circular methods\n * @returns the value to stringify\n */\nfunction createReplacer(\n  replacer?: StandardReplacer | null | undefined,\n  circularReplacer?: CircularReplacer | null | undefined,\n): StandardReplacer {\n  const hasReplacer = typeof replacer === 'function'\n  const hasCircularReplacer = typeof circularReplacer === 'function'\n\n  const cache: any[] = []\n  const keys: string[] = []\n\n  return function replace(this: any, key: string, value: any) {\n    if (typeof value === 'object') {\n      if (cache.length) {\n        const thisCutoff = getCutoff(cache, this)\n\n        if (thisCutoff === 0) {\n          cache[cache.length] = this\n        } else {\n          cache.splice(thisCutoff)\n          keys.splice(thisCutoff)\n        }\n\n        keys[keys.length] = key\n\n        const valueCutoff = getCutoff(cache, value)\n\n        if (valueCutoff !== 0) {\n          return hasCircularReplacer\n            ? circularReplacer.call(\n                this,\n                key,\n                value,\n                getReferenceKey(keys, valueCutoff),\n              )\n            : `[ref=${getReferenceKey(keys, valueCutoff)}]`\n        }\n      } else {\n        cache[0] = value\n        keys[0] = key\n      }\n    }\n\n    return hasReplacer ? replacer.call(this, key, value) : value\n  }\n}\n\n/**\n * Stringifier that handles circular values\n *\n * Forked from https://github.com/planttheidea/fast-stringify\n *\n * @param value to stringify\n * @param [replacer] a custom replacer function for handling standard values\n * @param [indent] the number of spaces to indent the output by\n * @param [circularReplacer] a custom replacer function for handling circular values\n * @returns the stringified output\n */\nexport function serialize(\n  value: any,\n  replacer?: StandardReplacer | null | undefined,\n  indent?: number | null | undefined,\n  circularReplacer?: CircularReplacer | null | undefined,\n) {\n  return JSON.stringify(\n    value,\n    createReplacer((key, value_) => {\n      let value = value_\n      if (typeof value === 'bigint')\n        value = { __type: 'bigint', value: value_.toString() }\n      if (value instanceof Map)\n        value = { __type: 'Map', value: Array.from(value_.entries()) }\n      return replacer?.(key, value) ?? value\n    }, circularReplacer),\n    indent ?? undefined,\n  )\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;AAOA,SAAS,gBAAgB,IAAc,EAAE,MAAc;IACrD,OAAO,KAAK,KAAK,CAAC,GAAG,QAAQ,IAAI,CAAC,QAAQ;AAC5C;AAEA;;;;;;IAOA,SAAS,UAAU,KAAY,EAAE,KAAU;IACzC,MAAM,EAAE,MAAM,EAAE,GAAG;IAEnB,IAAK,IAAI,QAAQ,GAAG,QAAQ,QAAQ,EAAE,MAAO;QAC3C,IAAI,KAAK,CAAC,MAAM,KAAK,OAAO;YAC1B,OAAO,QAAQ;QACjB;IACF;IAEA,OAAO;AACT;AAKA;;;;;;IAOA,SAAS,eACP,QAA8C,EAC9C,gBAAsD;IAEtD,MAAM,cAAc,OAAO,aAAa;IACxC,MAAM,sBAAsB,OAAO,qBAAqB;IAExD,MAAM,QAAe,EAAE;IACvB,MAAM,OAAiB,EAAE;IAEzB,OAAO,SAAS,QAAmB,GAAW,EAAE,KAAU;QACxD,IAAI,OAAO,UAAU,UAAU;YAC7B,IAAI,MAAM,MAAM,EAAE;gBAChB,MAAM,aAAa,UAAU,OAAO,IAAI;gBAExC,IAAI,eAAe,GAAG;oBACpB,KAAK,CAAC,MAAM,MAAM,CAAC,GAAG,IAAI;gBAC5B,OAAO;oBACL,MAAM,MAAM,CAAC;oBACb,KAAK,MAAM,CAAC;gBACd;gBAEA,IAAI,CAAC,KAAK,MAAM,CAAC,GAAG;gBAEpB,MAAM,cAAc,UAAU,OAAO;gBAErC,IAAI,gBAAgB,GAAG;oBACrB,OAAO,sBACH,iBAAiB,IAAI,CACnB,IAAI,EACJ,KACA,OACA,gBAAgB,MAAM,gBAExB,CAAA,KAAA,EAAQ,gBAAgB,MAAM,aAAY,CAAA,CAAG;gBACnD;YACF,OAAO;gBACL,KAAK,CAAC,EAAE,GAAG;gBACX,IAAI,CAAC,EAAE,GAAG;YACZ;QACF;QAEA,OAAO,cAAc,SAAS,IAAI,CAAC,IAAI,EAAE,KAAK,SAAS;IACzD;AACF;AAaM,SAAU,UACd,KAAU,EACV,QAA8C,EAC9C,MAAkC,EAClC,gBAAsD;IAEtD,OAAO,KAAK,SAAS,CACnB,OACA,eAAe,CAAC,KAAK;QACnB,IAAI,QAAQ;QACZ,IAAI,OAAO,UAAU,UACnB,QAAQ;YAAE,QAAQ;YAAU,OAAO,OAAO,QAAQ;QAAE;QACtD,IAAI,iBAAiB,KACnB,QAAQ;YAAE,QAAQ;YAAO,OAAO,MAAM,IAAI,CAAC,OAAO,OAAO;QAAG;QAC9D,OAAO,WAAW,KAAK,UAAU;IACnC,GAAG,mBACH,UAAU;AAEd"}},
    {"offset": {"line": 951, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 956, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/createStorage.ts"],"sourcesContent":["import type { PartializedState } from './createConfig.js'\nimport type { Compute } from './types/utils.js'\nimport { deserialize as deserialize_ } from './utils/deserialize.js'\nimport { serialize as serialize_ } from './utils/serialize.js'\n\n// key-values for loose autocomplete and typing\nexport type StorageItemMap = {\n  recentConnectorId: string\n  state: PartializedState\n}\n\nexport type Storage<\n  itemMap extends Record<string, unknown> = Record<string, unknown>,\n  ///\n  storageItemMap extends StorageItemMap = StorageItemMap & itemMap,\n> = {\n  key: string\n  getItem<\n    key extends keyof storageItemMap,\n    value extends storageItemMap[key],\n    defaultValue extends value | null | undefined,\n  >(\n    key: key,\n    defaultValue?: defaultValue | undefined,\n  ):\n    | (defaultValue extends null ? value | null : value)\n    | Promise<defaultValue extends null ? value | null : value>\n  setItem<\n    key extends keyof storageItemMap,\n    value extends storageItemMap[key] | null,\n  >(key: key, value: value): void | Promise<void>\n  removeItem(key: keyof storageItemMap): void | Promise<void>\n}\n\nexport type BaseStorage = {\n  getItem(\n    key: string,\n  ): string | null | undefined | Promise<string | null | undefined>\n  setItem(key: string, value: string): void | Promise<void>\n  removeItem(key: string): void | Promise<void>\n}\n\nexport type CreateStorageParameters = {\n  deserialize?: (<type>(value: string) => type | unknown) | undefined\n  key?: string | undefined\n  serialize?: (<type>(value: type | any) => string) | undefined\n  storage?: Compute<BaseStorage> | undefined\n}\n\nexport function createStorage<\n  itemMap extends Record<string, unknown> = Record<string, unknown>,\n  storageItemMap extends StorageItemMap = StorageItemMap & itemMap,\n>(parameters: CreateStorageParameters): Compute<Storage<storageItemMap>> {\n  const {\n    deserialize = deserialize_,\n    key: prefix = 'wagmi',\n    serialize = serialize_,\n    storage = noopStorage,\n  } = parameters\n\n  function unwrap<type>(value: type): type | Promise<type> {\n    if (value instanceof Promise) return value.then((x) => x).catch(() => null)\n    return value\n  }\n\n  return {\n    ...storage,\n    key: prefix,\n    async getItem(key, defaultValue) {\n      const value = storage.getItem(`${prefix}.${key as string}`)\n      const unwrapped = await unwrap(value)\n      if (unwrapped) return deserialize(unwrapped) ?? null\n      return (defaultValue ?? null) as any\n    },\n    async setItem(key, value) {\n      const storageKey = `${prefix}.${key as string}`\n      if (value === null) await unwrap(storage.removeItem(storageKey))\n      else await unwrap(storage.setItem(storageKey, serialize(value)))\n    },\n    async removeItem(key) {\n      await unwrap(storage.removeItem(`${prefix}.${key as string}`))\n    },\n  }\n}\n\nexport const noopStorage = {\n  getItem: () => null,\n  setItem: () => {},\n  removeItem: () => {},\n} satisfies BaseStorage\n"],"names":[],"mappings":";;;;;;;;;AAiDM,SAAU,cAGd,UAAmC;IACnC,MAAM,EACJ,cAAc,sKAAA,CAAA,cAAY,EAC1B,KAAK,SAAS,OAAO,EACrB,YAAY,oKAAA,CAAA,YAAU,EACtB,UAAU,WAAW,EACtB,GAAG;IAEJ,SAAS,OAAa,KAAW;QAC/B,IAAI,iBAAiB,SAAS,OAAO,MAAM,IAAI,CAAC,CAAC,IAAM,GAAG,KAAK,CAAC,IAAM;QACtE,OAAO;IACT;IAEA,OAAO;QACL,GAAG,OAAO;QACV,KAAK;QACL,MAAM,SAAQ,GAAG,EAAE,YAAY;YAC7B,MAAM,QAAQ,QAAQ,OAAO,CAAC,CAAA,EAAG,OAAM,CAAA,EAAI,IAAa,CAAE;YAC1D,MAAM,YAAY,MAAM,OAAO;YAC/B,IAAI,WAAW,OAAO,YAAY,cAAc;YAChD,OAAQ,gBAAgB;QAC1B;QACA,MAAM,SAAQ,GAAG,EAAE,KAAK;YACtB,MAAM,aAAa,CAAA,EAAG,OAAM,CAAA,EAAI,IAAa,CAAE;YAC/C,IAAI,UAAU,MAAM,MAAM,OAAO,QAAQ,UAAU,CAAC;iBAC/C,MAAM,OAAO,QAAQ,OAAO,CAAC,YAAY,UAAU;QAC1D;QACA,MAAM,YAAW,GAAG;YAClB,MAAM,OAAO,QAAQ,UAAU,CAAC,CAAA,EAAG,OAAM,CAAA,EAAI,IAAa,CAAE;QAC9D;;AAEJ;AAEO,MAAM,cAAc;IACzB,SAAS,IAAM;IACf,SAAS,KAAO;IAChB,YAAY,KAAO"}},
    {"offset": {"line": 995, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1000, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/utils/uid.ts"],"sourcesContent":["const size = 256\nlet index = size\nlet buffer: string\n\nexport function uid(length = 11) {\n  if (!buffer || index + length > size * 2) {\n    buffer = ''\n    index = 0\n    for (let i = 0; i < size; i++) {\n      buffer += ((256 + Math.random() * 256) | 0).toString(16).substring(1)\n    }\n  }\n  return buffer.substring(index, index++ + length)\n}\n"],"names":[],"mappings":";;;AAAA,MAAM,OAAO;AACb,IAAI,QAAQ;AACZ,IAAI;AAEE,SAAU,IAAI,SAAS,EAAE;IAC7B,IAAI,CAAC,UAAU,QAAQ,SAAS,OAAO,GAAG;QACxC,SAAS;QACT,QAAQ;QACR,IAAK,IAAI,IAAI,GAAG,IAAI,MAAM,IAAK;YAC7B,UAAU,CAAC,AAAC,MAAM,KAAK,MAAM,KAAK,MAAO,CAAC,EAAE,QAAQ,CAAC,IAAI,SAAS,CAAC;QACrE;IACF;IACA,OAAO,OAAO,SAAS,CAAC,OAAO,UAAU;AAC3C"}},
    {"offset": {"line": 1016, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1021, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/createConfig.ts"],"sourcesContent":["import {\n  type EIP6963ProviderDetail,\n  type Store as MipdStore,\n  createStore as createMipd,\n} from 'mipd'\nimport {\n  type Address,\n  type Chain,\n  type Client,\n  type EIP1193RequestFn,\n  createClient,\n  type ClientConfig as viem_ClientConfig,\n  type Transport as viem_Transport,\n} from 'viem'\nimport { persist, subscribeWithSelector } from 'zustand/middleware'\nimport { type Mutate, type StoreApi, createStore } from 'zustand/vanilla'\n\nimport type {\n  ConnectorEventMap,\n  CreateConnectorFn,\n} from './connectors/createConnector.js'\nimport { injected } from './connectors/injected.js'\nimport { type Emitter, type EventData, createEmitter } from './createEmitter.js'\nimport { type Storage, createStorage, noopStorage } from './createStorage.js'\nimport { ChainNotConfiguredError } from './errors/config.js'\nimport type {\n  Compute,\n  ExactPartial,\n  LooseOmit,\n  OneOf,\n  RemoveUndefined,\n} from './types/utils.js'\nimport { uid } from './utils/uid.js'\nimport { version } from './version.js'\n\nexport type CreateConfigParameters<\n  chains extends readonly [Chain, ...Chain[]] = readonly [Chain, ...Chain[]],\n  transports extends Record<chains[number]['id'], Transport> = Record<\n    chains[number]['id'],\n    Transport\n  >,\n> = Compute<\n  {\n    chains: chains\n    connectors?: CreateConnectorFn[] | undefined\n    multiInjectedProviderDiscovery?: boolean | undefined\n    storage?: Storage | null | undefined\n    ssr?: boolean | undefined\n    syncConnectedChain?: boolean | undefined\n  } & OneOf<\n    | ({ transports: transports } & {\n        [key in keyof ClientConfig]?:\n          | ClientConfig[key]\n          | { [_ in chains[number]['id']]?: ClientConfig[key] | undefined }\n          | undefined\n      })\n    | {\n        client(parameters: { chain: chains[number] }): Client<\n          transports[chains[number]['id']],\n          chains[number]\n        >\n      }\n  >\n>\n\nexport function createConfig<\n  const chains extends readonly [Chain, ...Chain[]],\n  transports extends Record<chains[number]['id'], Transport>,\n>(\n  parameters: CreateConfigParameters<chains, transports>,\n): Config<chains, transports> {\n  const {\n    multiInjectedProviderDiscovery = true,\n    storage = createStorage({\n      storage:\n        typeof window !== 'undefined' && window.localStorage\n          ? window.localStorage\n          : noopStorage,\n    }),\n    syncConnectedChain = true,\n    ssr = false,\n    ...rest\n  } = parameters\n\n  /////////////////////////////////////////////////////////////////////////////////////////////////\n  // Set up connectors, clients, etc.\n  /////////////////////////////////////////////////////////////////////////////////////////////////\n\n  const mipd =\n    typeof window !== 'undefined' && multiInjectedProviderDiscovery\n      ? createMipd()\n      : undefined\n\n  const chains = createStore(() => rest.chains)\n  const connectors = createStore(() => {\n    const collection = []\n    const rdnsSet = new Set<string>()\n    for (const connectorFns of rest.connectors ?? []) {\n      const connector = setup(connectorFns)\n      collection.push(connector)\n      if (!ssr && connector.rdns) rdnsSet.add(connector.rdns)\n    }\n    if (!ssr && mipd) {\n      const providers = mipd.getProviders()\n      for (const provider of providers) {\n        if (rdnsSet.has(provider.info.rdns)) continue\n        collection.push(setup(providerDetailToConnector(provider)))\n      }\n    }\n    return collection\n  })\n  function setup(connectorFn: CreateConnectorFn): Connector {\n    // Set up emitter with uid and add to connector so they are \"linked\" together.\n    const emitter = createEmitter<ConnectorEventMap>(uid())\n    const connector = {\n      ...connectorFn({\n        emitter,\n        chains: chains.getState(),\n        storage,\n        transports: rest.transports,\n      }),\n      emitter,\n      uid: emitter.uid,\n    }\n\n    // Start listening for `connect` events on connector setup\n    // This allows connectors to \"connect\" themselves without user interaction (e.g. MetaMask's \"Manually connect to current site\")\n    emitter.on('connect', connect)\n    connector.setup?.()\n\n    return connector\n  }\n  function providerDetailToConnector(providerDetail: EIP6963ProviderDetail) {\n    const { info } = providerDetail\n    const provider = providerDetail.provider as any\n    return injected({ target: { ...info, id: info.rdns, provider } })\n  }\n\n  const clients = new Map<number, Client<Transport, chains[number]>>()\n  function getClient<chainId extends chains[number]['id']>(\n    config: { chainId?: chainId | chains[number]['id'] | undefined } = {},\n  ): Client<Transport, Extract<chains[number], { id: chainId }>> {\n    const chainId = config.chainId ?? store.getState().chainId\n    const chain = chains.getState().find((x) => x.id === chainId)\n\n    // chainId specified and not configured\n    if (config.chainId && !chain) throw new ChainNotConfiguredError()\n\n    // If the target chain is not configured, use the client of the current chain.\n    type Return = Client<Transport, Extract<chains[number], { id: chainId }>>\n    {\n      const client = clients.get(store.getState().chainId)\n      if (client && !chain) return client as Return\n      if (!chain) throw new ChainNotConfiguredError()\n    }\n\n    // If a memoized client exists for a chain id, use that.\n    {\n      const client = clients.get(chainId)\n      if (client) return client as Return\n    }\n\n    let client: Client<Transport, chains[number]>\n    if (rest.client) client = rest.client({ chain })\n    else {\n      const chainId = chain.id as chains[number]['id']\n      const chainIds = chains.getState().map((x) => x.id)\n      // Grab all properties off `rest` and resolve for use in `createClient`\n      const properties: Partial<viem_ClientConfig> = {}\n      const entries = Object.entries(rest) as [keyof typeof rest, any][]\n\n      for (const [key, value] of entries) {\n        if (\n          key === 'chains' ||\n          key === 'client' ||\n          key === 'connectors' ||\n          key === 'transports'\n        )\n          continue\n\n        if (typeof value === 'object') {\n          // check if value is chainId-specific since some values can be objects\n          // e.g. { batch: { multicall: { batchSize: 1024 } } }\n          if (chainId in value) properties[key] = value[chainId]\n          else {\n            // check if value is chainId-specific, but does not have value for current chainId\n            const hasChainSpecificValue = chainIds.some((x) => x in value)\n            if (hasChainSpecificValue) continue\n            properties[key] = value\n          }\n        } else properties[key] = value\n      }\n\n      client = createClient({\n        ...properties,\n        chain,\n        batch: properties.batch ?? { multicall: true },\n        transport: (parameters) =>\n          rest.transports[chainId]({ ...parameters, connectors }),\n      })\n    }\n\n    clients.set(chainId, client)\n    return client as Return\n  }\n\n  /////////////////////////////////////////////////////////////////////////////////////////////////\n  // Create store\n  /////////////////////////////////////////////////////////////////////////////////////////////////\n\n  function getInitialState(): State {\n    return {\n      chainId: chains.getState()[0].id,\n      connections: new Map<string, Connection>(),\n      current: null,\n      status: 'disconnected',\n    }\n  }\n\n  let currentVersion: number\n  const prefix = '0.0.0-canary-'\n  if (version.startsWith(prefix))\n    currentVersion = Number.parseInt(version.replace(prefix, ''))\n  // use package major version to version store\n  else currentVersion = Number.parseInt(version.split('.')[0] ?? '0')\n\n  const store = createStore(\n    subscribeWithSelector(\n      // only use persist middleware if storage exists\n      storage\n        ? persist(getInitialState, {\n            migrate(persistedState, version) {\n              if (version === currentVersion) return persistedState as State\n\n              const initialState = getInitialState()\n              const chainId = validatePersistedChainId(\n                persistedState,\n                initialState.chainId,\n              )\n              return { ...initialState, chainId }\n            },\n            name: 'store',\n            partialize(state) {\n              // Only persist \"critical\" store properties to preserve storage size.\n              return {\n                connections: {\n                  __type: 'Map',\n                  value: Array.from(state.connections.entries()).map(\n                    ([key, connection]) => {\n                      const { id, name, type, uid } = connection.connector\n                      const connector = { id, name, type, uid }\n                      return [key, { ...connection, connector }]\n                    },\n                  ),\n                } as unknown as PartializedState['connections'],\n                chainId: state.chainId,\n                current: state.current,\n              } satisfies PartializedState\n            },\n            merge(persistedState, currentState) {\n              // `status` should not be persisted as it messes with reconnection\n              if (\n                typeof persistedState === 'object' &&\n                persistedState &&\n                'status' in persistedState\n              )\n                delete persistedState.status\n              // Make sure persisted `chainId` is valid\n              const chainId = validatePersistedChainId(\n                persistedState,\n                currentState.chainId,\n              )\n              return {\n                ...currentState,\n                ...(persistedState as object),\n                chainId,\n              }\n            },\n            skipHydration: ssr,\n            storage: storage as Storage<Record<string, unknown>>,\n            version: currentVersion,\n          })\n        : getInitialState,\n    ),\n  )\n  store.setState(getInitialState())\n\n  function validatePersistedChainId(\n    persistedState: unknown,\n    defaultChainId: number,\n  ) {\n    return persistedState &&\n      typeof persistedState === 'object' &&\n      'chainId' in persistedState &&\n      typeof persistedState.chainId === 'number' &&\n      chains.getState().some((x) => x.id === persistedState.chainId)\n      ? persistedState.chainId\n      : defaultChainId\n  }\n\n  /////////////////////////////////////////////////////////////////////////////////////////////////\n  // Subscribe to changes\n  /////////////////////////////////////////////////////////////////////////////////////////////////\n\n  // Update default chain when connector chain changes\n  if (syncConnectedChain)\n    store.subscribe(\n      ({ connections, current }) =>\n        current ? connections.get(current)?.chainId : undefined,\n      (chainId) => {\n        // If chain is not configured, then don't switch over to it.\n        const isChainConfigured = chains\n          .getState()\n          .some((x) => x.id === chainId)\n        if (!isChainConfigured) return\n\n        return store.setState((x) => ({\n          ...x,\n          chainId: chainId ?? x.chainId,\n        }))\n      },\n    )\n\n  // EIP-6963 subscribe for new wallet providers\n  mipd?.subscribe((providerDetails) => {\n    const connectorIdSet = new Set()\n    const connectorRdnsSet = new Set()\n    for (const connector of connectors.getState()) {\n      connectorIdSet.add(connector.id)\n      if (connector.rdns) connectorRdnsSet.add(connector.rdns)\n    }\n\n    const newConnectors: Connector[] = []\n    for (const providerDetail of providerDetails) {\n      if (connectorRdnsSet.has(providerDetail.info.rdns)) continue\n      const connector = setup(providerDetailToConnector(providerDetail))\n      if (connectorIdSet.has(connector.id)) continue\n      newConnectors.push(connector)\n    }\n\n    if (storage && !store.persist.hasHydrated()) return\n    connectors.setState((x) => [...x, ...newConnectors], true)\n  })\n\n  /////////////////////////////////////////////////////////////////////////////////////////////////\n  // Emitter listeners\n  /////////////////////////////////////////////////////////////////////////////////////////////////\n\n  function change(data: EventData<ConnectorEventMap, 'change'>) {\n    store.setState((x) => {\n      const connection = x.connections.get(data.uid)\n      if (!connection) return x\n      return {\n        ...x,\n        connections: new Map(x.connections).set(data.uid, {\n          accounts:\n            (data.accounts as readonly [Address, ...Address[]]) ??\n            connection.accounts,\n          chainId: data.chainId ?? connection.chainId,\n          connector: connection.connector,\n        }),\n      }\n    })\n  }\n  function connect(data: EventData<ConnectorEventMap, 'connect'>) {\n    // Disable handling if reconnecting/connecting\n    if (\n      store.getState().status === 'connecting' ||\n      store.getState().status === 'reconnecting'\n    )\n      return\n\n    store.setState((x) => {\n      const connector = connectors.getState().find((x) => x.uid === data.uid)\n      if (!connector) return x\n\n      if (connector.emitter.listenerCount('connect'))\n        connector.emitter.off('connect', change)\n      if (!connector.emitter.listenerCount('change'))\n        connector.emitter.on('change', change)\n      if (!connector.emitter.listenerCount('disconnect'))\n        connector.emitter.on('disconnect', disconnect)\n\n      return {\n        ...x,\n        connections: new Map(x.connections).set(data.uid, {\n          accounts: data.accounts as readonly [Address, ...Address[]],\n          chainId: data.chainId,\n          connector: connector,\n        }),\n        current: data.uid,\n        status: 'connected',\n      }\n    })\n  }\n  function disconnect(data: EventData<ConnectorEventMap, 'disconnect'>) {\n    store.setState((x) => {\n      const connection = x.connections.get(data.uid)\n      if (connection) {\n        const connector = connection.connector\n        if (connector.emitter.listenerCount('change'))\n          connection.connector.emitter.off('change', change)\n        if (connector.emitter.listenerCount('disconnect'))\n          connection.connector.emitter.off('disconnect', disconnect)\n        if (!connector.emitter.listenerCount('connect'))\n          connection.connector.emitter.on('connect', connect)\n      }\n\n      x.connections.delete(data.uid)\n\n      if (x.connections.size === 0)\n        return {\n          ...x,\n          connections: new Map(),\n          current: null,\n          status: 'disconnected',\n        }\n\n      const nextConnection = x.connections.values().next().value as Connection\n      return {\n        ...x,\n        connections: new Map(x.connections),\n        current: nextConnection.connector.uid,\n      }\n    })\n  }\n\n  return {\n    get chains() {\n      return chains.getState() as chains\n    },\n    get connectors() {\n      return connectors.getState()\n    },\n    storage,\n\n    getClient,\n    get state() {\n      return store.getState() as unknown as State<chains>\n    },\n    setState(value) {\n      let newState: State\n      if (typeof value === 'function') newState = value(store.getState() as any)\n      else newState = value\n\n      // Reset state if it got set to something not matching the base state\n      const initialState = getInitialState()\n      if (typeof newState !== 'object') newState = initialState\n      const isCorrupt = Object.keys(initialState).some((x) => !(x in newState))\n      if (isCorrupt) newState = initialState\n\n      store.setState(newState, true)\n    },\n    subscribe(selector, listener, options) {\n      return store.subscribe(\n        selector as unknown as (state: State) => any,\n        listener,\n        options\n          ? ({\n              ...options,\n              fireImmediately: options.emitImmediately,\n              // Workaround cast since Zustand does not support `'exactOptionalPropertyTypes'`\n            } as RemoveUndefined<typeof options>)\n          : undefined,\n      )\n    },\n\n    _internal: {\n      mipd,\n      store,\n      ssr: Boolean(ssr),\n      syncConnectedChain,\n      transports: rest.transports as transports,\n      chains: {\n        setState(value) {\n          const nextChains = (\n            typeof value === 'function' ? value(chains.getState()) : value\n          ) as chains\n          if (nextChains.length === 0) return\n          return chains.setState(nextChains, true)\n        },\n        subscribe(listener) {\n          return chains.subscribe(listener)\n        },\n      },\n      connectors: {\n        providerDetailToConnector,\n        setup,\n        setState(value) {\n          return connectors.setState(\n            typeof value === 'function' ? value(connectors.getState()) : value,\n            true,\n          )\n        },\n        subscribe(listener) {\n          return connectors.subscribe(listener)\n        },\n      },\n      events: { change, connect, disconnect },\n    },\n  }\n}\n\n/////////////////////////////////////////////////////////////////////////////////////////////////\n// Types\n/////////////////////////////////////////////////////////////////////////////////////////////////\n\nexport type Config<\n  chains extends readonly [Chain, ...Chain[]] = readonly [Chain, ...Chain[]],\n  transports extends Record<chains[number]['id'], Transport> = Record<\n    chains[number]['id'],\n    Transport\n  >,\n> = {\n  readonly chains: chains\n  readonly connectors: readonly Connector[]\n  readonly storage: Storage | null\n\n  readonly state: State<chains>\n  setState<tchains extends readonly [Chain, ...Chain[]] = chains>(\n    value: State<tchains> | ((state: State<tchains>) => State<tchains>),\n  ): void\n  subscribe<state>(\n    selector: (state: State<chains>) => state,\n    listener: (state: state, previousState: state) => void,\n    options?:\n      | {\n          emitImmediately?: boolean | undefined\n          equalityFn?: ((a: state, b: state) => boolean) | undefined\n        }\n      | undefined,\n  ): () => void\n\n  getClient<chainId extends chains[number]['id']>(parameters?: {\n    chainId?: chainId | chains[number]['id'] | undefined\n  }): Client<transports[chainId], Extract<chains[number], { id: chainId }>>\n\n  /**\n   * Not part of versioned API, proceed with caution.\n   * @internal\n   */\n  _internal: Internal<chains, transports>\n}\n\ntype Internal<\n  chains extends readonly [Chain, ...Chain[]] = readonly [Chain, ...Chain[]],\n  transports extends Record<chains[number]['id'], Transport> = Record<\n    chains[number]['id'],\n    Transport\n  >,\n> = {\n  readonly mipd: MipdStore | undefined\n  readonly store: Mutate<StoreApi<any>, [['zustand/persist', any]]>\n  readonly ssr: boolean\n  readonly syncConnectedChain: boolean\n  readonly transports: transports\n\n  chains: {\n    setState(\n      value:\n        | readonly [Chain, ...Chain[]]\n        | ((\n            state: readonly [Chain, ...Chain[]],\n          ) => readonly [Chain, ...Chain[]]),\n    ): void\n    subscribe(\n      listener: (\n        state: readonly [Chain, ...Chain[]],\n        prevState: readonly [Chain, ...Chain[]],\n      ) => void,\n    ): () => void\n  }\n  connectors: {\n    providerDetailToConnector(\n      providerDetail: EIP6963ProviderDetail,\n    ): CreateConnectorFn\n    setup(connectorFn: CreateConnectorFn): Connector\n    setState(value: Connector[] | ((state: Connector[]) => Connector[])): void\n    subscribe(\n      listener: (state: Connector[], prevState: Connector[]) => void,\n    ): () => void\n  }\n  events: {\n    change(data: EventData<ConnectorEventMap, 'change'>): void\n    connect(data: EventData<ConnectorEventMap, 'connect'>): void\n    disconnect(data: EventData<ConnectorEventMap, 'disconnect'>): void\n  }\n}\n\nexport type State<\n  chains extends readonly [Chain, ...Chain[]] = readonly [Chain, ...Chain[]],\n> = {\n  chainId: chains[number]['id']\n  connections: Map<string, Connection>\n  current: string | null\n  status: 'connected' | 'connecting' | 'disconnected' | 'reconnecting'\n}\n\nexport type PartializedState = Compute<\n  ExactPartial<Pick<State, 'chainId' | 'connections' | 'current' | 'status'>>\n>\n\nexport type Connection = {\n  accounts: readonly [Address, ...Address[]]\n  chainId: number\n  connector: Connector\n}\n\nexport type Connector = ReturnType<CreateConnectorFn> & {\n  emitter: Emitter<ConnectorEventMap>\n  uid: string\n}\n\nexport type Transport<\n  type extends string = string,\n  rpcAttributes = Record<string, any>,\n  eip1193RequestFn extends EIP1193RequestFn = EIP1193RequestFn,\n> = (\n  params: Parameters<\n    viem_Transport<type, rpcAttributes, eip1193RequestFn>\n  >[0] & {\n    connectors?: StoreApi<Connector[]> | undefined\n  },\n) => ReturnType<viem_Transport<type, rpcAttributes, eip1193RequestFn>>\n\ntype ClientConfig = LooseOmit<\n  viem_ClientConfig,\n  'account' | 'chain' | 'key' | 'name' | 'transport' | 'type'\n>\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1387, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1392, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/core/src/utils/extractRpcUrls.ts"],"sourcesContent":["import type { Chain, Transport } from 'viem'\n\ntype ExtractRpcUrlsParameters = {\n  transports?: Record<string, Transport> | undefined\n  chain: Chain\n}\n\nexport function extractRpcUrls(parameters: ExtractRpcUrlsParameters) {\n  const { chain } = parameters\n  const fallbackUrl = chain.rpcUrls.default.http[0]\n\n  if (!parameters.transports) return [fallbackUrl]\n\n  const transport = parameters.transports?.[chain.id]?.({ chain })\n  const transports = (transport?.value?.transports as NonNullable<\n    typeof transport\n  >[]) || [transport]\n  return transports.map(({ value }) => value?.url || fallbackUrl)\n}\n"],"names":[],"mappings":";;;AAOM,SAAU,eAAe,UAAoC;IACjE,MAAM,EAAE,KAAK,EAAE,GAAG;IAClB,MAAM,cAAc,MAAM,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;IAEjD,IAAI,CAAC,WAAW,UAAU,EAAE,OAAO;QAAC;KAAY;IAEhD,MAAM,YAAY,WAAW,UAAU,EAAE,CAAC,MAAM,EAAE,CAAC,GAAG;QAAE;IAAK;IAC7D,MAAM,aAAc,WAAW,OAAO,cAE9B;QAAC;KAAU;IACnB,OAAO,WAAW,GAAG,CAAC,CAAC,EAAE,KAAK,EAAE,GAAK,OAAO,OAAO;AACrD"}},
    {"offset": {"line": 1409, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1414, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/connectors/src/coinbaseWallet.ts"],"sourcesContent":["import type {\n  CoinbaseWalletSDK,\n  Preference,\n  ProviderInterface,\n} from '@coinbase/wallet-sdk'\nimport {\n  ChainNotConfiguredError,\n  type Connector,\n  createConnector,\n} from '@wagmi/core'\nimport type { Compute, Mutable, Omit } from '@wagmi/core/internal'\nimport type {\n  CoinbaseWalletProvider as CBW_Provider,\n  CoinbaseWalletSDK as CBW_SDK,\n} from 'cbw-sdk'\nimport {\n  type AddEthereumChainParameter,\n  type Hex,\n  type ProviderRpcError,\n  SwitchChainError,\n  UserRejectedRequestError,\n  getAddress,\n  numberToHex,\n} from 'viem'\n\ntype Version = '3' | '4'\n\nexport type CoinbaseWalletParameters<version extends Version = '3'> =\n  version extends '4'\n    ? Compute<\n        {\n          headlessMode?: false | undefined\n          /** Coinbase Wallet SDK version */\n          version?: version | '3' | undefined\n        } & Version4Parameters\n      >\n    : Compute<\n        {\n          /**\n           * @deprecated `headlessMode` will be removed in the next major version. Upgrade to `version: '4'`.\n           */\n          headlessMode?: true | undefined\n          /**\n           * Coinbase Wallet SDK version\n           * @deprecated Version 3 will be removed in the next major version. Upgrade to `version: '4'`.\n           * @default '4'\n           */\n          version?: version | '4' | undefined\n        } & Version3Parameters\n      >\n\ncoinbaseWallet.type = 'coinbaseWallet' as const\nexport function coinbaseWallet<version extends Version>(\n  parameters: CoinbaseWalletParameters<version> = {} as any,\n): version extends '4'\n  ? ReturnType<typeof version4>\n  : ReturnType<typeof version3> {\n  if (parameters.version === '3' || parameters.headlessMode)\n    return version3(parameters as Version3Parameters) as any\n  return version4(parameters as Version4Parameters) as any\n}\n\ntype Version4Parameters = Mutable<\n  Omit<\n    ConstructorParameters<typeof CoinbaseWalletSDK>[0],\n    'appChainIds' // set via wagmi config\n  > & {\n    /**\n     * Preference for the type of wallet to display.\n     * @default 'all'\n     */\n    preference?: Preference['options'] | undefined\n  }\n>\n\nfunction version4(parameters: Version4Parameters) {\n  type Provider = ProviderInterface & {\n    // for backwards compatibility\n    close?(): void\n  }\n\n  let sdk: CoinbaseWalletSDK | undefined\n  let walletProvider: Provider | undefined\n\n  let accountsChanged: Connector['onAccountsChanged'] | undefined\n  let chainChanged: Connector['onChainChanged'] | undefined\n  let disconnect: Connector['onDisconnect'] | undefined\n\n  return createConnector<Provider>((config) => ({\n    id: 'coinbaseWalletSDK',\n    name: 'Coinbase Wallet',\n    rdns: 'com.coinbase.wallet',\n    supportsSimulation: true,\n    type: coinbaseWallet.type,\n    async connect({ chainId } = {}) {\n      try {\n        const provider = await this.getProvider()\n        const accounts = (\n          (await provider.request({\n            method: 'eth_requestAccounts',\n          })) as string[]\n        ).map((x) => getAddress(x))\n\n        if (!accountsChanged) {\n          accountsChanged = this.onAccountsChanged.bind(this)\n          provider.on('accountsChanged', accountsChanged)\n        }\n        if (!chainChanged) {\n          chainChanged = this.onChainChanged.bind(this)\n          provider.on('chainChanged', chainChanged)\n        }\n        if (!disconnect) {\n          disconnect = this.onDisconnect.bind(this)\n          provider.on('disconnect', disconnect)\n        }\n\n        // Switch to chain if provided\n        let currentChainId = await this.getChainId()\n        if (chainId && currentChainId !== chainId) {\n          const chain = await this.switchChain!({ chainId }).catch((error) => {\n            if (error.code === UserRejectedRequestError.code) throw error\n            return { id: currentChainId }\n          })\n          currentChainId = chain?.id ?? currentChainId\n        }\n\n        return { accounts, chainId: currentChainId }\n      } catch (error) {\n        if (\n          /(user closed modal|accounts received is empty|user denied account|request rejected)/i.test(\n            (error as Error).message,\n          )\n        )\n          throw new UserRejectedRequestError(error as Error)\n        throw error\n      }\n    },\n    async disconnect() {\n      const provider = await this.getProvider()\n\n      if (accountsChanged) {\n        provider.removeListener('accountsChanged', accountsChanged)\n        accountsChanged = undefined\n      }\n      if (chainChanged) {\n        provider.removeListener('chainChanged', chainChanged)\n        chainChanged = undefined\n      }\n      if (disconnect) {\n        provider.removeListener('disconnect', disconnect)\n        disconnect = undefined\n      }\n\n      provider.disconnect()\n      provider.close?.()\n    },\n    async getAccounts() {\n      const provider = await this.getProvider()\n      return (\n        (await provider.request({\n          method: 'eth_accounts',\n        })) as string[]\n      ).map((x) => getAddress(x))\n    },\n    async getChainId() {\n      const provider = await this.getProvider()\n      const chainId = (await provider.request({\n        method: 'eth_chainId',\n      })) as Hex\n      return Number(chainId)\n    },\n    async getProvider() {\n      if (!walletProvider) {\n        // Unwrapping import for Vite compatibility.\n        // See: https://github.com/vitejs/vite/issues/9703\n        const CoinbaseWalletSDK = await (async () => {\n          const { default: SDK } = await import('@coinbase/wallet-sdk')\n          if (typeof SDK !== 'function' && typeof SDK.default === 'function')\n            return SDK.default\n          return SDK as unknown as typeof SDK.default\n        })()\n\n        sdk = new CoinbaseWalletSDK({\n          ...parameters,\n          appChainIds: config.chains.map((x) => x.id),\n        })\n\n        walletProvider = sdk.makeWeb3Provider({\n          ...parameters,\n          options: parameters.preference ?? 'all',\n        })\n      }\n\n      return walletProvider\n    },\n    async isAuthorized() {\n      try {\n        const accounts = await this.getAccounts()\n        return !!accounts.length\n      } catch {\n        return false\n      }\n    },\n    async switchChain({ addEthereumChainParameter, chainId }) {\n      const chain = config.chains.find((chain) => chain.id === chainId)\n      if (!chain) throw new SwitchChainError(new ChainNotConfiguredError())\n\n      const provider = await this.getProvider()\n\n      try {\n        await provider.request({\n          method: 'wallet_switchEthereumChain',\n          params: [{ chainId: numberToHex(chain.id) }],\n        })\n        return chain\n      } catch (error) {\n        // Indicates chain is not added to provider\n        if ((error as ProviderRpcError).code === 4902) {\n          try {\n            let blockExplorerUrls: string[] | undefined\n            if (addEthereumChainParameter?.blockExplorerUrls)\n              blockExplorerUrls = addEthereumChainParameter.blockExplorerUrls\n            else\n              blockExplorerUrls = chain.blockExplorers?.default.url\n                ? [chain.blockExplorers?.default.url]\n                : []\n\n            let rpcUrls: readonly string[]\n            if (addEthereumChainParameter?.rpcUrls?.length)\n              rpcUrls = addEthereumChainParameter.rpcUrls\n            else rpcUrls = [chain.rpcUrls.default?.http[0] ?? '']\n\n            const addEthereumChain = {\n              blockExplorerUrls,\n              chainId: numberToHex(chainId),\n              chainName: addEthereumChainParameter?.chainName ?? chain.name,\n              iconUrls: addEthereumChainParameter?.iconUrls,\n              nativeCurrency:\n                addEthereumChainParameter?.nativeCurrency ??\n                chain.nativeCurrency,\n              rpcUrls,\n            } satisfies AddEthereumChainParameter\n\n            await provider.request({\n              method: 'wallet_addEthereumChain',\n              params: [addEthereumChain],\n            })\n\n            return chain\n          } catch (error) {\n            throw new UserRejectedRequestError(error as Error)\n          }\n        }\n\n        throw new SwitchChainError(error as Error)\n      }\n    },\n    onAccountsChanged(accounts) {\n      if (accounts.length === 0) this.onDisconnect()\n      else\n        config.emitter.emit('change', {\n          accounts: accounts.map((x) => getAddress(x)),\n        })\n    },\n    onChainChanged(chain) {\n      const chainId = Number(chain)\n      config.emitter.emit('change', { chainId })\n    },\n    async onDisconnect(_error) {\n      config.emitter.emit('disconnect')\n\n      const provider = await this.getProvider()\n      if (accountsChanged) {\n        provider.removeListener('accountsChanged', accountsChanged)\n        accountsChanged = undefined\n      }\n      if (chainChanged) {\n        provider.removeListener('chainChanged', chainChanged)\n        chainChanged = undefined\n      }\n      if (disconnect) {\n        provider.removeListener('disconnect', disconnect)\n        disconnect = undefined\n      }\n    },\n  }))\n}\n\ntype Version3Parameters = Mutable<\n  Omit<\n    ConstructorParameters<typeof CBW_SDK>[0],\n    'reloadOnDisconnect' // remove property since TSDoc says default is `true`\n  >\n> & {\n  /**\n   * Fallback Ethereum JSON RPC URL\n   * @default \"\"\n   */\n  jsonRpcUrl?: string | undefined\n  /**\n   * Fallback Ethereum Chain ID\n   * @default 1\n   */\n  chainId?: number | undefined\n  /**\n   * Whether or not to reload dapp automatically after disconnect.\n   * @default false\n   */\n  reloadOnDisconnect?: boolean | undefined\n}\n\nfunction version3(parameters: Version3Parameters) {\n  const reloadOnDisconnect = false\n\n  type Provider = CBW_Provider\n\n  let sdk: CBW_SDK | undefined\n  let walletProvider: Provider | undefined\n\n  let accountsChanged: Connector['onAccountsChanged'] | undefined\n  let chainChanged: Connector['onChainChanged'] | undefined\n  let disconnect: Connector['onDisconnect'] | undefined\n\n  return createConnector<Provider>((config) => ({\n    id: 'coinbaseWalletSDK',\n    name: 'Coinbase Wallet',\n    supportsSimulation: true,\n    type: coinbaseWallet.type,\n    async connect({ chainId } = {}) {\n      try {\n        const provider = await this.getProvider()\n        const accounts = (\n          (await provider.request({\n            method: 'eth_requestAccounts',\n          })) as string[]\n        ).map((x) => getAddress(x))\n\n        if (!accountsChanged) {\n          accountsChanged = this.onAccountsChanged.bind(this)\n          provider.on('accountsChanged', accountsChanged)\n        }\n        if (!chainChanged) {\n          chainChanged = this.onChainChanged.bind(this)\n          provider.on('chainChanged', chainChanged)\n        }\n        if (!disconnect) {\n          disconnect = this.onDisconnect.bind(this)\n          provider.on('disconnect', disconnect)\n        }\n\n        // Switch to chain if provided\n        let currentChainId = await this.getChainId()\n        if (chainId && currentChainId !== chainId) {\n          const chain = await this.switchChain!({ chainId }).catch((error) => {\n            if (error.code === UserRejectedRequestError.code) throw error\n            return { id: currentChainId }\n          })\n          currentChainId = chain?.id ?? currentChainId\n        }\n\n        return { accounts, chainId: currentChainId }\n      } catch (error) {\n        if (\n          /(user closed modal|accounts received is empty|user denied account)/i.test(\n            (error as Error).message,\n          )\n        )\n          throw new UserRejectedRequestError(error as Error)\n        throw error\n      }\n    },\n    async disconnect() {\n      const provider = await this.getProvider()\n\n      if (accountsChanged) {\n        provider.removeListener('accountsChanged', accountsChanged)\n        accountsChanged = undefined\n      }\n      if (chainChanged) {\n        provider.removeListener('chainChanged', chainChanged)\n        chainChanged = undefined\n      }\n      if (disconnect) {\n        provider.removeListener('disconnect', disconnect)\n        disconnect = undefined\n      }\n\n      provider.disconnect()\n      provider.close()\n    },\n    async getAccounts() {\n      const provider = await this.getProvider()\n      return (\n        await provider.request<string[]>({\n          method: 'eth_accounts',\n        })\n      ).map((x) => getAddress(x))\n    },\n    async getChainId() {\n      const provider = await this.getProvider()\n      const chainId = await provider.request<Hex>({\n        method: 'eth_chainId',\n      })\n      return Number(chainId)\n    },\n    async getProvider() {\n      if (!walletProvider) {\n        // Unwrapping import for Vite compatibility.\n        // See: https://github.com/vitejs/vite/issues/9703\n        const CoinbaseWalletSDK = await (async () => {\n          const { default: SDK } = await import('cbw-sdk')\n          if (typeof SDK !== 'function' && typeof SDK.default === 'function')\n            return SDK.default\n          return SDK as unknown as typeof SDK.default\n        })()\n\n        sdk = new CoinbaseWalletSDK({ ...parameters, reloadOnDisconnect })\n\n        // Force types to retrieve private `walletExtension` method from the Coinbase Wallet SDK.\n        const walletExtensionChainId = (\n          sdk as unknown as {\n            get walletExtension(): { getChainId(): number } | undefined\n          }\n        ).walletExtension?.getChainId()\n\n        const chain =\n          config.chains.find((chain) =>\n            parameters.chainId\n              ? chain.id === parameters.chainId\n              : chain.id === walletExtensionChainId,\n          ) || config.chains[0]\n        const chainId = parameters.chainId || chain?.id\n        const jsonRpcUrl =\n          parameters.jsonRpcUrl || chain?.rpcUrls.default.http[0]\n\n        walletProvider = sdk.makeWeb3Provider(jsonRpcUrl, chainId)\n      }\n\n      return walletProvider\n    },\n    async isAuthorized() {\n      try {\n        const accounts = await this.getAccounts()\n        return !!accounts.length\n      } catch {\n        return false\n      }\n    },\n    async switchChain({ addEthereumChainParameter, chainId }) {\n      const chain = config.chains.find((chain) => chain.id === chainId)\n      if (!chain) throw new SwitchChainError(new ChainNotConfiguredError())\n\n      const provider = await this.getProvider()\n\n      try {\n        await provider.request({\n          method: 'wallet_switchEthereumChain',\n          params: [{ chainId: numberToHex(chain.id) }],\n        })\n        return chain\n      } catch (error) {\n        // Indicates chain is not added to provider\n        if ((error as ProviderRpcError).code === 4902) {\n          try {\n            let blockExplorerUrls: string[] | undefined\n            if (addEthereumChainParameter?.blockExplorerUrls)\n              blockExplorerUrls = addEthereumChainParameter.blockExplorerUrls\n            else\n              blockExplorerUrls = chain.blockExplorers?.default.url\n                ? [chain.blockExplorers?.default.url]\n                : []\n\n            let rpcUrls: readonly string[]\n            if (addEthereumChainParameter?.rpcUrls?.length)\n              rpcUrls = addEthereumChainParameter.rpcUrls\n            else rpcUrls = [chain.rpcUrls.default?.http[0] ?? '']\n\n            const addEthereumChain = {\n              blockExplorerUrls,\n              chainId: numberToHex(chainId),\n              chainName: addEthereumChainParameter?.chainName ?? chain.name,\n              iconUrls: addEthereumChainParameter?.iconUrls,\n              nativeCurrency:\n                addEthereumChainParameter?.nativeCurrency ??\n                chain.nativeCurrency,\n              rpcUrls,\n            } satisfies AddEthereumChainParameter\n\n            await provider.request({\n              method: 'wallet_addEthereumChain',\n              params: [addEthereumChain],\n            })\n\n            return chain\n          } catch (error) {\n            throw new UserRejectedRequestError(error as Error)\n          }\n        }\n\n        throw new SwitchChainError(error as Error)\n      }\n    },\n    onAccountsChanged(accounts) {\n      if (accounts.length === 0) this.onDisconnect()\n      else\n        config.emitter.emit('change', {\n          accounts: accounts.map((x) => getAddress(x)),\n        })\n    },\n    onChainChanged(chain) {\n      const chainId = Number(chain)\n      config.emitter.emit('change', { chainId })\n    },\n    async onDisconnect(_error) {\n      config.emitter.emit('disconnect')\n\n      const provider = await this.getProvider()\n      if (accountsChanged) {\n        provider.removeListener('accountsChanged', accountsChanged)\n        accountsChanged = undefined\n      }\n      if (chainChanged) {\n        provider.removeListener('chainChanged', chainChanged)\n        chainChanged = undefined\n      }\n      if (disconnect) {\n        provider.removeListener('disconnect', disconnect)\n        disconnect = undefined\n      }\n    },\n  }))\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1812, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1817, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/connectors/src/walletConnect.ts"],"sourcesContent":["import {\n  ChainNotConfiguredError,\n  type Connector,\n  ProviderNotFoundError,\n  createConnector,\n  extractRpcUrls,\n} from '@wagmi/core'\nimport type { Compute, ExactPartial, Omit } from '@wagmi/core/internal'\nimport type { EthereumProvider } from '@walletconnect/ethereum-provider'\nimport {\n  type AddEthereumChainParameter,\n  type Address,\n  type ProviderConnectInfo,\n  type ProviderRpcError,\n  type RpcError,\n  SwitchChainError,\n  UserRejectedRequestError,\n  getAddress,\n  numberToHex,\n} from 'viem'\n\ntype WalletConnectConnector = Connector & {\n  onDisplayUri(uri: string): void\n  onSessionDelete(data: { topic: string }): void\n}\n\ntype EthereumProviderOptions = Parameters<(typeof EthereumProvider)['init']>[0]\n\nexport type WalletConnectParameters = Compute<\n  {\n    /**\n     * If a new chain is added to a previously existing configured connector `chains`, this flag\n     * will determine if that chain should be considered as stale. A stale chain is a chain that\n     * WalletConnect has yet to establish a relationship with (e.g. the user has not approved or\n     * rejected the chain).\n     *\n     * This flag mainly affects the behavior when a wallet does not support dynamic chain authorization\n     * with WalletConnect v2.\n     *\n     * If `true` (default), the new chain will be treated as a stale chain. If the user\n     * has yet to establish a relationship (approved/rejected) with this chain in their WalletConnect\n     * session, the connector will disconnect upon the dapp auto-connecting, and the user will have to\n     * reconnect to the dapp (revalidate the chain) in order to approve the newly added chain.\n     * This is the default behavior to avoid an unexpected error upon switching chains which may\n     * be a confusing user experience (e.g. the user will not know they have to reconnect\n     * unless the dapp handles these types of errors).\n     *\n     * If `false`, the new chain will be treated as a potentially valid chain. This means that if the user\n     * has yet to establish a relationship with the chain in their WalletConnect session, wagmi will successfully\n     * auto-connect the user. This comes with the trade-off that the connector will throw an error\n     * when attempting to switch to the unapproved chain if the wallet does not support dynamic session updates.\n     * This may be useful in cases where a dapp constantly\n     * modifies their configured chains, and they do not want to disconnect the user upon\n     * auto-connecting. If the user decides to switch to the unapproved chain, it is important that the\n     * dapp handles this error and prompts the user to reconnect to the dapp in order to approve\n     * the newly added chain.\n     *\n     * @default true\n     */\n    isNewChainsStale?: boolean\n  } & Omit<\n    EthereumProviderOptions,\n    | 'chains'\n    | 'events'\n    | 'optionalChains'\n    | 'optionalEvents'\n    | 'optionalMethods'\n    | 'methods'\n    | 'rpcMap'\n    | 'showQrModal'\n  > &\n    ExactPartial<Pick<EthereumProviderOptions, 'showQrModal'>>\n>\n\nwalletConnect.type = 'walletConnect' as const\nexport function walletConnect(parameters: WalletConnectParameters) {\n  const isNewChainsStale = parameters.isNewChainsStale ?? true\n\n  type Provider = Awaited<ReturnType<(typeof EthereumProvider)['init']>>\n  type Properties = {\n    connect(parameters?: { chainId?: number; pairingTopic?: string }): Promise<{\n      accounts: readonly Address[]\n      chainId: number\n    }>\n    getNamespaceChainsIds(): number[]\n    getRequestedChainsIds(): Promise<number[]>\n    isChainsStale(): Promise<boolean>\n    onConnect(connectInfo: ProviderConnectInfo): void\n    onDisplayUri(uri: string): void\n    onSessionDelete(data: { topic: string }): void\n    setRequestedChainsIds(chains: number[]): void\n    requestedChainsStorageKey: `${string}.requestedChains`\n  }\n  type StorageItem = {\n    [_ in Properties['requestedChainsStorageKey']]: number[]\n  }\n\n  let provider_: Provider | undefined\n  let providerPromise: Promise<typeof provider_>\n  const NAMESPACE = 'eip155'\n\n  let accountsChanged: WalletConnectConnector['onAccountsChanged'] | undefined\n  let chainChanged: WalletConnectConnector['onChainChanged'] | undefined\n  let connect: WalletConnectConnector['onConnect'] | undefined\n  let displayUri: WalletConnectConnector['onDisplayUri'] | undefined\n  let sessionDelete: WalletConnectConnector['onSessionDelete'] | undefined\n  let disconnect: WalletConnectConnector['onDisconnect'] | undefined\n\n  return createConnector<Provider, Properties, StorageItem>((config) => ({\n    id: 'walletConnect',\n    name: 'WalletConnect',\n    type: walletConnect.type,\n    async setup() {\n      const provider = await this.getProvider().catch(() => null)\n      if (!provider) return\n      if (!connect) {\n        connect = this.onConnect.bind(this)\n        provider.on('connect', connect)\n      }\n      if (!sessionDelete) {\n        sessionDelete = this.onSessionDelete.bind(this)\n        provider.on('session_delete', sessionDelete)\n      }\n    },\n    async connect({ chainId, ...rest } = {}) {\n      try {\n        const provider = await this.getProvider()\n        if (!provider) throw new ProviderNotFoundError()\n        if (!displayUri) {\n          displayUri = this.onDisplayUri\n          provider.on('display_uri', displayUri)\n        }\n\n        let targetChainId = chainId\n        if (!targetChainId) {\n          const state = (await config.storage?.getItem('state')) ?? {}\n          const isChainSupported = config.chains.some(\n            (x) => x.id === state.chainId,\n          )\n          if (isChainSupported) targetChainId = state.chainId\n          else targetChainId = config.chains[0]?.id\n        }\n        if (!targetChainId) throw new Error('No chains found on connector.')\n\n        const isChainsStale = await this.isChainsStale()\n        // If there is an active session with stale chains, disconnect current session.\n        if (provider.session && isChainsStale) await provider.disconnect()\n\n        // If there isn't an active session or chains are stale, connect.\n        if (!provider.session || isChainsStale) {\n          const optionalChains = config.chains\n            .filter((chain) => chain.id !== targetChainId)\n            .map((optionalChain) => optionalChain.id)\n          await provider.connect({\n            optionalChains: [targetChainId, ...optionalChains],\n            ...('pairingTopic' in rest\n              ? { pairingTopic: rest.pairingTopic }\n              : {}),\n          })\n\n          this.setRequestedChainsIds(config.chains.map((x) => x.id))\n        }\n\n        // If session exists and chains are authorized, enable provider for required chain\n        const accounts = (await provider.enable()).map((x) => getAddress(x))\n        const currentChainId = await this.getChainId()\n\n        if (displayUri) {\n          provider.removeListener('display_uri', displayUri)\n          displayUri = undefined\n        }\n        if (connect) {\n          provider.removeListener('connect', connect)\n          connect = undefined\n        }\n        if (!accountsChanged) {\n          accountsChanged = this.onAccountsChanged.bind(this)\n          provider.on('accountsChanged', accountsChanged)\n        }\n        if (!chainChanged) {\n          chainChanged = this.onChainChanged.bind(this)\n          provider.on('chainChanged', chainChanged)\n        }\n        if (!disconnect) {\n          disconnect = this.onDisconnect.bind(this)\n          provider.on('disconnect', disconnect)\n        }\n        if (!sessionDelete) {\n          sessionDelete = this.onSessionDelete.bind(this)\n          provider.on('session_delete', sessionDelete)\n        }\n\n        return { accounts, chainId: currentChainId }\n      } catch (error) {\n        if (\n          /(user rejected|connection request reset)/i.test(\n            (error as ProviderRpcError)?.message,\n          )\n        ) {\n          throw new UserRejectedRequestError(error as Error)\n        }\n        throw error\n      }\n    },\n    async disconnect() {\n      const provider = await this.getProvider()\n      try {\n        await provider?.disconnect()\n      } catch (error) {\n        if (!/No matching key/i.test((error as Error).message)) throw error\n      } finally {\n        if (chainChanged) {\n          provider?.removeListener('chainChanged', chainChanged)\n          chainChanged = undefined\n        }\n        if (disconnect) {\n          provider?.removeListener('disconnect', disconnect)\n          disconnect = undefined\n        }\n        if (!connect) {\n          connect = this.onConnect.bind(this)\n          provider?.on('connect', connect)\n        }\n        if (accountsChanged) {\n          provider?.removeListener('accountsChanged', accountsChanged)\n          accountsChanged = undefined\n        }\n        if (sessionDelete) {\n          provider?.removeListener('session_delete', sessionDelete)\n          sessionDelete = undefined\n        }\n\n        this.setRequestedChainsIds([])\n      }\n    },\n    async getAccounts() {\n      const provider = await this.getProvider()\n      return provider.accounts.map((x) => getAddress(x))\n    },\n    async getProvider({ chainId } = {}) {\n      async function initProvider() {\n        const optionalChains = config.chains.map((x) => x.id) as [number]\n        if (!optionalChains.length) return\n        const { EthereumProvider } = await import(\n          '@walletconnect/ethereum-provider'\n        )\n        return await EthereumProvider.init({\n          ...parameters,\n          disableProviderPing: true,\n          optionalChains,\n          projectId: parameters.projectId,\n          rpcMap: Object.fromEntries(\n            config.chains.map((chain) => {\n              const [url] = extractRpcUrls({\n                chain,\n                transports: config.transports,\n              })\n              return [chain.id, url]\n            }),\n          ),\n          showQrModal: parameters.showQrModal ?? true,\n        })\n      }\n\n      if (!provider_) {\n        if (!providerPromise) providerPromise = initProvider()\n        provider_ = await providerPromise\n        provider_?.events.setMaxListeners(Number.POSITIVE_INFINITY)\n      }\n      if (chainId) await this.switchChain?.({ chainId })\n      return provider_!\n    },\n    async getChainId() {\n      const provider = await this.getProvider()\n      return provider.chainId\n    },\n    async isAuthorized() {\n      try {\n        const [accounts, provider] = await Promise.all([\n          this.getAccounts(),\n          this.getProvider(),\n        ])\n\n        // If an account does not exist on the session, then the connector is unauthorized.\n        if (!accounts.length) return false\n\n        // If the chains are stale on the session, then the connector is unauthorized.\n        const isChainsStale = await this.isChainsStale()\n        if (isChainsStale && provider.session) {\n          await provider.disconnect().catch(() => {})\n          return false\n        }\n        return true\n      } catch {\n        return false\n      }\n    },\n    async switchChain({ addEthereumChainParameter, chainId }) {\n      const provider = await this.getProvider()\n      if (!provider) throw new ProviderNotFoundError()\n\n      const chain = config.chains.find((x) => x.id === chainId)\n      if (!chain) throw new SwitchChainError(new ChainNotConfiguredError())\n\n      try {\n        await Promise.all([\n          new Promise<void>((resolve) => {\n            const listener = ({\n              chainId: currentChainId,\n            }: { chainId?: number | undefined }) => {\n              if (currentChainId === chainId) {\n                config.emitter.off('change', listener)\n                resolve()\n              }\n            }\n            config.emitter.on('change', listener)\n          }),\n          provider.request({\n            method: 'wallet_switchEthereumChain',\n            params: [{ chainId: numberToHex(chainId) }],\n          }),\n        ])\n\n        const requestedChains = await this.getRequestedChainsIds()\n        this.setRequestedChainsIds([...requestedChains, chainId])\n\n        return chain\n      } catch (err) {\n        const error = err as RpcError\n\n        if (/(user rejected)/i.test(error.message))\n          throw new UserRejectedRequestError(error)\n\n        // Indicates chain is not added to provider\n        try {\n          let blockExplorerUrls: string[] | undefined\n          if (addEthereumChainParameter?.blockExplorerUrls)\n            blockExplorerUrls = addEthereumChainParameter.blockExplorerUrls\n          else\n            blockExplorerUrls = chain.blockExplorers?.default.url\n              ? [chain.blockExplorers?.default.url]\n              : []\n\n          let rpcUrls: readonly string[]\n          if (addEthereumChainParameter?.rpcUrls?.length)\n            rpcUrls = addEthereumChainParameter.rpcUrls\n          else rpcUrls = [...chain.rpcUrls.default.http]\n\n          const addEthereumChain = {\n            blockExplorerUrls,\n            chainId: numberToHex(chainId),\n            chainName: addEthereumChainParameter?.chainName ?? chain.name,\n            iconUrls: addEthereumChainParameter?.iconUrls,\n            nativeCurrency:\n              addEthereumChainParameter?.nativeCurrency ?? chain.nativeCurrency,\n            rpcUrls,\n          } satisfies AddEthereumChainParameter\n\n          await provider.request({\n            method: 'wallet_addEthereumChain',\n            params: [addEthereumChain],\n          })\n\n          const requestedChains = await this.getRequestedChainsIds()\n          this.setRequestedChainsIds([...requestedChains, chainId])\n          return chain\n        } catch (error) {\n          throw new UserRejectedRequestError(error as Error)\n        }\n      }\n    },\n    onAccountsChanged(accounts) {\n      if (accounts.length === 0) this.onDisconnect()\n      else\n        config.emitter.emit('change', {\n          accounts: accounts.map((x) => getAddress(x)),\n        })\n    },\n    onChainChanged(chain) {\n      const chainId = Number(chain)\n      config.emitter.emit('change', { chainId })\n    },\n    async onConnect(connectInfo) {\n      const chainId = Number(connectInfo.chainId)\n      const accounts = await this.getAccounts()\n      config.emitter.emit('connect', { accounts, chainId })\n    },\n    async onDisconnect(_error) {\n      this.setRequestedChainsIds([])\n      config.emitter.emit('disconnect')\n\n      const provider = await this.getProvider()\n      if (accountsChanged) {\n        provider.removeListener('accountsChanged', accountsChanged)\n        accountsChanged = undefined\n      }\n      if (chainChanged) {\n        provider.removeListener('chainChanged', chainChanged)\n        chainChanged = undefined\n      }\n      if (disconnect) {\n        provider.removeListener('disconnect', disconnect)\n        disconnect = undefined\n      }\n      if (sessionDelete) {\n        provider.removeListener('session_delete', sessionDelete)\n        sessionDelete = undefined\n      }\n      if (!connect) {\n        connect = this.onConnect.bind(this)\n        provider.on('connect', connect)\n      }\n    },\n    onDisplayUri(uri) {\n      config.emitter.emit('message', { type: 'display_uri', data: uri })\n    },\n    onSessionDelete() {\n      this.onDisconnect()\n    },\n    getNamespaceChainsIds() {\n      if (!provider_) return []\n      const chainIds = provider_.session?.namespaces[NAMESPACE]?.accounts?.map(\n        (account) => Number.parseInt(account.split(':')[1] || ''),\n      )\n      return chainIds ?? []\n    },\n    async getRequestedChainsIds() {\n      return (\n        (await config.storage?.getItem(this.requestedChainsStorageKey)) ?? []\n      )\n    },\n    /**\n     * Checks if the target chains match the chains that were\n     * initially requested by the connector for the WalletConnect session.\n     * If there is a mismatch, this means that the chains on the connector\n     * are considered stale, and need to be revalidated at a later point (via\n     * connection).\n     *\n     * There may be a scenario where a dapp adds a chain to the\n     * connector later on, however, this chain will not have been approved or rejected\n     * by the wallet. In this case, the chain is considered stale.\n     */\n    async isChainsStale() {\n      if (!isNewChainsStale) return false\n\n      const connectorChains = config.chains.map((x) => x.id)\n      const namespaceChains = this.getNamespaceChainsIds()\n      if (\n        namespaceChains.length &&\n        !namespaceChains.some((id) => connectorChains.includes(id))\n      )\n        return false\n\n      const requestedChains = await this.getRequestedChainsIds()\n      return !connectorChains.every((id) => requestedChains.includes(id))\n    },\n    async setRequestedChainsIds(chains) {\n      await config.storage?.setItem(this.requestedChainsStorageKey, chains)\n    },\n    get requestedChainsStorageKey() {\n      return `${this.id}.requestedChains` as Properties['requestedChainsStorageKey']\n    },\n  }))\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 2178, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2183, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/connectors/src/metaMask.ts"],"sourcesContent":["import type {\n  MetaMaskSDK,\n  MetaMaskSDKOptions,\n  RPC_URLS_MAP,\n  SDKProvider,\n} from '@metamask/sdk'\nimport {\n  ChainNotConfiguredError,\n  type Connector,\n  createConnector,\n  extractRpcUrls,\n} from '@wagmi/core'\nimport type {\n  Compute,\n  ExactPartial,\n  OneOf,\n  RemoveUndefined,\n  UnionCompute,\n} from '@wagmi/core/internal'\nimport {\n  type AddEthereumChainParameter,\n  type Address,\n  type Hex,\n  type ProviderConnectInfo,\n  type ProviderRpcError,\n  ResourceUnavailableRpcError,\n  type RpcError,\n  SwitchChainError,\n  UserRejectedRequestError,\n  getAddress,\n  hexToNumber,\n  numberToHex,\n  withRetry,\n  withTimeout,\n} from 'viem'\n\nexport type MetaMaskParameters = UnionCompute<\n  WagmiMetaMaskSDKOptions &\n    OneOf<\n      | {\n          /* Shortcut to connect and sign a message */\n          connectAndSign?: string | undefined\n        }\n      | {\n          // TODO: Strongly type `method` and `params`\n          /* Allow `connectWith` any rpc method */\n          connectWith?: { method: string; params: unknown[] } | undefined\n        }\n    >\n>\n\ntype WagmiMetaMaskSDKOptions = Compute<\n  ExactPartial<\n    Omit<\n      MetaMaskSDKOptions,\n      | '_source'\n      | 'forceDeleteProvider'\n      | 'forceInjectProvider'\n      | 'injectProvider'\n      | 'useDeeplink'\n      | 'readonlyRPCMap'\n    >\n  > & {\n    /** @deprecated */\n    forceDeleteProvider?: MetaMaskSDKOptions['forceDeleteProvider']\n    /** @deprecated */\n    forceInjectProvider?: MetaMaskSDKOptions['forceInjectProvider']\n    /** @deprecated */\n    injectProvider?: MetaMaskSDKOptions['injectProvider']\n    /** @deprecated */\n    useDeeplink?: MetaMaskSDKOptions['useDeeplink']\n  }\n>\n\nmetaMask.type = 'metaMask' as const\nexport function metaMask(parameters: MetaMaskParameters = {}) {\n  type Provider = SDKProvider\n  type Properties = {\n    onConnect(connectInfo: ProviderConnectInfo): void\n    onDisplayUri(uri: string): void\n  }\n  type Listener = Parameters<Provider['on']>[1]\n\n  let sdk: MetaMaskSDK\n  let provider: Provider | undefined\n  let providerPromise: Promise<typeof provider>\n\n  let accountsChanged: Connector['onAccountsChanged'] | undefined\n  let chainChanged: Connector['onChainChanged'] | undefined\n  let connect: Connector['onConnect'] | undefined\n  let displayUri: ((uri: string) => void) | undefined\n  let disconnect: Connector['onDisconnect'] | undefined\n\n  return createConnector<Provider, Properties>((config) => ({\n    id: 'metaMaskSDK',\n    name: 'MetaMask',\n    rdns: 'io.metamask',\n    type: metaMask.type,\n    async setup() {\n      const provider = await this.getProvider()\n      if (provider?.on) {\n        if (!connect) {\n          connect = this.onConnect.bind(this)\n          provider.on('connect', connect as Listener)\n        }\n\n        // We shouldn't need to listen for `'accountsChanged'` here since the `'connect'` event should suffice (and wallet shouldn't be connected yet).\n        // Some wallets, like MetaMask, do not implement the `'connect'` event and overload `'accountsChanged'` instead.\n        if (!accountsChanged) {\n          accountsChanged = this.onAccountsChanged.bind(this)\n          provider.on('accountsChanged', accountsChanged as Listener)\n        }\n      }\n    },\n    async connect({ chainId, isReconnecting } = {}) {\n      const provider = await this.getProvider()\n      if (!displayUri) {\n        displayUri = this.onDisplayUri\n        provider.on('display_uri', displayUri as Listener)\n      }\n\n      let accounts: readonly Address[] = []\n      if (isReconnecting) accounts = await this.getAccounts().catch(() => [])\n\n      try {\n        let signResponse: string | undefined\n        let connectWithResponse: unknown | undefined\n        if (!accounts?.length) {\n          if (parameters.connectAndSign || parameters.connectWith) {\n            if (parameters.connectAndSign)\n              signResponse = await sdk.connectAndSign({\n                msg: parameters.connectAndSign,\n              })\n            else if (parameters.connectWith)\n              connectWithResponse = await sdk.connectWith({\n                method: parameters.connectWith.method,\n                params: parameters.connectWith.params,\n              })\n\n            accounts = await this.getAccounts()\n          } else {\n            const requestedAccounts = (await sdk.connect()) as string[]\n            accounts = requestedAccounts.map((x) => getAddress(x))\n          }\n        }\n        // Switch to chain if provided\n        let currentChainId = (await this.getChainId()) as number\n        if (chainId && currentChainId !== chainId) {\n          const chain = await this.switchChain!({ chainId }).catch((error) => {\n            if (error.code === UserRejectedRequestError.code) throw error\n            return { id: currentChainId }\n          })\n          currentChainId = chain?.id ?? currentChainId\n        }\n\n        if (displayUri) {\n          provider.removeListener('display_uri', displayUri)\n          displayUri = undefined\n        }\n\n        if (signResponse)\n          provider.emit('connectAndSign', {\n            accounts,\n            chainId: currentChainId,\n            signResponse,\n          })\n        else if (connectWithResponse)\n          provider.emit('connectWith', {\n            accounts,\n            chainId: currentChainId,\n            connectWithResponse,\n          })\n\n        // Manage EIP-1193 event listeners\n        // https://eips.ethereum.org/EIPS/eip-1193#events\n        if (connect) {\n          provider.removeListener('connect', connect)\n          connect = undefined\n        }\n        if (!accountsChanged) {\n          accountsChanged = this.onAccountsChanged.bind(this)\n          provider.on('accountsChanged', accountsChanged as Listener)\n        }\n        if (!chainChanged) {\n          chainChanged = this.onChainChanged.bind(this)\n          provider.on('chainChanged', chainChanged as Listener)\n        }\n        if (!disconnect) {\n          disconnect = this.onDisconnect.bind(this)\n          provider.on('disconnect', disconnect as Listener)\n        }\n\n        return { accounts, chainId: currentChainId }\n      } catch (err) {\n        const error = err as RpcError\n        if (error.code === UserRejectedRequestError.code)\n          throw new UserRejectedRequestError(error)\n        if (error.code === ResourceUnavailableRpcError.code)\n          throw new ResourceUnavailableRpcError(error)\n        throw error\n      }\n    },\n    async disconnect() {\n      const provider = await this.getProvider()\n\n      // Manage EIP-1193 event listeners\n      if (chainChanged) {\n        provider.removeListener('chainChanged', chainChanged)\n        chainChanged = undefined\n      }\n      if (disconnect) {\n        provider.removeListener('disconnect', disconnect)\n        disconnect = undefined\n      }\n      if (!connect) {\n        connect = this.onConnect.bind(this)\n        provider.on('connect', connect as Listener)\n      }\n\n      await sdk.terminate()\n    },\n    async getAccounts() {\n      const provider = await this.getProvider()\n      const accounts = (await provider.request({\n        method: 'eth_accounts',\n      })) as string[]\n      return accounts.map((x) => getAddress(x))\n    },\n    async getChainId() {\n      const provider = await this.getProvider()\n      const chainId =\n        provider.getChainId() ||\n        (await provider?.request({ method: 'eth_chainId' }))\n      return Number(chainId)\n    },\n    async getProvider() {\n      async function initProvider() {\n        // Unwrapping import for Vite compatibility.\n        // See: https://github.com/vitejs/vite/issues/9703\n        const MetaMaskSDK = await (async () => {\n          const { default: SDK } = await import('@metamask/sdk')\n          if (typeof SDK !== 'function' && typeof SDK.default === 'function')\n            return SDK.default\n          return SDK as unknown as typeof SDK.default\n        })()\n\n        const readonlyRPCMap: RPC_URLS_MAP = {}\n        for (const chain of config.chains)\n          readonlyRPCMap[numberToHex(chain.id)] = extractRpcUrls({\n            chain,\n            transports: config.transports,\n          })?.[0]\n\n        sdk = new MetaMaskSDK({\n          _source: 'wagmi',\n          forceDeleteProvider: false,\n          forceInjectProvider: false,\n          injectProvider: false,\n          // Workaround cast since MetaMask SDK does not support `'exactOptionalPropertyTypes'`\n          ...(parameters as RemoveUndefined<typeof parameters>),\n          readonlyRPCMap,\n          dappMetadata:\n            parameters.dappMetadata ??\n            (typeof window !== 'undefined'\n              ? { url: window.location.origin }\n              : { name: 'wagmi', url: 'https://wagmi.sh' }),\n          useDeeplink: parameters.useDeeplink ?? true,\n        })\n        await sdk.init()\n        return sdk.getProvider()!\n      }\n\n      if (!provider) {\n        if (!providerPromise) providerPromise = initProvider()\n        provider = await providerPromise\n      }\n      return provider!\n    },\n    async isAuthorized() {\n      try {\n        // MetaMask mobile provider sometimes fails to immediately resolve\n        // JSON-RPC requests on page load\n        const timeout = 200\n        const accounts = await withRetry(\n          () => withTimeout(() => this.getAccounts(), { timeout }),\n          {\n            delay: timeout + 1,\n            retryCount: 3,\n          },\n        )\n        return !!accounts.length\n      } catch {\n        return false\n      }\n    },\n    async switchChain({ addEthereumChainParameter, chainId }) {\n      const provider = await this.getProvider()\n\n      const chain = config.chains.find((x) => x.id === chainId)\n      if (!chain) throw new SwitchChainError(new ChainNotConfiguredError())\n\n      try {\n        await Promise.all([\n          provider\n            .request({\n              method: 'wallet_switchEthereumChain',\n              params: [{ chainId: numberToHex(chainId) }],\n            })\n            // During `'wallet_switchEthereumChain'`, MetaMask makes a `'net_version'` RPC call to the target chain.\n            // If this request fails, MetaMask does not emit the `'chainChanged'` event, but will still switch the chain.\n            // To counter this behavior, we request and emit the current chain ID to confirm the chain switch either via\n            // this callback or an externally emitted `'chainChanged'` event.\n            // https://github.com/MetaMask/metamask-extension/issues/24247\n            .then(async () => {\n              const currentChainId = await this.getChainId()\n              if (currentChainId === chainId)\n                config.emitter.emit('change', { chainId })\n            }),\n          new Promise<void>((resolve) => {\n            const listener = ((data) => {\n              if ('chainId' in data && data.chainId === chainId) {\n                config.emitter.off('change', listener)\n                resolve()\n              }\n            }) satisfies Parameters<typeof config.emitter.on>[1]\n            config.emitter.on('change', listener)\n          }),\n        ])\n        return chain\n      } catch (err) {\n        const error = err as RpcError\n\n        // Indicates chain is not added to provider\n        if (\n          error.code === 4902 ||\n          // Unwrapping for MetaMask Mobile\n          // https://github.com/MetaMask/metamask-mobile/issues/2944#issuecomment-976988719\n          (error as ProviderRpcError<{ originalError?: { code: number } }>)\n            ?.data?.originalError?.code === 4902\n        ) {\n          try {\n            const { default: blockExplorer, ...blockExplorers } =\n              chain.blockExplorers ?? {}\n            let blockExplorerUrls: string[] | undefined\n            if (addEthereumChainParameter?.blockExplorerUrls)\n              blockExplorerUrls = addEthereumChainParameter.blockExplorerUrls\n            else if (blockExplorer)\n              blockExplorerUrls = [\n                blockExplorer.url,\n                ...Object.values(blockExplorers).map((x) => x.url),\n              ]\n\n            let rpcUrls: readonly string[]\n            if (addEthereumChainParameter?.rpcUrls?.length)\n              rpcUrls = addEthereumChainParameter.rpcUrls\n            else rpcUrls = [chain.rpcUrls.default?.http[0] ?? '']\n\n            const addEthereumChain = {\n              blockExplorerUrls,\n              chainId: numberToHex(chainId),\n              chainName: addEthereumChainParameter?.chainName ?? chain.name,\n              iconUrls: addEthereumChainParameter?.iconUrls,\n              nativeCurrency:\n                addEthereumChainParameter?.nativeCurrency ??\n                chain.nativeCurrency,\n              rpcUrls,\n            } satisfies AddEthereumChainParameter\n\n            await provider.request({\n              method: 'wallet_addEthereumChain',\n              params: [addEthereumChain],\n            })\n\n            const currentChainId = hexToNumber(\n              // Call `'eth_chainId'` directly to guard against `this.state.chainId` (via `provider.getChainId`) being stale.\n              (await provider.request({ method: 'eth_chainId' })) as Hex,\n            )\n            if (currentChainId !== chainId)\n              throw new UserRejectedRequestError(\n                new Error('User rejected switch after adding network.'),\n              )\n\n            return chain\n          } catch (error) {\n            throw new UserRejectedRequestError(error as Error)\n          }\n        }\n\n        if (error.code === UserRejectedRequestError.code)\n          throw new UserRejectedRequestError(error)\n        throw new SwitchChainError(error)\n      }\n    },\n    async onAccountsChanged(accounts) {\n      // Disconnect if there are no accounts\n      if (accounts.length === 0) {\n        // ... and using browser extension\n        if (sdk.isExtensionActive()) this.onDisconnect()\n        // FIXME(upstream): Mobile app sometimes emits invalid `accountsChanged` event with empty accounts array\n        else return\n      }\n      // Connect if emitter is listening for connect event (e.g. is disconnected and connects through wallet interface)\n      else if (config.emitter.listenerCount('connect')) {\n        const chainId = (await this.getChainId()).toString()\n        this.onConnect({ chainId })\n      }\n      // Regular change event\n      else\n        config.emitter.emit('change', {\n          accounts: accounts.map((x) => getAddress(x)),\n        })\n    },\n    onChainChanged(chain) {\n      const chainId = Number(chain)\n      config.emitter.emit('change', { chainId })\n    },\n    async onConnect(connectInfo) {\n      const accounts = await this.getAccounts()\n      if (accounts.length === 0) return\n\n      const chainId = Number(connectInfo.chainId)\n      config.emitter.emit('connect', { accounts, chainId })\n\n      const provider = await this.getProvider()\n      if (connect) {\n        provider.removeListener('connect', connect)\n        connect = undefined\n      }\n      if (!accountsChanged) {\n        accountsChanged = this.onAccountsChanged.bind(this)\n        provider.on('accountsChanged', accountsChanged as Listener)\n      }\n      if (!chainChanged) {\n        chainChanged = this.onChainChanged.bind(this)\n        provider.on('chainChanged', chainChanged as Listener)\n      }\n      if (!disconnect) {\n        disconnect = this.onDisconnect.bind(this)\n        provider.on('disconnect', disconnect as Listener)\n      }\n    },\n    async onDisconnect(error) {\n      const provider = await this.getProvider()\n\n      // If MetaMask emits a `code: 1013` error, wait for reconnection before disconnecting\n      // https://github.com/MetaMask/providers/pull/120\n      if (error && (error as RpcError<1013>).code === 1013) {\n        if (provider && !!(await this.getAccounts()).length) return\n      }\n\n      config.emitter.emit('disconnect')\n\n      // Manage EIP-1193 event listeners\n      if (chainChanged) {\n        provider.removeListener('chainChanged', chainChanged)\n        chainChanged = undefined\n      }\n      if (disconnect) {\n        provider.removeListener('disconnect', disconnect)\n        disconnect = undefined\n      }\n      if (!connect) {\n        connect = this.onConnect.bind(this)\n        provider.on('connect', connect as Listener)\n      }\n    },\n    onDisplayUri(uri) {\n      config.emitter.emit('message', { type: 'display_uri', data: uri })\n    },\n  }))\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 2554, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2559, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@wagmi/connectors/src/safe.ts"],"sourcesContent":["import type { SafeAppProvider } from '@safe-global/safe-apps-provider'\nimport type { Opts } from '@safe-global/safe-apps-sdk'\nimport {\n  type Connector,\n  ProviderNotFoundError,\n  createConnector,\n} from '@wagmi/core'\nimport type { Compute } from '@wagmi/core/internal'\nimport { getAddress, withTimeout } from 'viem'\n\nexport type SafeParameters = Compute<\n  Opts & {\n    /**\n     * Connector automatically connects when used as Safe App.\n     *\n     * This flag simulates the disconnect behavior by keeping track of connection status in storage\n     * and only autoconnecting when previously connected by user action (e.g. explicitly choosing to connect).\n     *\n     * @default false\n     */\n    shimDisconnect?: boolean | undefined\n    /**\n     * Timeout in milliseconds for `getInfo` (from the Safe SDK) to resolve.\n     *\n     * `getInfo` does not resolve when not used in Safe App iFrame. This allows the connector to force a timeout.\n     * @default 10\n     */\n    unstable_getInfoTimeout?: number | undefined\n  }\n>\n\nsafe.type = 'safe' as const\nexport function safe(parameters: SafeParameters = {}) {\n  const { shimDisconnect = false } = parameters\n\n  type Provider = SafeAppProvider | undefined\n  type Properties = Record<string, unknown>\n  type StorageItem = { 'safe.disconnected': true }\n\n  let provider_: Provider | undefined\n\n  let disconnect: Connector['onDisconnect'] | undefined\n\n  return createConnector<Provider, Properties, StorageItem>((config) => ({\n    id: 'safe',\n    name: 'Safe',\n    type: safe.type,\n    async connect() {\n      const provider = await this.getProvider()\n      if (!provider) throw new ProviderNotFoundError()\n\n      const accounts = await this.getAccounts()\n      const chainId = await this.getChainId()\n\n      if (!disconnect) {\n        disconnect = this.onDisconnect.bind(this)\n        provider.on('disconnect', disconnect)\n      }\n\n      // Remove disconnected shim if it exists\n      if (shimDisconnect) await config.storage?.removeItem('safe.disconnected')\n\n      return { accounts, chainId }\n    },\n    async disconnect() {\n      const provider = await this.getProvider()\n      if (!provider) throw new ProviderNotFoundError()\n\n      if (disconnect) {\n        provider.removeListener('disconnect', disconnect)\n        disconnect = undefined\n      }\n\n      // Add shim signalling connector is disconnected\n      if (shimDisconnect)\n        await config.storage?.setItem('safe.disconnected', true)\n    },\n    async getAccounts() {\n      const provider = await this.getProvider()\n      if (!provider) throw new ProviderNotFoundError()\n      return (await provider.request({ method: 'eth_accounts' })).map(\n        getAddress,\n      )\n    },\n    async getProvider() {\n      // Only allowed in iframe context\n      const isIframe =\n        typeof window !== 'undefined' && window?.parent !== window\n      if (!isIframe) return\n\n      if (!provider_) {\n        const { default: SDK } = await import('@safe-global/safe-apps-sdk')\n        const sdk = new SDK(parameters)\n\n        // `getInfo` hangs when not used in Safe App iFrame\n        // https://github.com/safe-global/safe-apps-sdk/issues/263#issuecomment-1029835840\n        const safe = await withTimeout(() => sdk.safe.getInfo(), {\n          timeout: parameters.unstable_getInfoTimeout ?? 10,\n        })\n        if (!safe) throw new Error('Could not load Safe information')\n        const { SafeAppProvider } = await import(\n          '@safe-global/safe-apps-provider'\n        )\n        provider_ = new SafeAppProvider(safe, sdk)\n      }\n      return provider_\n    },\n    async getChainId() {\n      const provider = await this.getProvider()\n      if (!provider) throw new ProviderNotFoundError()\n      return Number(provider.chainId)\n    },\n    async isAuthorized() {\n      try {\n        const isDisconnected =\n          shimDisconnect &&\n          // If shim exists in storage, connector is disconnected\n          (await config.storage?.getItem('safe.disconnected'))\n        if (isDisconnected) return false\n\n        const accounts = await this.getAccounts()\n        return !!accounts.length\n      } catch {\n        return false\n      }\n    },\n    onAccountsChanged() {\n      // Not relevant for Safe because changing account requires app reload.\n    },\n    onChainChanged() {\n      // Not relevant for Safe because Safe smart contract wallets only exist on single chain.\n    },\n    onDisconnect() {\n      config.emitter.emit('disconnect')\n    },\n  }))\n}\n"],"names":[],"mappings":";;;;;;;;;;AA+BA,KAAK,IAAI,GAAG;AACN,SAAU,KAAK,aAA6B,CAAA,CAAE;IAClD,MAAM,EAAE,iBAAiB,KAAK,EAAE,GAAG;IAMnC,IAAI;IAEJ,IAAI;IAEJ,OAAO,CAAA,GAAA,+KAAA,CAAA,kBAAe,AAAf,EAAmD,CAAC,SAAW,CAAC;YACrE,IAAI;YACJ,MAAM;YACN,MAAM,KAAK,IAAI;YACf,MAAM;gBACJ,MAAM,WAAW,MAAM,IAAI,CAAC,WAAW;gBACvC,IAAI,CAAC,UAAU,MAAM,IAAI,qKAAA,CAAA,wBAAqB;gBAE9C,MAAM,WAAW,MAAM,IAAI,CAAC,WAAW;gBACvC,MAAM,UAAU,MAAM,IAAI,CAAC,UAAU;gBAErC,IAAI,CAAC,YAAY;oBACf,aAAa,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI;oBACxC,SAAS,EAAE,CAAC,cAAc;gBAC5B;gBAEA,wCAAwC;gBACxC,IAAI,gBAAgB,MAAM,OAAO,OAAO,EAAE,WAAW;gBAErD,OAAO;oBAAE;oBAAU;gBAAO;YAC5B;YACA,MAAM;gBACJ,MAAM,WAAW,MAAM,IAAI,CAAC,WAAW;gBACvC,IAAI,CAAC,UAAU,MAAM,IAAI,qKAAA,CAAA,wBAAqB;gBAE9C,IAAI,YAAY;oBACd,SAAS,cAAc,CAAC,cAAc;oBACtC,aAAa;gBACf;gBAEA,gDAAgD;gBAChD,IAAI,gBACF,MAAM,OAAO,OAAO,EAAE,QAAQ,qBAAqB;YACvD;YACA,MAAM;gBACJ,MAAM,WAAW,MAAM,IAAI,CAAC,WAAW;gBACvC,IAAI,CAAC,UAAU,MAAM,IAAI,qKAAA,CAAA,wBAAqB;gBAC9C,OAAO,CAAC,MAAM,SAAS,OAAO,CAAC;oBAAE,QAAQ;gBAAc,EAAG,EAAE,GAAG,CAC7D,8JAAA,CAAA,aAAU;YAEd;YACA,MAAM;gBACJ,iCAAiC;gBACjC,MAAM,WACJ,OAAO,WAAW,eAAe,QAAQ,WAAW;gBACtD,IAAI,CAAC,UAAU;gBAEf,IAAI,CAAC,WAAW;oBACd,MAAM,EAAE,SAAS,GAAG,EAAE,GAAG;oBACzB,MAAM,MAAM,IAAI,IAAI;oBAEpB,mDAAmD;oBACnD,kFAAkF;oBAClF,MAAM,OAAO,MAAM,CAAA,GAAA,+JAAA,CAAA,cAAW,AAAX,EAAY,IAAM,IAAI,IAAI,CAAC,OAAO,IAAI;wBACvD,SAAS,WAAW,uBAAuB,IAAI;;oBAEjD,IAAI,CAAC,MAAM,MAAM,IAAI,MAAM;oBAC3B,MAAM,EAAE,eAAe,EAAE,GAAG;oBAG5B,YAAY,IAAI,gBAAgB,MAAM;gBACxC;gBACA,OAAO;YACT;YACA,MAAM;gBACJ,MAAM,WAAW,MAAM,IAAI,CAAC,WAAW;gBACvC,IAAI,CAAC,UAAU,MAAM,IAAI,qKAAA,CAAA,wBAAqB;gBAC9C,OAAO,OAAO,SAAS,OAAO;YAChC;YACA,MAAM;gBACJ,IAAI;oBACF,MAAM,iBACJ,kBAEC,MAAM,OAAO,OAAO,EAAE,QAAQ;oBACjC,IAAI,gBAAgB,OAAO;oBAE3B,MAAM,WAAW,MAAM,IAAI,CAAC,WAAW;oBACvC,OAAO,CAAC,CAAC,SAAS,MAAM;gBAC1B,EAAE,OAAM;oBACN,OAAO;gBACT;YACF;YACA;YACE,sEAAsE;YACxE;YACA;YACE,wFAAwF;YAC1F;YACA;gBACE,OAAO,OAAO,CAAC,IAAI,CAAC;YACtB;SACD;AACH"}},
    {"offset": {"line": 2655, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}
{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@web3modal/polyfills/index.ts"],"sourcesContent":["unable to read source [project]/node_modules/@web3modal/polyfills/index.ts"],"names":[],"mappings":";;;;AAEA,IAAI,OAAO,WAAW,aAAa;IACjC,IAAI,CAAC,OAAO,MAAM,EAAE;QAClB,OAAO,MAAM,GAAG,yCAAA,CAAA,SAAM;IACxB;IACA,IAAI,CAAC,OAAO,MAAM,EAAE;QAClB,OAAO,MAAM,GAAG;IAClB;IACA,IAAI,CAAC,OAAO,OAAO,EAAE;QAEnB,OAAO,OAAO,GAAG,CAAA;IACnB;IACA,IAAI,CAAC,OAAO,OAAO,EAAE,KAAK;QAExB,OAAO,OAAO,GAAG;YAAE,KAAK,CAAA;QAAE;IAC5B;AACF"}},
    {"offset": {"line": 25, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 30, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@web3modal/scaffold-utils/src/ConstantsUtil.ts"],"sourcesContent":["unable to read source [project]/node_modules/@web3modal/scaffold-utils/src/ConstantsUtil.ts"],"names":[],"mappings":";;;AAAO,MAAM,gBAAgB;IAC3B,6BAA6B;IAC7B,uBAAuB;IACvB,uBAAuB;IACvB,2BAA2B;IAC3B,mBAAmB;IACnB,qBAAqB;IACrB,sBAAsB;IACtB,mBAAmB;IACnB,QAAQ;IACR,kBAAkB;IAClB,wBAAwB;IACxB,uBAAuB;IACvB,oBAAoB;QAClB,gBAAgB;;IAElB,SAAS"}},
    {"offset": {"line": 51, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 56, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@web3modal/scaffold-utils/src/PresetsUtil.ts"],"sourcesContent":["unable to read source [project]/node_modules/@web3modal/scaffold-utils/src/PresetsUtil.ts"],"names":[],"mappings":";;;;;;AAGO,MAAM,cAAc;IACzB,sBAAsB;QACpB,CAAC,uLAAA,CAAA,gBAAa,CAAC,qBAAqB,CAAC,EACnC;QACF,CAAC,uLAAA,CAAA,gBAAa,CAAC,iBAAiB,CAAC,EAC/B;QACF,CAAC,uLAAA,CAAA,gBAAa,CAAC,mBAAmB,CAAC,EACjC;;IAGJ,uBAAuB;QAErB,GAAG;QAEH,OAAO;QAEP,OAAO;QAEP,IAAI;QAEJ,KAAK;QAEL,IAAI;QAEJ,KAAK;QAEL,KAAK;QAEL,MAAM;QAEN,KAAK;QAEL,KAAK;QAEL,MAAM;QAEN,MAAM;QAEN,MAAM;QAEN,MAAM;QAEN,SAAS;QAET,OAAO;QAEP,MAAM;QAEN,YAAY;QAEZ,MAAM;QAEN,MAAM;QAEN,oCAAoC;QACpC,oCAAoC;QACpC,kCAAkC;;IAGpC,mBAAmB;QACjB,CAAC,uLAAA,CAAA,gBAAa,CAAC,qBAAqB,CAAC,EAAE;QACvC,CAAC,uLAAA,CAAA,gBAAa,CAAC,yBAAyB,CAAC,EAAE;QAC3C,CAAC,uLAAA,CAAA,gBAAa,CAAC,iBAAiB,CAAC,EAAE;QACnC,CAAC,uLAAA,CAAA,gBAAa,CAAC,mBAAmB,CAAC,EAAE;QACrC,CAAC,uLAAA,CAAA,gBAAa,CAAC,2BAA2B,CAAC,EAAE;QAC7C,CAAC,uLAAA,CAAA,gBAAa,CAAC,qBAAqB,CAAC,EAAE;;IAGzC,mBAAmB;QACjB,CAAC,uLAAA,CAAA,gBAAa,CAAC,qBAAqB,CAAC,EAAE;QACvC,CAAC,uLAAA,CAAA,gBAAa,CAAC,2BAA2B,CAAC,EAAE;QAC7C,CAAC,uLAAA,CAAA,gBAAa,CAAC,qBAAqB,CAAC,EAAE;QACvC,CAAC,uLAAA,CAAA,gBAAa,CAAC,yBAAyB,CAAC,EAAE;QAC3C,CAAC,uLAAA,CAAA,gBAAa,CAAC,mBAAmB,CAAC,EAAE;QACrC,CAAC,uLAAA,CAAA,gBAAa,CAAC,iBAAiB,CAAC,EAAE;;IAGrC,mBAAmB;QACjB,CAAC,uLAAA,CAAA,gBAAa,CAAC,qBAAqB,CAAC,EAAE;QACvC,CAAC,uLAAA,CAAA,gBAAa,CAAC,2BAA2B,CAAC,EAAE;QAC7C,CAAC,uLAAA,CAAA,gBAAa,CAAC,oBAAoB,CAAC,EAAE;QACtC,CAAC,uLAAA,CAAA,gBAAa,CAAC,iBAAiB,CAAC,EAAE;;IAGrC,0BAA0B;QAExB;QAEA;QAEA;QAEA;QAEA;QAEA;QAEA;QAEA;QAEA;QAEA;QAEA;QAEA;QAEA;QAEA;QAEA;QAEA;QAEA;QAEA;QAEA;QAEA;QAEA;QAEA;QAEA;KACD"}},
    {"offset": {"line": 142, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 147, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@web3modal/scaffold-utils/src/HelpersUtil.ts"],"sourcesContent":["unable to read source [project]/node_modules/@web3modal/scaffold-utils/src/HelpersUtil.ts"],"names":[],"mappings":";;;;;;AAGO,MAAM,cAAc;IACzB,eAAc,MAAe;QAC3B,IAAI,CAAC,QAAQ;YACX,OAAO;QACT;QAEA,MAAM,aAAqB,CAAA;QAC3B,OAAO,OAAO,CAAC,QAAQ,OAAO,CAAC,CAAC,CAAC,IAAI,MAAM;YACzC,UAAU,CAAC,CAAA,EAAG,uLAAA,CAAA,gBAAa,CAAC,MAAM,CAAA,CAAA,EAAI,GAAE,CAAE,CAAC,GAAG;QAChD;QAEA,OAAO;IACT"}},
    {"offset": {"line": 165, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 170, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@web3modal/scaffold-utils/exports/index.ts"],"sourcesContent":["unable to read source [project]/node_modules/@web3modal/scaffold-utils/exports/index.ts"],"names":[],"mappings":""}},
    {"offset": {"line": 175, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 191, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@web3modal/wagmi/src/connectors/AuthConnector.ts"],"sourcesContent":["unable to read source [project]/node_modules/@web3modal/wagmi/src/connectors/AuthConnector.ts"],"names":[],"mappings":"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"}},
    {"offset": {"line": 312, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 317, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@web3modal/wagmi/src/utils/helpers.ts"],"sourcesContent":["unable to read source [project]/node_modules/@web3modal/wagmi/src/utils/helpers.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AASM,SAAU,oBAAoB,KAAa;IAC/C,IAAI,CAAC,OAAO;QACV,OAAO;IACT;IAEA,OAAO;QACL,IAAI,CAAA,EAAG,uLAAA,CAAA,gBAAa,CAAC,MAAM,CAAA,CAAA,EAAI,MAAM,EAAE,CAAA,CAAE;QACzC,MAAM,MAAM,IAAI;QAChB,SAAS,qLAAA,CAAA,cAAW,CAAC,qBAAqB,CAAC,MAAM,EAAE,CAAC;;AAExD;AAEO,eAAe,6BAA6B,SAAqB;IACtE,IAAI,CAAC,WAAW;QACd,MAAM,IAAI,MAAM;IAClB;IACA,MAAM,WAAY,MAAM,WAAW;IAGnC,MAAM,KAAK,UAAU,QAAQ,SAAS;IACtC,MAAM,YAAY,IAAI,CAAC,uLAAA,CAAA,gBAAa,CAAC,MAAM,CAAC,EAAE;IAC9C,MAAM,WAAW,IAAI,CAAC,uLAAA,CAAA,gBAAa,CAAC,MAAM,CAAC,EAAE;IAE7C,OAAO;QACL,qBAAqB,QAAQ,WAAW,SAAS,uLAAA,CAAA,gBAAa,CAAC,gBAAgB;QAC/E,wBAAwB;;AAE5B;AAEM,SAAU;IACd,OAAO;QACL,qBAAqB;QACrB,wBAAwB,qLAAA,CAAA,cAAW,CAAC,wBAAwB,CAAC,GAAG,CAC9D,CAAA,KAAM,CAAA,EAAG,uLAAA,CAAA,gBAAa,CAAC,MAAM,CAAA,CAAA,EAAI,GAAE,CAAE;;AAG3C;AAEM,SAAU,aAAa,EAAE,OAAO,EAAE,SAAS,EAA0C;IACzF,MAAM,UAAU,oLAAA,CAAA,iBAAc,CAAC,mBAAmB;IAElD,IAAI,CAAC,qLAAA,CAAA,cAAW,CAAC,wBAAwB,CAAC,QAAQ,CAAC,UAAU;QAC3D,OAAO,CAAA,GAAA,6JAAA,CAAA,OAAI,AAAJ;IACT;IAEA,OAAO,CAAA,GAAA,6JAAA,CAAA,OAAI,AAAJ,EAAK,CAAA,EAAG,QAAO,aAAA,EAAgB,uLAAA,CAAA,gBAAa,CAAC,MAAM,CAAA,CAAA,EAAI,QAAO,WAAA,EAAc,UAAS,CAAE;AAChG"}},
    {"offset": {"line": 371, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 376, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@web3modal/wagmi/src/utils/defaultWagmiReactConfig.ts"],"sourcesContent":["unable to read source [project]/node_modules/@web3modal/wagmi/src/utils/defaultWagmiReactConfig.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AA8BM,SAAU,mBAAmB,EACjC,SAAS,EACT,MAAM,EACN,QAAQ,EACR,cAAc,EACd,WAAW,EACX,cAAc,EACd,OAAO;IACL,aAAa;CACd,EACD,mBAAmB,EACnB,aAAa,EACb,GAAG,aACW;IACd,MAAM,aAAkC,EAAE;IAC1C,MAAM,gBAAgB,OAAO,GAAG,CAAC,CAAA,QAAS;YACxC,MAAM,EAAE;YACR,CAAA,GAAA,8KAAA,CAAA,eAAY,AAAZ,EAAa;gBAAE,SAAS,MAAM,EAAE;gBAAE;YAAS;SAC5C;IACD,MAAM,aAAa,OAAO,WAAW,CAAC;IAGtC,IAAI,wBAAwB,OAAO;QACjC,WAAW,IAAI,CAAC,CAAA,GAAA,qKAAA,CAAA,gBAAa,AAAb,EAAc;YAAE;YAAW;YAAU,aAAa;QAAK;IACzE;IAEA,IAAI,mBAAmB,OAAO;QAC5B,WAAW,IAAI,CAAC,CAAA,GAAA,wKAAA,CAAA,WAAQ,AAAR,EAAS;YAAE,gBAAgB;QAAI;IACjD;IAEA,IAAI,mBAAmB,OAAO;QAC5B,WAAW,IAAI,CACb,CAAA,GAAA,sKAAA,CAAA,iBAAc,AAAd,EAAe;YACb,SAAS;YACT,SAAS,UAAU,QAAQ;YAC3B,YAAY,UAAU,KAAK,CAAC,EAAE,IAAI;YASlC,YAAY,YAAY,kBAAkB,IAAI;;IAGpD;IAGA,IAAI,eAAe,MAAM,SAAS;QAChC,WAAW,IAAI,CACb,CAAA,GAAA,yLAAA,CAAA,gBAAa,AAAb,EAAc;YACZ,QAAQ;mBAAI;aAAO;YACnB,SAAS;gBAAE;YAAS;YACpB,SAAS,MAAM;YACf,OAAO;YACP,aAAa,KAAK,WAAW;;IAGnC;IAEA,OAAO,CAAA,GAAA,8JAAA,CAAA,eAAY,AAAZ,EAAa;QAClB;QACA,gCAAgC,kBAAkB;QAClD;QACA,GAAG,WAAW;QACd;;AAEJ"}},
    {"offset": {"line": 445, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 450, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@web3modal/wagmi/exports/react/config.ts"],"sourcesContent":["unable to read source [project]/node_modules/@web3modal/wagmi/exports/react/config.ts"],"names":[],"mappings":""}},
    {"offset": {"line": 453, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 467, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@web3modal/common/src/utils/DateUtil.ts"],"sourcesContent":["unable to read source [project]/node_modules/@web3modal/common/src/utils/DateUtil.ts"],"names":[],"mappings":";;;;;;;;;;;;AAKA,qIAAA,CAAA,UAAK,CAAC,MAAM,CAAC,+IAAA,CAAA,UAAY;AACzB,qIAAA,CAAA,UAAK,CAAC,MAAM,CAAC,+IAAA,CAAA,UAAY;AAEzB,MAAM,eAAe;IACnB,GAAG,qIAAA,CAAA,UAAa;IAChB,MAAM;IACN,cAAc;QACZ,QAAQ;QACR,MAAM;QACN,GAAG;QACH,GAAG;QACH,IAAI;QACJ,GAAG;QACH,IAAI;QACJ,GAAG;QACH,IAAI;QACJ,GAAG;QACH,IAAI;QACJ,GAAG;QACH,IAAI;;;AAIR,qIAAA,CAAA,UAAK,CAAC,MAAM,CAAC,iBAAiB;AAEvB,MAAM,WAAW;IACtB,SAAQ,OAAe,IAAI,OAAO,WAAW,EAAE;QAC7C,OAAO,CAAA,GAAA,qIAAA,CAAA,UAAK,AAAL,EAAM,MAAM,IAAI;IACzB;IAEA,wBAAuB,IAAqB;QAC1C,OAAO,CAAA,GAAA,qIAAA,CAAA,UAAK,AAAL,EAAM,MAAM,MAAM,CAAC,iBAAiB,OAAO,CAAC;IACrD;IAEA,YAAW,IAAqB,EAAE,SAAS,QAAQ;QACjD,OAAO,CAAA,GAAA,qIAAA,CAAA,UAAK,AAAL,EAAM,MAAM,MAAM,CAAC;IAC5B"}},
    {"offset": {"line": 512, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 517, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@web3modal/common/src/utils/NetworkUtil.ts"],"sourcesContent":["unable to read source [project]/node_modules/@web3modal/common/src/utils/NetworkUtil.ts"],"names":[],"mappings":";;;AAEO,MAAM,cAAc;IACzB,uBAAsB,aAA6B;QACjD,OAAO,gBAAgB,OAAO,cAAc,KAAK,CAAC,IAAI,CAAC,EAAE,IAAI;IAC/D"}},
    {"offset": {"line": 525, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 530, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@web3modal/common/src/utils/NumberUtil.ts"],"sourcesContent":["unable to read source [project]/node_modules/@web3modal/common/src/utils/NumberUtil.ts"],"names":[],"mappings":";;;;;;AAEO,MAAM,aAAa;IACxB,WAAU,KAAsB;QAC9B,OAAO,IAAI,6IAAA,CAAA,UAAS,CAAC;IACvB;IAQA,UAAS,CAA8B,EAAE,CAA8B;QACrE,IAAI,MAAM,aAAa,MAAM,WAAW;YAEtC,OAAO,CAAA,GAAA,6IAAA,CAAA,UAAS,AAAT,EAAU;QACnB;QAEA,MAAM,aAAa,IAAI,6IAAA,CAAA,UAAS,CAAC;QACjC,MAAM,aAAa,IAAI,6IAAA,CAAA,UAAS,CAAC;QAEjC,OAAO,WAAW,YAAY,CAAC;IACjC;IAOA,2BAA0B,KAAkC,EAAE,WAAW,CAAC;QACxE,IAAI,UAAU,WAAW;YACvB,OAAO;QACT;QAEA,IAAI,OAAO,UAAU,UAAU;YAC7B,OAAO,MAAM,cAAc,CAAC,SAAS;gBACnC,uBAAuB;gBACvB,uBAAuB;;QAE3B;QAEA,OAAO,WAAW,OAAO,cAAc,CAAC,SAAS;YAC/C,uBAAuB;YACvB,uBAAuB;;IAE3B"}},
    {"offset": {"line": 564, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 569, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@web3modal/common/src/utils/InputUtil.ts"],"sourcesContent":["unable to read source [project]/node_modules/@web3modal/common/src/utils/InputUtil.ts"],"names":[],"mappings":";;;AAAO,MAAM,YAAY;IAOvB,qBACE,KAAoB,EACpB,YAAgC,EAChC,QAAiC;QAEjC,MAAM,cAAc;YAClB;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;SACD;QACD,MAAM,iBAAiB,MAAM,OAAO,IAAI,MAAM,OAAO;QACrD,MAAM,YAAY,MAAM,GAAG,KAAK,OAAO,MAAM,GAAG,KAAK;QACrD,MAAM,UAAU,MAAM,GAAG,KAAK,OAAO,MAAM,GAAG,KAAK;QACnD,MAAM,WAAW,MAAM,GAAG,KAAK,OAAO,MAAM,GAAG,KAAK;QACpD,MAAM,SAAS,MAAM,GAAG,KAAK,OAAO,MAAM,GAAG,KAAK;QAElD,MAAM,UAAU,MAAM,GAAG,KAAK;QAC9B,MAAM,QAAQ,MAAM,GAAG,KAAK;QAC5B,MAAM,eAAe,MAAM,GAAG,IAAI,OAAO,MAAM,GAAG,IAAI;QAGtD,IAAI,CAAC,kBAAkB,CAAC,aAAa,WAAW,YAAY,MAAM,GAAG;YACnE,MAAM,cAAc;QACtB;QAGA,IAAI,iBAAiB,OAAO,CAAC,WAAW,CAAC,SAAS,MAAM,GAAG,KAAK,KAAK;YACnE,MAAM,cAAc;QACtB;QAGA,IAAI,iBAAiB,OAAO,cAAc;YACxC,SAAS,MAAM,GAAG;YAClB,MAAM,cAAc;QACtB;QAEA,IAAI,WAAW,OAAO;YAEpB,IAAI,CAAC,cAAc;gBACjB,SAAS;gBACT,MAAM,cAAc;YACtB;YAGA,IAAI,cAAc,SAAS,QAAQ,cAAc,SAAS,MAAM;gBAC9D,MAAM,cAAc;YACtB;QACF;QAGA,IAAI,CAAC,gBAAgB,CAAC,YAAY,QAAQ,CAAC,MAAM,GAAG,KAAK,CAAC,SAAS,CAAC,SAAS;YAC3E,MAAM,cAAc;QACtB;IACF"}},
    {"offset": {"line": 622, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 627, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@web3modal/common/src/contracts/erc20.ts"],"sourcesContent":["unable to read source [project]/node_modules/@web3modal/common/src/contracts/erc20.ts"],"names":[],"mappings":";;;AAAO,MAAM,WAAW;IACtB;QACE,UAAU;QACV,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,MAAM;gBACN,MAAM;;SAET;QACD,SAAS;QACT,iBAAiB;QACjB,MAAM;;IAER;QACE,UAAU;QACV,QAAQ;YACN;gBACE,MAAM;gBACN,MAAM;;YAER;gBACE,MAAM;gBACN,MAAM;;SAET;QACD,MAAM;QACN,SAAS;YACP;gBACE,MAAM;gBACN,MAAM;;SAET;QACD,SAAS;QACT,iBAAiB;QACjB,MAAM;;IAER;QACE,UAAU;QACV,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,MAAM;gBACN,MAAM;;SAET;QACD,SAAS;QACT,iBAAiB;QACjB,MAAM;;IAER;QACE,UAAU;QACV,QAAQ;YACN;gBACE,MAAM;gBACN,MAAM;;YAER;gBACE,MAAM;gBACN,MAAM;;YAER;gBACE,MAAM;gBACN,MAAM;;SAET;QACD,MAAM;QACN,SAAS;YACP;gBACE,MAAM;gBACN,MAAM;;SAET;QACD,SAAS;QACT,iBAAiB;QACjB,MAAM;;IAER;QACE,UAAU;QACV,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,MAAM;gBACN,MAAM;;SAET;QACD,SAAS;QACT,iBAAiB;QACjB,MAAM;;IAER;QACE,UAAU;QACV,QAAQ;YACN;gBACE,MAAM;gBACN,MAAM;;SAET;QACD,MAAM;QACN,SAAS;YACP;gBACE,MAAM;gBACN,MAAM;;SAET;QACD,SAAS;QACT,iBAAiB;QACjB,MAAM;;IAER;QACE,UAAU;QACV,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,MAAM;gBACN,MAAM;;SAET;QACD,SAAS;QACT,iBAAiB;QACjB,MAAM;;IAER;QACE,UAAU;QACV,QAAQ;YACN;gBACE,MAAM;gBACN,MAAM;;YAER;gBACE,MAAM;gBACN,MAAM;;SAET;QACD,MAAM;QACN,SAAS;YACP;gBACE,MAAM;gBACN,MAAM;;SAET;QACD,SAAS;QACT,iBAAiB;QACjB,MAAM;;IAER;QACE,UAAU;QACV,QAAQ;YACN;gBACE,MAAM;gBACN,MAAM;;YAER;gBACE,MAAM;gBACN,MAAM;;SAET;QACD,MAAM;QACN,SAAS;YACP;gBACE,MAAM;gBACN,MAAM;;SAET;QACD,SAAS;QACT,iBAAiB;QACjB,MAAM;;IAER;QACE,SAAS;QACT,iBAAiB;QACjB,MAAM;;IAER;QACE,WAAW;QACX,QAAQ;YACN;gBACE,SAAS;gBACT,MAAM;gBACN,MAAM;;YAER;gBACE,SAAS;gBACT,MAAM;gBACN,MAAM;;YAER;gBACE,SAAS;gBACT,MAAM;gBACN,MAAM;;SAET;QACD,MAAM;QACN,MAAM;;IAER;QACE,WAAW;QACX,QAAQ;YACN;gBACE,SAAS;gBACT,MAAM;gBACN,MAAM;;YAER;gBACE,SAAS;gBACT,MAAM;gBACN,MAAM;;YAER;gBACE,SAAS;gBACT,MAAM;gBACN,MAAM;;SAET;QACD,MAAM;QACN,MAAM;;CAET"}},
    {"offset": {"line": 852, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 857, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@web3modal/common/src/utils/NavigationUtil.ts"],"sourcesContent":["unable to read source [project]/node_modules/@web3modal/common/src/utils/NavigationUtil.ts"],"names":[],"mappings":";;;AAAO,MAAM,iBAAiB;IAC5B,MAAM;QACJ,KAAK"}},
    {"offset": {"line": 865, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 870, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@web3modal/common/src/utils/ConstantsUtil.ts"],"sourcesContent":["unable to read source [project]/node_modules/@web3modal/common/src/utils/ConstantsUtil.ts"],"names":[],"mappings":";;;AAAO,MAAM,gBAAgB;IAC3B,gBAAgB;IAChB,0BAA0B;QAAC;KAAoB"}},
    {"offset": {"line": 879, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 884, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@web3modal/common/src/utils/ThemeUtil.ts"],"sourcesContent":["unable to read source [project]/node_modules/@web3modal/common/src/utils/ThemeUtil.ts"],"names":[],"mappings":";;;AAmBM,SAAU,qBAAqB,cAA+B,EAAE,SAAqB;IACzF,IAAI,cAAc,SAAS;QACzB,OAAO;YACL,gBAAgB,gBAAgB,CAAC,eAAe,IAAI;YACpD,oBAAoB;;IAExB;IAEA,OAAO;QACL,gBAAgB,gBAAgB,CAAC,eAAe,IAAI;QACpD,oBAAoB;;AAExB"}},
    {"offset": {"line": 899, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 904, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@web3modal/common/index.ts"],"sourcesContent":["unable to read source [project]/node_modules/@web3modal/common/index.ts"],"names":[],"mappings":""}},
    {"offset": {"line": 914, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 935, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@web3modal/ui/node_modules/lit-element/src/lit-element.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * The main LitElement module, which defines the {@linkcode LitElement} base\n * class and related APIs.\n *\n * LitElement components can define a template and a set of observed\n * properties. Changing an observed property triggers a re-render of the\n * element.\n *\n * Import {@linkcode LitElement} and {@linkcode html} from this module to\n * create a component:\n *\n *  ```js\n * import {LitElement, html} from 'lit-element';\n *\n * class MyElement extends LitElement {\n *\n *   // Declare observed properties\n *   static get properties() {\n *     return {\n *       adjective: {}\n *     }\n *   }\n *\n *   constructor() {\n *     this.adjective = 'awesome';\n *   }\n *\n *   // Define the element's template\n *   render() {\n *     return html`<p>your ${adjective} template here</p>`;\n *   }\n * }\n *\n * customElements.define('my-element', MyElement);\n * ```\n *\n * `LitElement` extends {@linkcode ReactiveElement} and adds lit-html\n * templating. The `ReactiveElement` class is provided for users that want to\n * build their own custom element base classes that don't use lit-html.\n *\n * @packageDocumentation\n */\nimport {PropertyValues, ReactiveElement} from '@lit/reactive-element';\nimport {render, RenderOptions, noChange, RootPart} from 'lit-html';\nexport * from '@lit/reactive-element';\nexport * from 'lit-html';\n\nimport {LitUnstable} from 'lit-html';\nimport {ReactiveUnstable} from '@lit/reactive-element';\n\n/**\n * Contains types that are part of the unstable debug API.\n *\n * Everything in this API is not stable and may change or be removed in the future,\n * even on patch releases.\n */\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Unstable {\n  /**\n   * When Lit is running in dev mode and `window.emitLitDebugLogEvents` is true,\n   * we will emit 'lit-debug' events to window, with live details about the update and render\n   * lifecycle. These can be useful for writing debug tooling and visualizations.\n   *\n   * Please be aware that running with window.emitLitDebugLogEvents has performance overhead,\n   * making certain operations that are normally very cheap (like a no-op render) much slower,\n   * because we must copy data and dispatch events.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  export namespace DebugLog {\n    export type Entry =\n      | LitUnstable.DebugLog.Entry\n      | ReactiveUnstable.DebugLog.Entry;\n  }\n}\n/*\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\n/*@__INLINE__*/\nconst JSCompiler_renameProperty = <P extends PropertyKey>(\n  prop: P,\n  _obj: unknown\n): P => prop;\n\nconst DEV_MODE = true;\n\nlet issueWarning: (code: string, warning: string) => void;\n\nif (DEV_MODE) {\n  // Ensure warnings are issued only 1x, even if multiple versions of Lit\n  // are loaded.\n  const issuedWarnings: Set<string | undefined> =\n    (globalThis.litIssuedWarnings ??= new Set());\n\n  // Issue a warning, if we haven't already.\n  issueWarning = (code: string, warning: string) => {\n    warning += ` See https://lit.dev/msg/${code} for more information.`;\n    if (!issuedWarnings.has(warning)) {\n      console.warn(warning);\n      issuedWarnings.add(warning);\n    }\n  };\n}\n\n/**\n * Base element class that manages element properties and attributes, and\n * renders a lit-html template.\n *\n * To define a component, subclass `LitElement` and implement a\n * `render` method to provide the component's template. Define properties\n * using the {@linkcode LitElement.properties properties} property or the\n * {@linkcode property} decorator.\n */\nexport class LitElement extends ReactiveElement {\n  // This property needs to remain unminified.\n  static ['_$litElement$'] = true;\n\n  /**\n   * @category rendering\n   */\n  readonly renderOptions: RenderOptions = {host: this};\n\n  private __childPart: RootPart | undefined = undefined;\n\n  /**\n   * @category rendering\n   */\n  protected override createRenderRoot() {\n    const renderRoot = super.createRenderRoot();\n    // When adoptedStyleSheets are shimmed, they are inserted into the\n    // shadowRoot by createRenderRoot. Adjust the renderBefore node so that\n    // any styles in Lit content render before adoptedStyleSheets. This is\n    // important so that adoptedStyleSheets have precedence over styles in\n    // the shadowRoot.\n    this.renderOptions.renderBefore ??= renderRoot!.firstChild as ChildNode;\n    return renderRoot;\n  }\n\n  /**\n   * Updates the element. This method reflects property values to attributes\n   * and calls `render` to render DOM via lit-html. Setting properties inside\n   * this method will *not* trigger another update.\n   * @param changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected override update(changedProperties: PropertyValues) {\n    // Setting properties in `render` should not trigger an update. Since\n    // updates are allowed after super.update, it's important to call `render`\n    // before that.\n    const value = this.render();\n    if (!this.hasUpdated) {\n      this.renderOptions.isConnected = this.isConnected;\n    }\n    super.update(changedProperties);\n    this.__childPart = render(value, this.renderRoot, this.renderOptions);\n  }\n\n  /**\n   * Invoked when the component is added to the document's DOM.\n   *\n   * In `connectedCallback()` you should setup tasks that should only occur when\n   * the element is connected to the document. The most common of these is\n   * adding event listeners to nodes external to the element, like a keydown\n   * event handler added to the window.\n   *\n   * ```ts\n   * connectedCallback() {\n   *   super.connectedCallback();\n   *   addEventListener('keydown', this._handleKeydown);\n   * }\n   * ```\n   *\n   * Typically, anything done in `connectedCallback()` should be undone when the\n   * element is disconnected, in `disconnectedCallback()`.\n   *\n   * @category lifecycle\n   */\n  override connectedCallback() {\n    super.connectedCallback();\n    this.__childPart?.setConnected(true);\n  }\n\n  /**\n   * Invoked when the component is removed from the document's DOM.\n   *\n   * This callback is the main signal to the element that it may no longer be\n   * used. `disconnectedCallback()` should ensure that nothing is holding a\n   * reference to the element (such as event listeners added to nodes external\n   * to the element), so that it is free to be garbage collected.\n   *\n   * ```ts\n   * disconnectedCallback() {\n   *   super.disconnectedCallback();\n   *   window.removeEventListener('keydown', this._handleKeydown);\n   * }\n   * ```\n   *\n   * An element may be re-connected after being disconnected.\n   *\n   * @category lifecycle\n   */\n  override disconnectedCallback() {\n    super.disconnectedCallback();\n    this.__childPart?.setConnected(false);\n  }\n\n  /**\n   * Invoked on each update to perform rendering tasks. This method may return\n   * any value renderable by lit-html's `ChildPart` - typically a\n   * `TemplateResult`. Setting properties inside this method will *not* trigger\n   * the element to update.\n   * @category rendering\n   */\n  protected render(): unknown {\n    return noChange;\n  }\n}\n\n/**\n * Ensure this class is marked as `finalized` as an optimization ensuring\n * it will not needlessly try to `finalize`.\n *\n * Note this property name is a string to prevent breaking Closure JS Compiler\n * optimizations. See @lit/reactive-element for more information.\n */\n(LitElement as unknown as Record<string, unknown>)[\n  JSCompiler_renameProperty('finalized', LitElement)\n] = true;\n\n// Install hydration if available\nglobalThis.litElementHydrateSupport?.({LitElement});\n\n// Apply polyfills if available\nconst polyfillSupport = DEV_MODE\n  ? globalThis.litElementPolyfillSupportDevMode\n  : globalThis.litElementPolyfillSupport;\npolyfillSupport?.({LitElement});\n\n/**\n * END USERS SHOULD NOT RELY ON THIS OBJECT.\n *\n * Private exports for use by other Lit packages, not intended for use by\n * external users.\n *\n * We currently do not make a mangled rollup build of the lit-ssr code. In order\n * to keep a number of (otherwise private) top-level exports  mangled in the\n * client side code, we export a _$LE object containing those members (or\n * helper methods for accessing private fields of those members), and then\n * re-export them for use in lit-ssr. This keeps lit-ssr agnostic to whether the\n * client-side code is being used in `dev` mode or `prod` mode.\n *\n * This has a unique name, to disambiguate it from private exports in\n * lit-html, since this module re-exports all of lit-html.\n *\n * @private\n */\nexport const _$LE = {\n  _$attributeToProperty: (\n    el: LitElement,\n    name: string,\n    value: string | null\n  ) => {\n    // eslint-disable-next-line\n    (el as any)._$attributeToProperty(name, value);\n  },\n  // eslint-disable-next-line\n  _$changedProperties: (el: LitElement) => (el as any)._$changedProperties,\n};\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for LitElement usage.\n(globalThis.litElementVersions ??= []).push('4.1.1');\nif (DEV_MODE && globalThis.litElementVersions.length > 1) {\n  issueWarning!(\n    'multiple-versions',\n    `Multiple versions of Lit loaded. Loading multiple versions ` +\n      `is not recommended.`\n  );\n}\n"],"names":[],"mappings":"AAAA;;;;IAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0EA;;;;;IAMA,aAAA,GACA,MAAM,4BAA4B,CAChC,MACA,OACM;AAER,MAAM,WAAW;AAEjB,IAAI;AAEJ,wCAAc;IACZ,uEAAuE;IACvE,cAAc;IACd,MAAM,iBACH,WAAW,iBAAiB,KAAK,IAAI;IAExC,0CAA0C;IAC1C,eAAe,CAAC,MAAc;QAC5B,WAAW,CAAA,yBAAA,EAA4B,KAAI,sBAAA,CAAwB;QACnE,IAAI,CAAC,eAAe,GAAG,CAAC,UAAU;YAChC,QAAQ,IAAI,CAAC;YACb,eAAe,GAAG,CAAC;QACrB;IACF;AACF;AAWM,MAAO,mBAAmB,+OAAA,CAAA,kBAAe;IAA/C,aAAA;;QAIE;;YAGS,IAAA,CAAA,aAAa,GAAkB;YAAC,MAAM,IAAI;QAAA;QAE3C,IAAA,CAAA,WAAW,GAAyB;IA8F9C;IA5FE;;QAGmB,mBAAgB;QACjC,MAAM,aAAa,KAAK,CAAC;QACzB,kEAAkE;QAClE,uEAAuE;QACvE,sEAAsE;QACtE,sEAAsE;QACtE,kBAAkB;QAClB,IAAI,CAAC,aAAa,CAAC,YAAY,KAAK,WAAY,UAAuB;QACvE,OAAO;IACT;IAEA;;;;;;QAOmB,OAAO,iBAAiC,EAAA;QACzD,qEAAqE;QACrE,0EAA0E;QAC1E,eAAe;QACf,MAAM,QAAQ,IAAI,CAAC,MAAM;QACzB,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACpB,IAAI,CAAC,aAAa,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW;QACnD;QACA,KAAK,CAAC,OAAO;QACb,IAAI,CAAC,WAAW,GAAG,CAAA,GAAA,sMAAA,CAAA,SAAM,AAAN,EAAO,OAAO,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,aAAa;IACtE;IAEA;;;;;;;;;;;;;;;;;;;QAoBS,oBAAiB;QACxB,KAAK,CAAC;QACN,IAAI,CAAC,WAAW,EAAE,aAAa;IACjC;IAEA;;;;;;;;;;;;;;;;;;QAmBS,uBAAoB;QAC3B,KAAK,CAAC;QACN,IAAI,CAAC,WAAW,EAAE,aAAa;IACjC;IAEA;;;;;;QAOU,SAAM;QACd,OAAO,sMAAA,CAAA,WAAQ;IACjB;;AArGA,4CAA4C;AACrC,UAAA,CAAC,gBAAgB,GAAG;AAuG7B;;;;;;IAOC,UAAiD,CAChD,0BAA0B,aAAa,YACxC,GAAG;AAEJ,iCAAiC;AACjC,WAAW,wBAAwB,GAAG;IAAC;AAAU;AAEjD,+BAA+B;AAC/B,MAAM,kBAAkB,uCACpB,WAAW,gCAAgC;AAE/C,kBAAkB;IAAC;AAAU;AAoBtB,MAAM,OAAO;IAClB,uBAAuB,CACrB,IACA,MACA;QAEA,2BAA2B;QAC1B,GAAW,qBAAqB,CAAC,MAAM;IAC1C;IACA,2BAA2B;IAC3B,qBAAqB,CAAC,KAAoB,GAAW,mBAAmB;;AAG1E,2EAA2E;AAC3E,oEAAoE;AACpE,CAAC,WAAW,kBAAkB,KAAK,EAAE,EAAE,IAAI,CAAC;AAC5C,IAAI,YAAY,WAAW,kBAAkB,CAAC,MAAM,GAAG,GAAG;IACxD,aACE,qBACA,CAAA,2DAAA,CAA6D,GAC3D,CAAA,mBAAA,CAAqB;AAE3B"}},
    {"offset": {"line": 1138, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1153, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@web3modal/scaffold/node_modules/lit-element/src/lit-element.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * The main LitElement module, which defines the {@linkcode LitElement} base\n * class and related APIs.\n *\n * LitElement components can define a template and a set of observed\n * properties. Changing an observed property triggers a re-render of the\n * element.\n *\n * Import {@linkcode LitElement} and {@linkcode html} from this module to\n * create a component:\n *\n *  ```js\n * import {LitElement, html} from 'lit-element';\n *\n * class MyElement extends LitElement {\n *\n *   // Declare observed properties\n *   static get properties() {\n *     return {\n *       adjective: {}\n *     }\n *   }\n *\n *   constructor() {\n *     this.adjective = 'awesome';\n *   }\n *\n *   // Define the element's template\n *   render() {\n *     return html`<p>your ${adjective} template here</p>`;\n *   }\n * }\n *\n * customElements.define('my-element', MyElement);\n * ```\n *\n * `LitElement` extends {@linkcode ReactiveElement} and adds lit-html\n * templating. The `ReactiveElement` class is provided for users that want to\n * build their own custom element base classes that don't use lit-html.\n *\n * @packageDocumentation\n */\nimport {PropertyValues, ReactiveElement} from '@lit/reactive-element';\nimport {render, RenderOptions, noChange, RootPart} from 'lit-html';\nexport * from '@lit/reactive-element';\nexport * from 'lit-html';\n\nimport {LitUnstable} from 'lit-html';\nimport {ReactiveUnstable} from '@lit/reactive-element';\n\n/**\n * Contains types that are part of the unstable debug API.\n *\n * Everything in this API is not stable and may change or be removed in the future,\n * even on patch releases.\n */\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Unstable {\n  /**\n   * When Lit is running in dev mode and `window.emitLitDebugLogEvents` is true,\n   * we will emit 'lit-debug' events to window, with live details about the update and render\n   * lifecycle. These can be useful for writing debug tooling and visualizations.\n   *\n   * Please be aware that running with window.emitLitDebugLogEvents has performance overhead,\n   * making certain operations that are normally very cheap (like a no-op render) much slower,\n   * because we must copy data and dispatch events.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  export namespace DebugLog {\n    export type Entry =\n      | LitUnstable.DebugLog.Entry\n      | ReactiveUnstable.DebugLog.Entry;\n  }\n}\n/*\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\n/*@__INLINE__*/\nconst JSCompiler_renameProperty = <P extends PropertyKey>(\n  prop: P,\n  _obj: unknown\n): P => prop;\n\nconst DEV_MODE = true;\n\nlet issueWarning: (code: string, warning: string) => void;\n\nif (DEV_MODE) {\n  // Ensure warnings are issued only 1x, even if multiple versions of Lit\n  // are loaded.\n  const issuedWarnings: Set<string | undefined> =\n    (globalThis.litIssuedWarnings ??= new Set());\n\n  // Issue a warning, if we haven't already.\n  issueWarning = (code: string, warning: string) => {\n    warning += ` See https://lit.dev/msg/${code} for more information.`;\n    if (!issuedWarnings.has(warning)) {\n      console.warn(warning);\n      issuedWarnings.add(warning);\n    }\n  };\n}\n\n/**\n * Base element class that manages element properties and attributes, and\n * renders a lit-html template.\n *\n * To define a component, subclass `LitElement` and implement a\n * `render` method to provide the component's template. Define properties\n * using the {@linkcode LitElement.properties properties} property or the\n * {@linkcode property} decorator.\n */\nexport class LitElement extends ReactiveElement {\n  // This property needs to remain unminified.\n  static ['_$litElement$'] = true;\n\n  /**\n   * @category rendering\n   */\n  readonly renderOptions: RenderOptions = {host: this};\n\n  private __childPart: RootPart | undefined = undefined;\n\n  /**\n   * @category rendering\n   */\n  protected override createRenderRoot() {\n    const renderRoot = super.createRenderRoot();\n    // When adoptedStyleSheets are shimmed, they are inserted into the\n    // shadowRoot by createRenderRoot. Adjust the renderBefore node so that\n    // any styles in Lit content render before adoptedStyleSheets. This is\n    // important so that adoptedStyleSheets have precedence over styles in\n    // the shadowRoot.\n    this.renderOptions.renderBefore ??= renderRoot!.firstChild as ChildNode;\n    return renderRoot;\n  }\n\n  /**\n   * Updates the element. This method reflects property values to attributes\n   * and calls `render` to render DOM via lit-html. Setting properties inside\n   * this method will *not* trigger another update.\n   * @param changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected override update(changedProperties: PropertyValues) {\n    // Setting properties in `render` should not trigger an update. Since\n    // updates are allowed after super.update, it's important to call `render`\n    // before that.\n    const value = this.render();\n    if (!this.hasUpdated) {\n      this.renderOptions.isConnected = this.isConnected;\n    }\n    super.update(changedProperties);\n    this.__childPart = render(value, this.renderRoot, this.renderOptions);\n  }\n\n  /**\n   * Invoked when the component is added to the document's DOM.\n   *\n   * In `connectedCallback()` you should setup tasks that should only occur when\n   * the element is connected to the document. The most common of these is\n   * adding event listeners to nodes external to the element, like a keydown\n   * event handler added to the window.\n   *\n   * ```ts\n   * connectedCallback() {\n   *   super.connectedCallback();\n   *   addEventListener('keydown', this._handleKeydown);\n   * }\n   * ```\n   *\n   * Typically, anything done in `connectedCallback()` should be undone when the\n   * element is disconnected, in `disconnectedCallback()`.\n   *\n   * @category lifecycle\n   */\n  override connectedCallback() {\n    super.connectedCallback();\n    this.__childPart?.setConnected(true);\n  }\n\n  /**\n   * Invoked when the component is removed from the document's DOM.\n   *\n   * This callback is the main signal to the element that it may no longer be\n   * used. `disconnectedCallback()` should ensure that nothing is holding a\n   * reference to the element (such as event listeners added to nodes external\n   * to the element), so that it is free to be garbage collected.\n   *\n   * ```ts\n   * disconnectedCallback() {\n   *   super.disconnectedCallback();\n   *   window.removeEventListener('keydown', this._handleKeydown);\n   * }\n   * ```\n   *\n   * An element may be re-connected after being disconnected.\n   *\n   * @category lifecycle\n   */\n  override disconnectedCallback() {\n    super.disconnectedCallback();\n    this.__childPart?.setConnected(false);\n  }\n\n  /**\n   * Invoked on each update to perform rendering tasks. This method may return\n   * any value renderable by lit-html's `ChildPart` - typically a\n   * `TemplateResult`. Setting properties inside this method will *not* trigger\n   * the element to update.\n   * @category rendering\n   */\n  protected render(): unknown {\n    return noChange;\n  }\n}\n\n/**\n * Ensure this class is marked as `finalized` as an optimization ensuring\n * it will not needlessly try to `finalize`.\n *\n * Note this property name is a string to prevent breaking Closure JS Compiler\n * optimizations. See @lit/reactive-element for more information.\n */\n(LitElement as unknown as Record<string, unknown>)[\n  JSCompiler_renameProperty('finalized', LitElement)\n] = true;\n\n// Install hydration if available\nglobalThis.litElementHydrateSupport?.({LitElement});\n\n// Apply polyfills if available\nconst polyfillSupport = DEV_MODE\n  ? globalThis.litElementPolyfillSupportDevMode\n  : globalThis.litElementPolyfillSupport;\npolyfillSupport?.({LitElement});\n\n/**\n * END USERS SHOULD NOT RELY ON THIS OBJECT.\n *\n * Private exports for use by other Lit packages, not intended for use by\n * external users.\n *\n * We currently do not make a mangled rollup build of the lit-ssr code. In order\n * to keep a number of (otherwise private) top-level exports  mangled in the\n * client side code, we export a _$LE object containing those members (or\n * helper methods for accessing private fields of those members), and then\n * re-export them for use in lit-ssr. This keeps lit-ssr agnostic to whether the\n * client-side code is being used in `dev` mode or `prod` mode.\n *\n * This has a unique name, to disambiguate it from private exports in\n * lit-html, since this module re-exports all of lit-html.\n *\n * @private\n */\nexport const _$LE = {\n  _$attributeToProperty: (\n    el: LitElement,\n    name: string,\n    value: string | null\n  ) => {\n    // eslint-disable-next-line\n    (el as any)._$attributeToProperty(name, value);\n  },\n  // eslint-disable-next-line\n  _$changedProperties: (el: LitElement) => (el as any)._$changedProperties,\n};\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for LitElement usage.\n(globalThis.litElementVersions ??= []).push('4.1.1');\nif (DEV_MODE && globalThis.litElementVersions.length > 1) {\n  issueWarning!(\n    'multiple-versions',\n    `Multiple versions of Lit loaded. Loading multiple versions ` +\n      `is not recommended.`\n  );\n}\n"],"names":[],"mappings":"AAAA;;;;IAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0EA;;;;;IAMA,aAAA,GACA,MAAM,4BAA4B,CAChC,MACA,OACM;AAER,MAAM,WAAW;AAEjB,IAAI;AAEJ,wCAAc;IACZ,uEAAuE;IACvE,cAAc;IACd,MAAM,iBACH,WAAW,iBAAiB,KAAK,IAAI;IAExC,0CAA0C;IAC1C,eAAe,CAAC,MAAc;QAC5B,WAAW,CAAA,yBAAA,EAA4B,KAAI,sBAAA,CAAwB;QACnE,IAAI,CAAC,eAAe,GAAG,CAAC,UAAU;YAChC,QAAQ,IAAI,CAAC;YACb,eAAe,GAAG,CAAC;QACrB;IACF;AACF;AAWM,MAAO,mBAAmB,qPAAA,CAAA,kBAAe;IAA/C,aAAA;;QAIE;;YAGS,IAAA,CAAA,aAAa,GAAkB;YAAC,MAAM,IAAI;QAAA;QAE3C,IAAA,CAAA,WAAW,GAAyB;IA8F9C;IA5FE;;QAGmB,mBAAgB;QACjC,MAAM,aAAa,KAAK,CAAC;QACzB,kEAAkE;QAClE,uEAAuE;QACvE,sEAAsE;QACtE,sEAAsE;QACtE,kBAAkB;QAClB,IAAI,CAAC,aAAa,CAAC,YAAY,KAAK,WAAY,UAAuB;QACvE,OAAO;IACT;IAEA;;;;;;QAOmB,OAAO,iBAAiC,EAAA;QACzD,qEAAqE;QACrE,0EAA0E;QAC1E,eAAe;QACf,MAAM,QAAQ,IAAI,CAAC,MAAM;QACzB,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACpB,IAAI,CAAC,aAAa,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW;QACnD;QACA,KAAK,CAAC,OAAO;QACb,IAAI,CAAC,WAAW,GAAG,CAAA,GAAA,4MAAA,CAAA,SAAM,AAAN,EAAO,OAAO,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,aAAa;IACtE;IAEA;;;;;;;;;;;;;;;;;;;QAoBS,oBAAiB;QACxB,KAAK,CAAC;QACN,IAAI,CAAC,WAAW,EAAE,aAAa;IACjC;IAEA;;;;;;;;;;;;;;;;;;QAmBS,uBAAoB;QAC3B,KAAK,CAAC;QACN,IAAI,CAAC,WAAW,EAAE,aAAa;IACjC;IAEA;;;;;;QAOU,SAAM;QACd,OAAO,4MAAA,CAAA,WAAQ;IACjB;;AArGA,4CAA4C;AACrC,UAAA,CAAC,gBAAgB,GAAG;AAuG7B;;;;;;IAOC,UAAiD,CAChD,0BAA0B,aAAa,YACxC,GAAG;AAEJ,iCAAiC;AACjC,WAAW,wBAAwB,GAAG;IAAC;AAAU;AAEjD,+BAA+B;AAC/B,MAAM,kBAAkB,uCACpB,WAAW,gCAAgC;AAE/C,kBAAkB;IAAC;AAAU;AAoBtB,MAAM,OAAO;IAClB,uBAAuB,CACrB,IACA,MACA;QAEA,2BAA2B;QAC1B,GAAW,qBAAqB,CAAC,MAAM;IAC1C;IACA,2BAA2B;IAC3B,qBAAqB,CAAC,KAAoB,GAAW,mBAAmB;;AAG1E,2EAA2E;AAC3E,oEAAoE;AACpE,CAAC,WAAW,kBAAkB,KAAK,EAAE,EAAE,IAAI,CAAC;AAC5C,IAAI,YAAY,WAAW,kBAAkB,CAAC,MAAM,GAAG,GAAG;IACxD,aACE,qBACA,CAAA,2DAAA,CAA6D,GAC3D,CAAA,mBAAA,CAAqB;AAE3B"}},
    {"offset": {"line": 1356, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1371, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 1377, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1394, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 1405, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1427, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 1430, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1444, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 1447, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1461, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 1464, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1478, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 1484, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1501, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 1512, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1534, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 1537, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1551, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 1554, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1568, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 1571, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1585, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@web3modal/wagmi/node_modules/@walletconnect/relay-api/src/misc.ts","/turbopack/[project]/node_modules/@web3modal/wagmi/node_modules/@walletconnect/relay-api/src/validators.ts","/turbopack/[project]/node_modules/@web3modal/wagmi/node_modules/@walletconnect/relay-api/src/parsers.ts","/turbopack/[project]/node_modules/@web3modal/wagmi/node_modules/@walletconnect/relay-api/src/jsonrpc.ts"],"sourcesContent":["export function assertType(obj: any, key: string, type = \"string\") {\n  if (!obj[key] || typeof obj[key] !== type) {\n    throw new Error(`Missing or invalid \"${key}\" param`);\n  }\n}\n\nexport function hasRequiredParams(params: any, required: string[]) {\n  let matches = true;\n  required.forEach((key) => {\n    const exists = key in params;\n    if (!exists) {\n      matches = false;\n    }\n  });\n  return matches;\n}\n\nexport function hasExactParamsLength(params: any, length: number): boolean {\n  return Array.isArray(params) ? params.length === length : Object.keys(params).length === length;\n}\n\nexport function hasRequiredParamsLength(params: any, minLength: number): boolean {\n  return Array.isArray(params)\n    ? params.length >= minLength\n    : Object.keys(params).length >= minLength;\n}\n\nexport function checkParams(params: any, required: string[], optional: string[]) {\n  const exact = !optional.length;\n  const matchesLength = exact\n    ? hasExactParamsLength(params, required.length)\n    : hasRequiredParamsLength(params, required.length);\n  if (!matchesLength) return false;\n  return hasRequiredParams(params, required);\n}\n\nexport function methodEndsWith(method: string, expected: string, separator = \"_\") {\n  const split = method.split(separator);\n  return split[split.length - 1].trim().toLowerCase() === expected.trim().toLowerCase();\n}\n","import { JsonRpcRequest } from \"@walletconnect/jsonrpc-types\";\n\nimport { checkParams, methodEndsWith } from \"./misc\";\nimport { RelayJsonRpc } from \"./types\";\n\n// ---------- Subscribe ----------------------------------------------- //\n\nexport function isSubscribeRequest(\n  request: JsonRpcRequest,\n): request is JsonRpcRequest<RelayJsonRpc.SubscribeParams> {\n  return isSubscribeMethod(request.method) && isSubscribeParams(request.params);\n}\n\nexport function isSubscribeMethod(method: string): boolean {\n  return methodEndsWith(method, \"subscribe\");\n}\n\nexport function isSubscribeParams(params: any): params is RelayJsonRpc.SubscribeParams {\n  const required = [\"topic\"];\n  const optional: string[] = [];\n  return checkParams(params, required, optional);\n}\n\n// ---------- Publish ----------------------------------------------- //\n\nexport function isPublishRequest(\n  request: JsonRpcRequest,\n): request is JsonRpcRequest<RelayJsonRpc.PublishParams> {\n  return isPublishMethod(request.method) && isPublishParams(request.params);\n}\n\nexport function isPublishMethod(method: string): boolean {\n  return methodEndsWith(method, \"publish\");\n}\n\nexport function isPublishParams(params: any): params is RelayJsonRpc.PublishParams {\n  const required = [\"message\", \"topic\", \"ttl\"];\n  const optional = [\"prompt\", \"tag\"];\n  return checkParams(params, required, optional);\n}\n\n// ---------- Unsubscribe ----------------------------------------------- //\n\nexport function isUnsubscribeRequest(\n  request: JsonRpcRequest,\n): request is JsonRpcRequest<RelayJsonRpc.UnsubscribeParams> {\n  return isUnsubscribeMethod(request.method) && isUnsubscribeParams(request.params);\n}\n\nexport function isUnsubscribeMethod(method: string): boolean {\n  return methodEndsWith(method, \"unsubscribe\");\n}\n\nexport function isUnsubscribeParams(params: any): params is RelayJsonRpc.UnsubscribeParams {\n  const required = [\"id\", \"topic\"];\n  const optional: string[] = [];\n  return checkParams(params, required, optional);\n}\n\n// ---------- Subscription ----------------------------------------------- //\n\nexport function isSubscriptionRequest(\n  request: JsonRpcRequest,\n): request is JsonRpcRequest<RelayJsonRpc.SubscriptionParams> {\n  return isSubscriptionMethod(request.method) && isSubscriptionParams(request.params);\n}\n\nexport function isSubscriptionMethod(method: string): boolean {\n  return methodEndsWith(method, \"subscription\");\n}\n\nexport function isSubscriptionParams(params: any): params is RelayJsonRpc.SubscriptionParams {\n  const required = [\"id\", \"data\"];\n  const optional: string[] = [];\n  return checkParams(params, required, optional);\n}\n","import { JsonRpcRequest } from \"@walletconnect/jsonrpc-types\";\n\nimport { RelayJsonRpc } from \"./types\";\nimport { assertType } from \"./misc\";\nimport {\n  isPublishMethod,\n  isPublishParams,\n  isSubscribeMethod,\n  isSubscribeParams,\n  isSubscriptionMethod,\n  isSubscriptionParams,\n  isUnsubscribeMethod,\n  isUnsubscribeParams,\n} from \"./validators\";\n\nexport function parseSubscribeRequest(request: JsonRpcRequest): RelayJsonRpc.SubscribeParams {\n  if (!isSubscribeMethod(request.method)) {\n    throw new Error(\"JSON-RPC Request has invalid subscribe method\");\n  }\n  if (!isSubscribeParams(request.params)) {\n    throw new Error(\"JSON-RPC Request has invalid subscribe params\");\n  }\n  const params = request.params as RelayJsonRpc.SubscribeParams;\n\n  assertType(params, \"topic\");\n\n  return params;\n}\n\nexport function parsePublishRequest(request: JsonRpcRequest): RelayJsonRpc.PublishParams {\n  if (!isPublishMethod(request.method)) {\n    throw new Error(\"JSON-RPC Request has invalid publish method\");\n  }\n  if (!isPublishParams(request.params)) {\n    throw new Error(\"JSON-RPC Request has invalid publish params\");\n  }\n  const params = request.params as RelayJsonRpc.PublishParams;\n\n  assertType(params, \"topic\");\n  assertType(params, \"message\");\n  assertType(params, \"ttl\", \"number\");\n\n  return params;\n}\n\nexport function parseUnsubscribeRequest(request: JsonRpcRequest): RelayJsonRpc.UnsubscribeParams {\n  if (!isUnsubscribeMethod(request.method)) {\n    throw new Error(\"JSON-RPC Request has invalid unsubscribe method\");\n  }\n  if (!isUnsubscribeParams(request.params)) {\n    throw new Error(\"JSON-RPC Request has invalid unsubscribe params\");\n  }\n  const params = request.params as RelayJsonRpc.UnsubscribeParams;\n\n  assertType(params, \"id\");\n\n  return params;\n}\n\nexport function parseSubscriptionRequest(request: JsonRpcRequest): RelayJsonRpc.SubscriptionParams {\n  if (!isSubscriptionMethod(request.method)) {\n    throw new Error(\"JSON-RPC Request has invalid subscription method\");\n  }\n  if (!isSubscriptionParams(request.params)) {\n    throw new Error(\"JSON-RPC Request has invalid subscription params\");\n  }\n  const params = request.params as RelayJsonRpc.SubscriptionParams;\n\n  assertType(params, \"id\");\n  assertType(params, \"data\");\n\n  return params;\n}\n","import { RelayJsonRpc } from \"./types\";\n\nexport const RELAY_JSONRPC: { [protocol: string]: RelayJsonRpc.Methods } = {\n  waku: {\n    publish: \"waku_publish\",\n    batchPublish: \"waku_batchPublish\",\n    subscribe: \"waku_subscribe\",\n    batchSubscribe: \"waku_batchSubscribe\",\n    subscription: \"waku_subscription\",\n    unsubscribe: \"waku_unsubscribe\",\n    batchUnsubscribe: \"waku_batchUnsubscribe\",\n    batchFetchMessages: \"waku_batchFetchMessages\",\n  },\n  irn: {\n    publish: \"irn_publish\",\n    batchPublish: \"irn_batchPublish\",\n    subscribe: \"irn_subscribe\",\n    batchSubscribe: \"irn_batchSubscribe\",\n    subscription: \"irn_subscription\",\n    unsubscribe: \"irn_unsubscribe\",\n    batchUnsubscribe: \"irn_batchUnsubscribe\",\n    batchFetchMessages: \"irn_batchFetchMessages\",\n  },\n  iridium: {\n    publish: \"iridium_publish\",\n    batchPublish: \"iridium_batchPublish\",\n    subscribe: \"iridium_subscribe\",\n    batchSubscribe: \"iridium_batchSubscribe\",\n    subscription: \"iridium_subscription\",\n    unsubscribe: \"iridium_unsubscribe\",\n    batchUnsubscribe: \"iridium_batchUnsubscribe\",\n    batchFetchMessages: \"iridium_batchFetchMessages\",\n  },\n};\n"],"names":["type","obj","key","matches","required","params","length","minLength","optional","expected","split","method"],"mappings":"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"}},
    {"offset": {"line": 1735, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1740, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@web3modal/wagmi/node_modules/@walletconnect/types/src/core/core.ts","/turbopack/[project]/node_modules/@web3modal/wagmi/node_modules/@walletconnect/types/src/core/crypto.ts","/turbopack/[project]/node_modules/@web3modal/wagmi/node_modules/@walletconnect/types/src/core/history.ts","/turbopack/[project]/node_modules/@web3modal/wagmi/node_modules/@walletconnect/types/src/core/messages.ts","/turbopack/[project]/node_modules/@web3modal/wagmi/node_modules/@walletconnect/types/src/core/publisher.ts","/turbopack/[project]/node_modules/@web3modal/wagmi/node_modules/@walletconnect/types/src/core/relayer.ts","/turbopack/[project]/node_modules/@web3modal/wagmi/node_modules/@walletconnect/types/src/core/store.ts","/turbopack/[project]/node_modules/@web3modal/wagmi/node_modules/@walletconnect/types/src/core/subscriber.ts","/turbopack/[project]/node_modules/@web3modal/wagmi/node_modules/@walletconnect/types/src/core/keychain.ts","/turbopack/[project]/node_modules/@web3modal/wagmi/node_modules/@walletconnect/types/src/core/expirer.ts","/turbopack/[project]/node_modules/@web3modal/wagmi/node_modules/@walletconnect/types/src/core/pairing.ts","/turbopack/[project]/node_modules/@web3modal/wagmi/node_modules/@walletconnect/types/src/core/verify.ts","/turbopack/[project]/node_modules/@web3modal/wagmi/node_modules/@walletconnect/types/src/core/echo.ts","/turbopack/[project]/node_modules/@web3modal/wagmi/node_modules/@walletconnect/types/src/sign-client/client.ts","/turbopack/[project]/node_modules/@web3modal/wagmi/node_modules/@walletconnect/types/src/sign-client/engine.ts"],"sourcesContent":["import { IEvents } from \"@walletconnect/events\";\nimport { IHeartBeat } from \"@walletconnect/heartbeat\";\nimport { IKeyValueStorage, KeyValueStorageOptions } from \"@walletconnect/keyvaluestorage\";\n\nimport { ICrypto } from \"./crypto\";\nimport { IRelayer } from \"./relayer\";\nimport { IKeyChain } from \"./keychain\";\nimport { IJsonRpcHistory } from \"./history\";\nimport { IExpirer } from \"./expirer\";\nimport { IPairing } from \"./pairing\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { IVerify } from \"./verify\";\nimport { IEchoClient } from \"./echo\";\nexport declare namespace CoreTypes {\n  interface Options {\n    projectId?: string;\n    name?: string;\n    relayUrl?: string;\n    logger?: string | Logger;\n    keychain?: IKeyChain;\n    storage?: IKeyValueStorage;\n    storageOptions?: KeyValueStorageOptions;\n    maxLogBlobSizeInBytes?: number;\n    customStoragePrefix?: string;\n  }\n\n  interface Metadata {\n    name: string;\n    description: string;\n    url: string;\n    icons: string[];\n    verifyUrl?: string;\n    redirect?: {\n      native?: string;\n      universal?: string;\n    };\n  }\n}\n\nexport abstract class ICore extends IEvents {\n  public readonly protocol = \"wc\";\n  public readonly version = 2;\n\n  public abstract readonly name: string;\n  public abstract readonly context: string;\n  public abstract readonly relayUrl?: string;\n  public abstract readonly projectId?: string;\n  public abstract readonly customStoragePrefix: string;\n\n  public abstract logger: Logger;\n  public abstract heartbeat: IHeartBeat;\n  public abstract crypto: ICrypto;\n  public abstract relayer: IRelayer;\n  public abstract storage: IKeyValueStorage;\n  public abstract history: IJsonRpcHistory;\n  public abstract expirer: IExpirer;\n  public abstract pairing: IPairing;\n  public abstract verify: IVerify;\n  public abstract echoClient: IEchoClient;\n\n  constructor(public opts?: CoreTypes.Options) {\n    super();\n  }\n\n  public abstract start(): Promise<void>;\n}\n","import { JsonRpcPayload } from \"@walletconnect/jsonrpc-types\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore } from \"./core\";\nimport { IKeyChain } from \"./keychain\";\n\nexport declare namespace CryptoTypes {\n  export interface Participant {\n    publicKey: string;\n  }\n\n  export interface KeyPair {\n    privateKey: string;\n    publicKey: string;\n  }\n\n  export interface EncryptParams {\n    message: string;\n    symKey: string;\n    type?: number;\n    iv?: string;\n    senderPublicKey?: string;\n  }\n\n  export interface DecryptParams {\n    symKey: string;\n    encoded: string;\n  }\n\n  export interface EncodingParams {\n    type: Uint8Array;\n    sealed: Uint8Array;\n    iv: Uint8Array;\n    senderPublicKey?: Uint8Array;\n  }\n\n  export interface EncodeOptions {\n    type?: number;\n    senderPublicKey?: string;\n    receiverPublicKey?: string;\n  }\n\n  export interface DecodeOptions {\n    receiverPublicKey?: string;\n  }\n\n  export interface EncodingValidation {\n    type: number;\n    senderPublicKey?: string;\n    receiverPublicKey?: string;\n  }\n\n  export interface TypeOneParams {\n    type: 1;\n    senderPublicKey: string;\n    receiverPublicKey: string;\n  }\n}\n\nexport abstract class ICrypto {\n  public abstract name: string;\n\n  public abstract readonly context: string;\n\n  public abstract keychain: IKeyChain;\n\n  constructor(\n    public core: ICore,\n    public logger: Logger,\n    // @ts-ignore\n    keychain?: IKeyChain,\n  ) {}\n\n  public abstract init(): Promise<void>;\n\n  public abstract hasKeys(tag: string): boolean;\n\n  public abstract getClientId(): Promise<string>;\n\n  public abstract generateKeyPair(): Promise<string>;\n\n  public abstract generateSharedKey(\n    selfPublicKey: string,\n    peerPublicKey: string,\n    overrideTopic?: string,\n  ): Promise<string>;\n\n  public abstract setSymKey(symKey: string, overrideTopic?: string): Promise<string>;\n\n  public abstract deleteKeyPair(publicKey: string): Promise<void>;\n\n  public abstract deleteSymKey(topic: string): Promise<void>;\n\n  public abstract encode(\n    topic: string,\n    payload: JsonRpcPayload,\n    opts?: CryptoTypes.EncodeOptions,\n  ): Promise<string>;\n\n  public abstract decode(\n    topic: string,\n    encoded: string,\n    opts?: CryptoTypes.DecodeOptions,\n  ): Promise<JsonRpcPayload>;\n\n  public abstract signJWT(aud: string): Promise<string>;\n  public abstract getPayloadType(encoded: string): number;\n  public abstract getPayloadSenderPublicKey(encoded: string): string | undefined;\n}\n","import { IEvents } from \"@walletconnect/events\";\nimport {\n  ErrorResponse,\n  JsonRpcRequest,\n  JsonRpcResponse,\n  RequestArguments,\n} from \"@walletconnect/jsonrpc-types\";\nimport { Logger } from \"@walletconnect/logger\";\n\nimport { ICore } from \"./core\";\n\nexport interface JsonRpcRecord {\n  id: number;\n  topic: string;\n  request: RequestArguments;\n  chainId?: string;\n  response?: { result: any } | { error: ErrorResponse };\n  expiry?: number;\n}\n\nexport interface RequestEvent {\n  topic: string;\n  request: JsonRpcRequest;\n  chainId?: string;\n}\n\nexport abstract class IJsonRpcHistory extends IEvents {\n  public records = new Map<number, JsonRpcRecord>();\n\n  public abstract readonly context: string;\n\n  public abstract readonly size: number;\n\n  public abstract readonly keys: number[];\n\n  public abstract readonly values: JsonRpcRecord[];\n\n  public abstract readonly pending: RequestEvent[];\n\n  constructor(public core: ICore, public logger: Logger) {\n    super();\n  }\n\n  public abstract init(): Promise<void>;\n\n  public abstract set(topic: string, request: JsonRpcRequest, chainId?: string): void;\n\n  public abstract get(topic: string, id: number): Promise<JsonRpcRecord>;\n\n  public abstract resolve(response: JsonRpcResponse): Promise<void>;\n\n  public abstract delete(topic: string, id?: number): void;\n\n  public abstract exists(topic: string, id: number): Promise<boolean>;\n}\n","import { Logger } from \"@walletconnect/logger\";\nimport { ICore } from \"./core\";\n\nexport type MessageRecord = Record<string, string>;\n\nexport abstract class IMessageTracker {\n  public abstract messages: Map<string, MessageRecord>;\n\n  public abstract name: string;\n\n  public abstract readonly context: string;\n\n  constructor(public logger: Logger, public core: ICore) {}\n\n  public abstract init(): Promise<void>;\n\n  public abstract set(topic: string, message: string): Promise<string>;\n\n  public abstract get(topic: string): MessageRecord;\n\n  public abstract has(topic: string, message: string): boolean;\n\n  public abstract del(topic: string): Promise<void>;\n}\n","import { IEvents } from \"@walletconnect/events\";\nimport { Logger } from \"@walletconnect/logger\";\n\nimport { IRelayer, RelayerTypes } from \"./relayer\";\n\nexport declare namespace PublisherTypes {\n  export interface Params {\n    topic: string;\n    message: string;\n    opts: Omit<Required<RelayerTypes.PublishOptions>, \"internal\">;\n  }\n}\n\nexport abstract class IPublisher extends IEvents {\n  public abstract name: string;\n\n  public abstract readonly context: string;\n\n  constructor(public relayer: IRelayer, public logger: Logger) {\n    super();\n  }\n\n  public abstract publish(\n    topic: string,\n    message: string,\n    opts?: RelayerTypes.PublishOptions,\n  ): Promise<void>;\n}\n","import { IEvents } from \"@walletconnect/events\";\nimport { IJsonRpcProvider, JsonRpcPayload, RequestArguments } from \"@walletconnect/jsonrpc-types\";\nimport { Logger } from \"@walletconnect/logger\";\n\nimport { ICore } from \"./core\";\nimport { IMessageTracker } from \"./messages\";\nimport { IPublisher } from \"./publisher\";\nimport { ISubscriber } from \"./subscriber\";\n\nexport declare namespace RelayerTypes {\n  export interface ProtocolOptions {\n    protocol: string;\n    data?: string;\n  }\n  export interface PublishOptions {\n    relay?: ProtocolOptions;\n    ttl?: number;\n    prompt?: boolean;\n    tag?: number;\n    id?: number;\n    internal?: {\n      throwOnFailedPublish?: boolean;\n    };\n  }\n\n  export interface SubscribeOptions {\n    relay: ProtocolOptions;\n  }\n\n  export interface UnsubscribeOptions {\n    id?: string;\n    relay: ProtocolOptions;\n  }\n\n  export type RequestOptions = PublishOptions | SubscribeOptions | UnsubscribeOptions;\n\n  export interface PublishPayload {\n    topic: string;\n    message: string;\n    opts?: RelayerTypes.PublishOptions;\n  }\n  export interface MessageEvent {\n    topic: string;\n    message: string;\n    publishedAt: number;\n  }\n\n  export interface RpcUrlParams {\n    protocol: string;\n    version: number;\n    auth: string;\n    relayUrl: string;\n    sdkVersion: string;\n    projectId?: string;\n    useOnCloseEvent?: boolean;\n    bundleId?: string;\n  }\n}\n\nexport interface RelayerOptions {\n  core: ICore;\n  logger?: string | Logger;\n  relayUrl?: string;\n  projectId?: string;\n}\n\nexport interface RelayerClientMetadata {\n  protocol: string;\n  version: number;\n  env: string;\n  host?: string;\n}\n\nexport abstract class IRelayer extends IEvents {\n  public abstract core: ICore;\n\n  public abstract logger: Logger;\n\n  public abstract subscriber: ISubscriber;\n\n  public abstract publisher: IPublisher;\n\n  public abstract messages: IMessageTracker;\n\n  public abstract provider: IJsonRpcProvider;\n\n  public abstract name: string;\n\n  public abstract transportExplicitlyClosed: boolean;\n\n  public abstract readonly context: string;\n\n  public abstract readonly connected: boolean;\n\n  public abstract readonly connecting: boolean;\n\n  constructor(\n    // @ts-ignore\n    opts: RelayerOptions,\n  ) {\n    super();\n  }\n\n  public abstract init(): Promise<void>;\n\n  public abstract publish(\n    topic: string,\n    message: string,\n    opts?: RelayerTypes.PublishOptions,\n  ): Promise<void>;\n\n  public abstract request(request: RequestArguments): Promise<JsonRpcPayload>;\n\n  public abstract subscribe(topic: string, opts?: RelayerTypes.SubscribeOptions): Promise<string>;\n\n  public abstract unsubscribe(topic: string, opts?: RelayerTypes.UnsubscribeOptions): Promise<void>;\n  public abstract transportClose(): Promise<void>;\n  public abstract transportOpen(relayUrl?: string): Promise<void>;\n  public abstract restartTransport(relayUrl?: string): Promise<void>;\n  public abstract confirmOnlineStateOrThrow(): Promise<void>;\n  public abstract handleBatchMessageEvents(messages: RelayerTypes.MessageEvent[]): Promise<void>;\n}\n","import { ErrorResponse } from \"@walletconnect/jsonrpc-types\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore } from \"./core\";\n\nexport abstract class IStore<Key, Value> {\n  public abstract map: Map<Key, Value>;\n\n  public abstract readonly context: string;\n\n  public abstract readonly length: number;\n\n  public abstract readonly keys: Key[];\n\n  public abstract readonly values: Value[];\n\n  constructor(\n    public core: ICore,\n    public logger: Logger,\n    public name: string,\n    // @ts-ignore\n    storagePrefix?: string,\n  ) {}\n\n  public abstract init(): Promise<void>;\n\n  public abstract set(key: Key, value: Value): Promise<void>;\n\n  public abstract get(key: Key): Value;\n\n  public abstract getAll(filter?: Partial<Value>): Value[];\n\n  public abstract update(key: Key, update: Partial<Value>): Promise<void>;\n\n  public abstract delete(key: Key, reason: ErrorResponse): Promise<void>;\n}\n","import { IEvents } from \"@walletconnect/events\";\nimport { ErrorResponse } from \"@walletconnect/jsonrpc-types\";\nimport { Logger } from \"@walletconnect/logger\";\n\nimport { IRelayer, RelayerTypes } from \"./relayer\";\n\nexport declare namespace SubscriberTypes {\n  export interface Params extends RelayerTypes.SubscribeOptions {\n    topic: string;\n  }\n\n  export interface Active extends Params {\n    id: string;\n  }\n}\n\nexport declare namespace SubscriberEvents {\n  export type Created = SubscriberTypes.Active;\n\n  export interface Deleted extends SubscriberTypes.Active {\n    reason: ErrorResponse;\n  }\n\n  export type Expired = Deleted;\n}\n\nexport abstract class ISubscriberTopicMap {\n  public map = new Map<string, string[]>();\n\n  public abstract readonly topics: string[];\n\n  public abstract set(topic: string, id: string): void;\n\n  public abstract get(topic: string): string[];\n\n  public abstract exists(topic: string, id: string): boolean;\n\n  public abstract delete(topic: string, id?: string): void;\n\n  public abstract clear(): void;\n}\n\nexport abstract class ISubscriber extends IEvents {\n  public abstract subscriptions: Map<string, SubscriberTypes.Active>;\n\n  public abstract topicMap: ISubscriberTopicMap;\n\n  public abstract pending: Map<string, SubscriberTypes.Params>;\n\n  public abstract readonly length: number;\n\n  public abstract readonly ids: string[];\n\n  public abstract readonly values: SubscriberTypes.Active[];\n\n  public abstract readonly topics: string[];\n\n  public abstract name: string;\n\n  public abstract readonly context: string;\n\n  constructor(public relayer: IRelayer, public logger: Logger) {\n    super();\n  }\n\n  public abstract init(): Promise<void>;\n\n  public abstract subscribe(\n    topic: string,\n    opts?: RelayerTypes.SubscribeOptions,\n  ): Promise<string | null>;\n\n  public abstract unsubscribe(topic: string, opts?: RelayerTypes.UnsubscribeOptions): Promise<void>;\n\n  public abstract isSubscribed(topic: string): Promise<boolean>;\n\n  public abstract start(): Promise<void>;\n\n  public abstract stop(): Promise<void>;\n}\n","import { Logger } from \"@walletconnect/logger\";\nimport { ICore } from \"./core\";\n\nexport abstract class IKeyChain {\n  public abstract keychain: Map<string, string>;\n\n  public abstract name: string;\n\n  public abstract readonly context: string;\n\n  constructor(public core: ICore, public logger: Logger) {}\n\n  public abstract init(): Promise<void>;\n\n  public abstract has(tag: string, opts?: any): boolean;\n\n  public abstract set(tag: string, key: string, opts?: any): Promise<void>;\n\n  public abstract get(tag: string, opts?: any): string;\n\n  public abstract del(tag: string, opts?: any): Promise<void>;\n}\n","import { IEvents } from \"@walletconnect/events\";\nimport { Logger } from \"@walletconnect/logger\";\n\nimport { ICore } from \"./core\";\n\nexport declare namespace ExpirerTypes {\n  interface Expiration {\n    target: string;\n    expiry: number;\n  }\n\n  interface Created {\n    target: string;\n    expiration: Expiration;\n  }\n\n  interface Deleted {\n    target: string;\n    expiration: Expiration;\n  }\n\n  interface Expired {\n    target: string;\n    expiration: Expiration;\n  }\n}\n\nexport abstract class IExpirer extends IEvents {\n  public abstract name: string;\n\n  public abstract readonly context: string;\n\n  public abstract readonly length: number;\n\n  public abstract readonly keys: string[];\n\n  public abstract readonly values: ExpirerTypes.Expiration[];\n\n  constructor(public core: ICore, public logger: Logger) {\n    super();\n  }\n\n  public abstract init(): Promise<void>;\n\n  public abstract has(key: string | number): boolean;\n\n  public abstract set(key: string | number, expiry: number): void;\n\n  public abstract get(key: string | number): ExpirerTypes.Expiration;\n\n  public abstract del(key: string | number): void;\n}\n","import {\n  ErrorResponse,\n  JsonRpcRequest,\n  JsonRpcResponse,\n  JsonRpcResult,\n  JsonRpcError,\n} from \"@walletconnect/jsonrpc-types\";\nimport EventEmitter from \"events\";\n\nimport { ICore, CoreTypes } from \"./core\";\nimport { IStore } from \"./store\";\n\nimport { RelayerTypes } from \"../core/relayer\";\nimport { Logger } from \"@walletconnect/logger\";\n\nexport declare namespace PairingTypes {\n  interface Struct {\n    topic: string;\n    expiry: number;\n    relay: RelayerTypes.ProtocolOptions;\n    active: boolean;\n    peerMetadata?: CoreTypes.Metadata;\n    methods?: string[];\n  }\n}\n\nexport declare namespace PairingJsonRpcTypes {\n  // -- core ------------------------------------------------------- //\n  type DefaultResponse = true | ErrorResponse;\n\n  type WcMethod = \"wc_pairingDelete\" | \"wc_pairingPing\";\n\n  type Error = ErrorResponse;\n\n  // -- requests --------------------------------------------------- //\n\n  interface RequestParams {\n    wc_pairingDelete: {\n      code: number;\n      message: string;\n    };\n    wc_pairingPing: Record<string, unknown>;\n  }\n\n  // -- responses -------------------------------------------------- //\n  interface Results {\n    wc_pairingDelete: true;\n    wc_pairingPing: true;\n  }\n\n  // -- events ----------------------------------------------------- //\n  interface EventCallback<T extends JsonRpcRequest | JsonRpcResponse> {\n    topic: string;\n    payload: T;\n  }\n}\n\nexport type IPairingStore = IStore<string, PairingTypes.Struct>;\n\nexport abstract class IPairing {\n  public abstract name: string;\n  public abstract readonly context: string;\n  public abstract events: EventEmitter;\n  public abstract pairings: IPairingStore;\n\n  constructor(public logger: Logger, public core: ICore) {}\n\n  public abstract init(): Promise<void>;\n\n  public abstract pair(params: {\n    uri: string;\n    activatePairing?: boolean;\n  }): Promise<PairingTypes.Struct>;\n\n  // for proposer to create inactive pairing\n  public abstract create(params?: { methods?: string[] }): Promise<{ topic: string; uri: string }>;\n\n  // for either to activate a previously created pairing\n  public abstract activate(params: { topic: string }): Promise<void>;\n\n  // for both to subscribe on methods requests\n  public abstract register(params: { methods: string[] }): void;\n\n  // for either to update the expiry of an existing pairing.\n  public abstract updateExpiry(params: { topic: string; expiry: number }): Promise<void>;\n\n  // for either to update the metadata of an existing pairing.\n  public abstract updateMetadata(params: {\n    topic: string;\n    metadata: CoreTypes.Metadata;\n  }): Promise<void>;\n\n  // query pairings\n  public abstract getPairings(): PairingTypes.Struct[];\n\n  // for either to ping a peer\n  public abstract ping(params: { topic: string }): Promise<void>;\n\n  // for either peer to disconnect a pairing\n  public abstract disconnect(params: { topic: string }): Promise<void>;\n}\n\nexport interface IPairingPrivate {\n  sendRequest<M extends PairingJsonRpcTypes.WcMethod>(\n    topic: string,\n    method: M,\n    params: PairingJsonRpcTypes.RequestParams[M],\n  ): Promise<number>;\n\n  sendResult<M extends PairingJsonRpcTypes.WcMethod>(\n    id: number,\n    topic: string,\n    result: PairingJsonRpcTypes.Results[M],\n  ): Promise<void>;\n\n  sendError(id: number, topic: string, error: PairingJsonRpcTypes.Error): Promise<void>;\n\n  onRelayEventRequest(event: PairingJsonRpcTypes.EventCallback<JsonRpcRequest>): void;\n\n  onRelayEventResponse(event: PairingJsonRpcTypes.EventCallback<JsonRpcResponse>): Promise<void>;\n\n  onPairingPingRequest(\n    topic: string,\n    payload: JsonRpcRequest<PairingJsonRpcTypes.RequestParams[\"wc_pairingPing\"]>,\n  ): Promise<void>;\n\n  onPairingPingResponse(\n    topic: string,\n    payload: JsonRpcResult<PairingJsonRpcTypes.Results[\"wc_pairingPing\"]> | JsonRpcError,\n  ): void;\n\n  onPairingDeleteRequest(\n    topic: string,\n    payload: JsonRpcRequest<PairingJsonRpcTypes.RequestParams[\"wc_pairingDelete\"]>,\n  ): Promise<void>;\n\n  onUnknownRpcMethodRequest(topic: string, payload: JsonRpcRequest): Promise<void>;\n\n  onUnknownRpcMethodResponse(method: string): void;\n\n  deletePairing(topic: string, expirerHasDeleted?: boolean): Promise<void>;\n}\n","import { Logger } from \"@walletconnect/logger\";\n\nexport declare namespace Verify {\n  export interface Context {\n    verified: {\n      origin: string;\n      validation: \"UNKNOWN\" | \"VALID\" | \"INVALID\";\n      verifyUrl: string;\n      isScam?: boolean;\n    };\n  }\n}\n\nexport abstract class IVerify {\n  public abstract readonly context: string;\n\n  constructor(public projectId: string, public logger: Logger) {}\n\n  public abstract init(params?: { verifyUrl?: string }): Promise<void>;\n\n  public abstract register(params: { attestationId: string }): Promise<void>;\n\n  public abstract resolve(params: {\n    attestationId: string;\n    verifyUrl?: string;\n  }): Promise<{ origin: string; isScam?: boolean }>;\n}\n","import { Logger } from \"@walletconnect/logger\";\n\nexport declare namespace EchoClientTypes {\n  type RegisterDeviceTokenParams = {\n    clientId: string;\n    token: string;\n    notificationType: \"fcm\" | \"apns\" | \"apns-sandbox\" | \"noop\";\n    enableEncrypted?: boolean;\n  };\n}\nexport abstract class IEchoClient {\n  public abstract readonly context: string;\n  constructor(public projectId: string, public logger: Logger) {}\n\n  public abstract registerDeviceToken(\n    params: EchoClientTypes.RegisterDeviceTokenParams,\n  ): Promise<void>;\n}\n","import { Logger } from \"@walletconnect/logger\";\nimport EventEmmiter from \"events\";\nimport { CoreTypes, ICore } from \"../core/core\";\nimport { IEngine } from \"./engine\";\nimport { IPendingRequest } from \"./pendingRequest\";\nimport { IProposal, ProposalTypes } from \"./proposal\";\nimport { ISession, SessionTypes } from \"./session\";\nimport { Verify } from \"../core/verify\";\nimport { IAuth, AuthTypes } from \"./auth\";\n\nexport declare namespace SignClientTypes {\n  type Event =\n    | \"session_proposal\"\n    | \"session_update\"\n    | \"session_extend\"\n    | \"session_ping\"\n    | \"session_delete\"\n    | \"session_expire\"\n    | \"session_request\"\n    | \"session_request_sent\"\n    | \"session_event\"\n    | \"session_authenticate\"\n    | \"proposal_expire\"\n    | \"session_request_expire\";\n\n  interface BaseEventArgs<T = unknown> {\n    id: number;\n    topic: string;\n    params: T;\n  }\n  interface EventArguments {\n    session_proposal: {\n      verifyContext: Verify.Context;\n    } & Omit<BaseEventArgs<ProposalTypes.Struct>, \"topic\">;\n    session_update: BaseEventArgs<{ namespaces: SessionTypes.Namespaces }>;\n    session_extend: Omit<BaseEventArgs, \"params\">;\n    session_ping: Omit<BaseEventArgs, \"params\">;\n    session_delete: Omit<BaseEventArgs, \"params\">;\n    session_expire: { topic: string };\n    session_request: {\n      verifyContext: Verify.Context;\n    } & BaseEventArgs<{\n      request: { method: string; params: any; expiryTimestamp?: number };\n      chainId: string;\n    }>;\n    session_request_sent: {\n      request: { method: string; params: any };\n      topic: string;\n      chainId: string;\n      id: number;\n    };\n    session_event: BaseEventArgs<{\n      event: { name: string; data: any };\n      chainId: string;\n    }>;\n    session_authenticate: BaseEventArgs<AuthTypes.AuthRequestEventArgs>;\n    proposal_expire: { id: number };\n    session_request_expire: { id: number };\n  }\n\n  type Metadata = CoreTypes.Metadata;\n\n  type SignConfig = {\n    disableRequestQueue?: boolean;\n  };\n\n  interface Options extends CoreTypes.Options {\n    core?: ICore;\n    metadata?: Metadata;\n    signConfig?: SignConfig;\n  }\n}\n\nexport abstract class ISignClientEvents extends EventEmmiter {\n  constructor() {\n    super();\n  }\n\n  public abstract emit: <E extends SignClientTypes.Event>(\n    event: E,\n    args: SignClientTypes.EventArguments[E],\n  ) => boolean;\n\n  public abstract on: <E extends SignClientTypes.Event>(\n    event: E,\n    listener: (args: SignClientTypes.EventArguments[E]) => any,\n  ) => this;\n\n  public abstract once: <E extends SignClientTypes.Event>(\n    event: E,\n    listener: (args: SignClientTypes.EventArguments[E]) => any,\n  ) => this;\n\n  public abstract off: <E extends SignClientTypes.Event>(\n    event: E,\n    listener: (args: SignClientTypes.EventArguments[E]) => any,\n  ) => this;\n\n  public abstract removeListener: <E extends SignClientTypes.Event>(\n    event: E,\n    listener: (args: SignClientTypes.EventArguments[E]) => any,\n  ) => this;\n\n  public abstract removeAllListeners: <E extends SignClientTypes.Event>(event: E) => this;\n}\n\nexport abstract class ISignClient {\n  public readonly protocol = \"wc\";\n  public readonly version = 2;\n\n  public abstract readonly name: string;\n  public abstract readonly context: string;\n  public abstract readonly metadata: SignClientTypes.Metadata;\n\n  public abstract core: ICore;\n  public abstract logger: Logger;\n  public abstract events: ISignClientEvents;\n  public abstract engine: IEngine;\n  public abstract session: ISession;\n  public abstract proposal: IProposal;\n  public abstract pendingRequest: IPendingRequest;\n  public abstract auth: IAuth;\n  public abstract signConfig?: SignClientTypes.SignConfig;\n\n  constructor(public opts?: SignClientTypes.Options) {}\n\n  public abstract connect: IEngine[\"connect\"];\n  public abstract pair: IEngine[\"pair\"];\n  public abstract approve: IEngine[\"approve\"];\n  public abstract reject: IEngine[\"reject\"];\n  public abstract update: IEngine[\"update\"];\n  public abstract extend: IEngine[\"extend\"];\n  public abstract request: IEngine[\"request\"];\n  public abstract respond: IEngine[\"respond\"];\n  public abstract ping: IEngine[\"ping\"];\n  public abstract emit: IEngine[\"emit\"];\n  public abstract disconnect: IEngine[\"disconnect\"];\n  public abstract find: IEngine[\"find\"];\n  public abstract getPendingSessionRequests: IEngine[\"getPendingSessionRequests\"];\n  public abstract authenticate: IEngine[\"authenticate\"];\n  public abstract formatAuthMessage: IEngine[\"formatAuthMessage\"];\n  public abstract approveSessionAuthenticate: IEngine[\"approveSessionAuthenticate\"];\n  public abstract rejectSessionAuthenticate: IEngine[\"rejectSessionAuthenticate\"];\n}\n","import {\n  JsonRpcResponse,\n  JsonRpcRequest,\n  ErrorResponse,\n  JsonRpcResult,\n  JsonRpcError,\n} from \"@walletconnect/jsonrpc-types\";\nimport { ISignClient } from \"./client\";\nimport { RelayerTypes } from \"../core/relayer\";\nimport { SessionTypes } from \"./session\";\nimport { ProposalTypes } from \"./proposal\";\nimport { PairingTypes } from \"../core/pairing\";\nimport { JsonRpcTypes } from \"./jsonrpc\";\nimport { EventEmitter } from \"events\";\nimport { PendingRequestTypes } from \"./pendingRequest\";\nimport { AuthTypes } from \"./auth\";\nimport { CryptoTypes } from \"../core\";\n\nexport declare namespace EngineTypes {\n  type Event =\n    | \"session_connect\"\n    | \"session_approve\"\n    | \"session_update\"\n    | \"session_extend\"\n    | \"session_ping\"\n    | \"pairing_ping\"\n    | \"session_request\";\n\n  interface EventArguments {\n    session_connect: {\n      error?: ErrorResponse;\n      session?: SessionTypes.Struct;\n    };\n    session_approve: { error?: ErrorResponse };\n    session_update: { error?: ErrorResponse };\n    session_extend: { error?: ErrorResponse };\n    session_ping: { error?: ErrorResponse };\n    pairing_ping: { error?: ErrorResponse };\n    session_request: { error?: ErrorResponse; result?: any };\n  }\n\n  interface UriParameters {\n    protocol: string;\n    version: number;\n    topic: string;\n    symKey: string;\n    relay: RelayerTypes.ProtocolOptions;\n    methods?: string[];\n    expiryTimestamp?: number;\n  }\n\n  interface EventCallback<T extends JsonRpcRequest | JsonRpcResponse> {\n    topic: string;\n    payload: T;\n  }\n\n  interface ConnectParams {\n    requiredNamespaces?: ProposalTypes.RequiredNamespaces;\n    optionalNamespaces?: ProposalTypes.OptionalNamespaces;\n    sessionProperties?: ProposalTypes.SessionProperties;\n    pairingTopic?: string;\n    relays?: RelayerTypes.ProtocolOptions[];\n  }\n\n  interface PairParams {\n    uri: string;\n  }\n\n  interface ApproveParams {\n    id: number;\n    namespaces: SessionTypes.Namespaces;\n    sessionProperties?: ProposalTypes.SessionProperties;\n    sessionConfig?: SessionTypes.SessionConfig;\n    relayProtocol?: string;\n  }\n\n  interface RejectParams {\n    id: number;\n    reason: ErrorResponse;\n  }\n\n  interface UpdateParams {\n    topic: string;\n    namespaces: SessionTypes.Namespaces;\n  }\n\n  interface ExtendParams {\n    topic: string;\n  }\n\n  interface RequestParams {\n    topic: string;\n    request: {\n      method: string;\n      params: any;\n    };\n    chainId: string;\n    expiry?: number;\n  }\n\n  interface RespondParams {\n    topic: string;\n    response: JsonRpcResponse;\n  }\n\n  interface EmitParams {\n    topic: string;\n    event: {\n      name: string;\n      data: any;\n    };\n    chainId: string;\n  }\n\n  interface PingParams {\n    topic: string;\n  }\n\n  interface DisconnectParams {\n    topic: string;\n    reason: ErrorResponse;\n  }\n\n  interface FindParams {\n    requiredNamespaces: ProposalTypes.RequiredNamespaces;\n  }\n\n  type AcknowledgedPromise = Promise<{ acknowledged: () => Promise<void> }>;\n\n  type SessionAuthenticateResponsePromise = {\n    uri: string;\n    response: () => Promise<AuthTypes.AuthenticateResponseResult>;\n  };\n\n  interface RpcOpts {\n    req: RelayerTypes.PublishOptions & {\n      ttl: number;\n    };\n    res: RelayerTypes.PublishOptions & {\n      ttl: number;\n    };\n  }\n\n  type RpcOptsMap = Record<JsonRpcTypes.WcMethod, RpcOpts>;\n\n  type EngineQueue<T> = {\n    state: \"IDLE\" | \"ACTIVE\";\n    queue: T[];\n  };\n}\n\nexport abstract class IEngineEvents extends EventEmitter {\n  constructor() {\n    super();\n  }\n\n  public abstract emit: <E extends EngineTypes.Event>(\n    event: string,\n    args: EngineTypes.EventArguments[E],\n  ) => boolean;\n\n  public abstract once: <E extends EngineTypes.Event>(\n    event: string,\n    listener: (args: EngineTypes.EventArguments[E]) => any,\n  ) => this;\n}\n\n// -- private method interface -------------------------------------- //\n\nexport interface EnginePrivate {\n  sendRequest<M extends JsonRpcTypes.WcMethod>(args: {\n    topic: string;\n    method: M;\n    params: JsonRpcTypes.RequestParams[M];\n    expiry?: number;\n    relayRpcId?: number;\n    clientRpcId?: number;\n    throwOnFailedPublish?: boolean;\n  }): Promise<number>;\n\n  sendResult<M extends JsonRpcTypes.WcMethod>(args: {\n    id: number;\n    topic: string;\n    result: JsonRpcTypes.Results[M];\n    throwOnFailedPublish?: boolean;\n    encodeOpts?: CryptoTypes.EncodeOptions;\n  }): Promise<void>;\n\n  sendError(params: {\n    id: number;\n    topic: string;\n    error: JsonRpcTypes.Error;\n    encodeOpts?: CryptoTypes.EncodeOptions;\n  }): Promise<void>;\n\n  onRelayEventRequest(event: EngineTypes.EventCallback<JsonRpcRequest>): void;\n\n  onRelayEventResponse(event: EngineTypes.EventCallback<JsonRpcResponse>): Promise<void>;\n\n  onRelayEventUnknownPayload(event: EngineTypes.EventCallback<any>): Promise<void>;\n\n  shouldIgnorePairingRequest(params: { topic: string; requestMethod: string }): boolean;\n\n  deleteSession(params: {\n    topic: string;\n    expirerHasDeleted?: boolean;\n    id?: number;\n    emitEvent?: boolean;\n  }): Promise<void>;\n\n  deleteProposal(id: number, expirerHasDeleted?: boolean): Promise<void>;\n\n  setExpiry(topic: string, expiry: number): Promise<void>;\n\n  setProposal(id: number, proposal: ProposalTypes.Struct): Promise<void>;\n\n  setAuthRequest(\n    id: number,\n    params: {\n      request: AuthTypes.SessionAuthenticateRequest;\n      pairingTopic: string;\n    },\n  ): Promise<void>;\n\n  setPendingSessionRequest(pendingRequest: PendingRequestTypes.Struct): Promise<void>;\n\n  deletePendingSessionRequest(\n    id: number,\n    reason: ErrorResponse,\n    expirerHasDeleted?: boolean,\n  ): Promise<void>;\n\n  deletePendingAuthRequest(\n    id: number,\n    reason: ErrorResponse,\n    expirerHasDeleted?: boolean,\n  ): Promise<void>;\n\n  cleanupDuplicatePairings(session: SessionTypes.Struct): Promise<void>;\n\n  cleanup(): Promise<void>;\n\n  onSessionProposeRequest(\n    topic: string,\n    payload: JsonRpcRequest<JsonRpcTypes.RequestParams[\"wc_sessionPropose\"]>,\n  ): Promise<void>;\n\n  onSessionProposeResponse(\n    topic: string,\n    payload: JsonRpcResult<JsonRpcTypes.Results[\"wc_sessionPropose\"]> | JsonRpcError,\n  ): Promise<void>;\n\n  onSessionSettleRequest(\n    topic: string,\n    payload: JsonRpcRequest<JsonRpcTypes.RequestParams[\"wc_sessionSettle\"]>,\n  ): Promise<void>;\n\n  onSessionSettleResponse(\n    topic: string,\n    payload: JsonRpcResult<JsonRpcTypes.Results[\"wc_sessionSettle\"]> | JsonRpcError,\n  ): Promise<void>;\n\n  onSessionUpdateRequest(\n    topic: string,\n    payload: JsonRpcRequest<JsonRpcTypes.RequestParams[\"wc_sessionUpdate\"]>,\n  ): Promise<void>;\n\n  onSessionUpdateResponse(\n    topic: string,\n    payload: JsonRpcResult<JsonRpcTypes.Results[\"wc_sessionUpdate\"]> | JsonRpcError,\n  ): void;\n\n  onSessionExtendRequest(\n    topic: string,\n    payload: JsonRpcRequest<JsonRpcTypes.RequestParams[\"wc_sessionExtend\"]>,\n  ): Promise<void>;\n\n  onSessionExtendResponse(\n    topic: string,\n    payload: JsonRpcResult<JsonRpcTypes.Results[\"wc_sessionExtend\"]> | JsonRpcError,\n  ): void;\n\n  onSessionPingRequest(\n    topic: string,\n    payload: JsonRpcRequest<JsonRpcTypes.RequestParams[\"wc_sessionPing\"]>,\n  ): Promise<void>;\n\n  onSessionPingResponse(\n    topic: string,\n    payload: JsonRpcResult<JsonRpcTypes.Results[\"wc_sessionPing\"]> | JsonRpcError,\n  ): void;\n\n  onSessionDeleteRequest(\n    topic: string,\n    payload: JsonRpcRequest<JsonRpcTypes.RequestParams[\"wc_sessionDelete\"]>,\n  ): Promise<void>;\n\n  onSessionRequest(\n    topic: string,\n    payload: JsonRpcRequest<JsonRpcTypes.RequestParams[\"wc_sessionRequest\"]>,\n  ): Promise<void>;\n\n  onSessionRequestResponse(\n    topic: string,\n    payload: JsonRpcResult<JsonRpcTypes.Results[\"wc_sessionRequest\"]> | JsonRpcError,\n  ): void;\n\n  onSessionEventRequest(\n    topic: string,\n    payload: JsonRpcRequest<JsonRpcTypes.RequestParams[\"wc_sessionEvent\"]>,\n  ): Promise<void>;\n\n  onSessionAuthenticateRequest(\n    topic: string,\n    payload: JsonRpcRequest<JsonRpcTypes.RequestParams[\"wc_sessionAuthenticate\"]>,\n  ): Promise<void>;\n\n  onSessionAuthenticateResponse(\n    topic: string,\n    payload: JsonRpcResult<JsonRpcTypes.Results[\"wc_sessionAuthenticate\"]> | JsonRpcError,\n  ): void;\n\n  // -- Validators ---------------------------------------------------- //\n  isValidConnect(params: EngineTypes.ConnectParams): Promise<void>;\n\n  isValidSessionSettleRequest(params: JsonRpcTypes.RequestParams[\"wc_sessionSettle\"]): void;\n\n  isValidApprove(params: EngineTypes.ApproveParams): Promise<void>;\n\n  isValidReject(params: EngineTypes.RejectParams): Promise<void>;\n\n  isValidUpdate(params: EngineTypes.UpdateParams): Promise<void>;\n\n  isValidExtend(params: EngineTypes.ExtendParams): Promise<void>;\n\n  isValidRequest(params: EngineTypes.RequestParams): Promise<void>;\n\n  isValidRespond(params: EngineTypes.RespondParams): Promise<void>;\n\n  isValidPing(params: EngineTypes.PingParams): Promise<void>;\n\n  isValidEmit(params: EngineTypes.EmitParams): Promise<void>;\n\n  isValidDisconnect(params: EngineTypes.DisconnectParams): Promise<void>;\n}\n\n// -- class interface ----------------------------------------------- //\n\nexport abstract class IEngine {\n  constructor(public client: ISignClient) {}\n\n  public abstract init(): Promise<void>;\n\n  public abstract connect(\n    params: EngineTypes.ConnectParams,\n  ): Promise<{ uri?: string; approval: () => Promise<SessionTypes.Struct> }>;\n\n  public abstract pair(params: EngineTypes.PairParams): Promise<PairingTypes.Struct>;\n\n  public abstract approve(\n    params: EngineTypes.ApproveParams,\n  ): Promise<{ topic: string; acknowledged: () => Promise<SessionTypes.Struct> }>;\n\n  public abstract reject(params: EngineTypes.RejectParams): Promise<void>;\n\n  public abstract update(params: EngineTypes.UpdateParams): EngineTypes.AcknowledgedPromise;\n\n  public abstract extend(params: EngineTypes.ExtendParams): EngineTypes.AcknowledgedPromise;\n\n  public abstract request<T>(params: EngineTypes.RequestParams): Promise<T>;\n\n  public abstract respond(params: EngineTypes.RespondParams): Promise<void>;\n\n  public abstract emit(params: EngineTypes.EmitParams): Promise<void>;\n\n  public abstract ping(params: EngineTypes.PingParams): Promise<void>;\n\n  public abstract disconnect(params: EngineTypes.DisconnectParams): Promise<void>;\n\n  public abstract find: (params: EngineTypes.FindParams) => SessionTypes.Struct[];\n\n  public abstract getPendingSessionRequests: () => PendingRequestTypes.Struct[];\n\n  public abstract authenticate: (\n    params: AuthTypes.SessionAuthenticateParams,\n  ) => Promise<EngineTypes.SessionAuthenticateResponsePromise>;\n\n  public abstract approveSessionAuthenticate: (\n    params: AuthTypes.ApproveSessionAuthenticateParams,\n  ) => Promise<{ session: SessionTypes.Struct | undefined }>;\n\n  public abstract formatAuthMessage: (params: {\n    request: AuthTypes.BaseAuthRequestParams;\n    iss: string;\n  }) => string;\n\n  public abstract rejectSessionAuthenticate(params: EngineTypes.RejectParams): Promise<void>;\n}\n"],"names":[],"mappings":""}},
    {"offset": {"line": 1858, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1863, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@web3modal/wagmi/node_modules/@walletconnect/ethereum-provider/src/constants/values.ts","/turbopack/[project]/node_modules/@web3modal/wagmi/node_modules/@walletconnect/ethereum-provider/src/constants/rpc.ts","/turbopack/[project]/node_modules/@web3modal/wagmi/node_modules/@walletconnect/ethereum-provider/src/EthereumProvider.ts","/turbopack/[project]/node_modules/@web3modal/wagmi/node_modules/@walletconnect/ethereum-provider/src/index.ts"],"sourcesContent":["export const PROTOCOL = \"wc\";\nexport const WC_VERSION = 2;\nexport const CONTEXT = \"ethereum_provider\";\nexport const STORAGE_KEY = `${PROTOCOL}@${WC_VERSION}:${CONTEXT}:`;\nexport const RPC_URL = \"https://rpc.walletconnect.com/v1/\";\n","export const REQUIRED_METHODS = [\"eth_sendTransaction\", \"personal_sign\"];\nexport const OPTIONAL_METHODS = [\n  \"eth_accounts\",\n  \"eth_requestAccounts\",\n  \"eth_sendRawTransaction\",\n  \"eth_sign\",\n  \"eth_signTransaction\",\n  \"eth_signTypedData\",\n  \"eth_signTypedData_v3\",\n  \"eth_signTypedData_v4\",\n  \"eth_sendTransaction\",\n  \"personal_sign\",\n  \"wallet_switchEthereumChain\",\n  \"wallet_addEthereumChain\",\n  \"wallet_getPermissions\",\n  \"wallet_requestPermissions\",\n  \"wallet_registerOnboarding\",\n  \"wallet_watchAsset\",\n  \"wallet_scanQRCode\",\n  \"wallet_sendCalls\",\n  \"wallet_getCapabilities\",\n  \"wallet_getCallsStatus\",\n  \"wallet_showCallsStatus\",\n];\nexport const REQUIRED_EVENTS = [\"chainChanged\", \"accountsChanged\"];\nexport const OPTIONAL_EVENTS = [\n  \"chainChanged\",\n  \"accountsChanged\",\n  \"message\",\n  \"disconnect\",\n  \"connect\",\n];\n","import { EventEmitter } from \"events\";\nimport { getAccountsFromNamespaces, getSdkError, isValidArray } from \"@walletconnect/utils\";\nimport { KeyValueStorageOptions } from \"@walletconnect/keyvaluestorage\";\nimport {\n  IEthereumProvider as IProvider,\n  IEthereumProviderEvents,\n  ProviderAccounts,\n  RequestArguments,\n  QrModalOptions,\n} from \"./types\";\nimport { Metadata, Namespace, UniversalProvider } from \"@walletconnect/universal-provider\";\nimport { AuthTypes, SessionTypes, SignClientTypes } from \"@walletconnect/types\";\nimport { JsonRpcResult } from \"@walletconnect/jsonrpc-types\";\nimport {\n  STORAGE_KEY,\n  REQUIRED_METHODS,\n  REQUIRED_EVENTS,\n  RPC_URL,\n  OPTIONAL_METHODS,\n  OPTIONAL_EVENTS,\n} from \"./constants\";\n\nexport type RpcMethod =\n  | \"personal_sign\"\n  | \"eth_sendTransaction\"\n  | \"eth_accounts\"\n  | \"eth_requestAccounts\"\n  | \"eth_call\"\n  | \"eth_getBalance\"\n  | \"eth_sendRawTransaction\"\n  | \"eth_sign\"\n  | \"eth_signTransaction\"\n  | \"eth_signTypedData\"\n  | \"eth_signTypedData_v3\"\n  | \"eth_signTypedData_v4\"\n  | \"wallet_switchEthereumChain\"\n  | \"wallet_addEthereumChain\"\n  | \"wallet_getPermissions\"\n  | \"wallet_requestPermissions\"\n  | \"wallet_registerOnboarding\"\n  | \"wallet_watchAsset\"\n  | \"wallet_scanQRCode\"\n  | \"wallet_sendCalls\"\n  | \"wallet_getCapabilities\"\n  | \"wallet_getCallsStatus\"\n  | \"wallet_showCallsStatus\";\n\nexport type RpcEvent = \"accountsChanged\" | \"chainChanged\" | \"message\" | \"disconnect\" | \"connect\";\n\nexport interface EthereumRpcMap {\n  [chainId: string]: string;\n}\n\nexport interface SessionEvent {\n  event: { name: string; data: any };\n  chainId: string;\n}\n\nexport interface EthereumRpcConfig {\n  chains: string[];\n  optionalChains: string[];\n  methods: string[];\n  optionalMethods?: string[];\n  /**\n   * @description Events that the wallet MUST support or the connection will be rejected\n   */\n  events: string[];\n  optionalEvents?: string[];\n  rpcMap: EthereumRpcMap;\n  projectId: string;\n  metadata?: Metadata;\n  showQrModal: boolean;\n  qrModalOptions?: QrModalOptions;\n}\nexport interface ConnectOps {\n  chains?: number[];\n  optionalChains?: number[];\n  rpcMap?: EthereumRpcMap;\n  pairingTopic?: string;\n}\n\nexport type AuthenticateParams = {\n  chains?: number[];\n} & Omit<AuthTypes.SessionAuthenticateParams, \"chains\">;\n\nexport interface IEthereumProvider extends IProvider {\n  connect(opts?: ConnectOps | undefined): Promise<void>;\n}\n\nexport function getRpcUrl(chainId: string, rpc: EthereumRpcConfig): string | undefined {\n  let rpcUrl: string | undefined;\n  if (rpc.rpcMap) {\n    rpcUrl = rpc.rpcMap[getEthereumChainId([chainId])];\n  }\n  return rpcUrl;\n}\n\nexport function getEthereumChainId(chains: string[]): number {\n  return Number(chains[0].split(\":\")[1]);\n}\n\nexport function toHexChainId(chainId: number): string {\n  return `0x${chainId.toString(16)}`;\n}\n\nexport type NamespacesParams = {\n  chains: EthereumRpcConfig[\"chains\"];\n  optionalChains: EthereumRpcConfig[\"optionalChains\"];\n  methods?: EthereumRpcConfig[\"methods\"];\n  optionalMethods?: EthereumRpcConfig[\"methods\"];\n  events?: EthereumRpcConfig[\"events\"];\n  rpcMap: EthereumRpcConfig[\"rpcMap\"];\n  optionalEvents?: EthereumRpcConfig[\"events\"];\n};\n\nexport function buildNamespaces(params: NamespacesParams): {\n  required?: Namespace;\n  optional?: Namespace;\n} {\n  const { chains, optionalChains, methods, optionalMethods, events, optionalEvents, rpcMap } =\n    params;\n  if (!isValidArray(chains)) {\n    throw new Error(\"Invalid chains\");\n  }\n\n  const required: Namespace = {\n    chains,\n    methods: methods || REQUIRED_METHODS,\n    events: events || REQUIRED_EVENTS,\n    rpcMap: {\n      ...(chains.length\n        ? { [getEthereumChainId(chains)]: rpcMap[getEthereumChainId(chains)] }\n        : {}),\n    },\n  };\n\n  // make a list of events and methods that require additional permissions\n  // so we know if we should to include the required chains in the optional namespace\n  const eventsRequiringPermissions = events?.filter((event) => !REQUIRED_EVENTS.includes(event));\n  const methodsRequiringPermissions = methods?.filter((event) => !REQUIRED_METHODS.includes(event));\n\n  if (\n    !optionalChains &&\n    !optionalEvents &&\n    !optionalMethods &&\n    !eventsRequiringPermissions?.length &&\n    !methodsRequiringPermissions?.length\n  ) {\n    return { required: chains.length ? required : undefined };\n  }\n\n  /*\n   * decides whether or not to include the required chains in the optional namespace\n   * use case: if there is a single chain as required but additional methods/events as optional\n   */\n  const shouldIncludeRequiredChains =\n    (eventsRequiringPermissions?.length && methodsRequiringPermissions?.length) || !optionalChains;\n\n  const optional: Namespace = {\n    chains: [\n      ...new Set(\n        shouldIncludeRequiredChains ? required.chains.concat(optionalChains || []) : optionalChains,\n      ),\n    ],\n    methods: [\n      ...new Set(\n        required.methods.concat(optionalMethods?.length ? optionalMethods : OPTIONAL_METHODS),\n      ),\n    ],\n    events: [\n      ...new Set(required.events.concat(optionalEvents?.length ? optionalEvents : OPTIONAL_EVENTS)),\n    ],\n    rpcMap,\n  };\n\n  return {\n    required: chains.length ? required : undefined,\n    optional: optionalChains.length ? optional : undefined,\n  };\n}\n\n// helper type to force setting at least one value in an array\ntype ArrayOneOrMore<T> = {\n  0: T;\n} & Array<T>;\n\n/**\n * @param {number[]} chains - The Chains your app intents to use and the peer MUST support. If the peer does not support these chains, the connection will be rejected.\n * @param {number[]} optionalChains - The Chains your app MAY attempt to use and the peer MAY support. If the peer does not support these chains, the connection will still be established.\n * @description either chains or optionalChains must be provided\n */\nexport type ChainsProps =\n  | {\n      chains: ArrayOneOrMore<number>;\n      optionalChains?: number[];\n    }\n  | {\n      chains?: number[];\n      optionalChains: ArrayOneOrMore<number>;\n    };\n\nexport type EthereumProviderOptions = {\n  projectId: string;\n  /**\n   * @note Methods that your app intents to use and the peer MUST support. If the peer does not support these methods, the connection will be rejected.\n   * @default [\"eth_sendTransaction\", \"personal_sign\"]\n   */\n  methods?: string[];\n  /**\n   * @note Methods that your app MAY attempt to use and the peer MAY support. If the peer does not support these methods, the connection will still be established.\n   */\n  optionalMethods?: string[];\n  events?: string[];\n  optionalEvents?: string[];\n  rpcMap?: EthereumRpcMap;\n  metadata?: Metadata;\n  showQrModal: boolean;\n  qrModalOptions?: QrModalOptions;\n  disableProviderPing?: boolean;\n  relayUrl?: string;\n  storageOptions?: KeyValueStorageOptions;\n} & ChainsProps;\n\nexport class EthereumProvider implements IEthereumProvider {\n  public events = new EventEmitter();\n  public namespace = \"eip155\";\n  public accounts: string[] = [];\n  public signer: InstanceType<typeof UniversalProvider>;\n  public chainId = 1;\n  public modal?: any;\n\n  protected rpc: EthereumRpcConfig;\n  protected readonly STORAGE_KEY = STORAGE_KEY;\n\n  constructor() {\n    // assigned during initialize\n    this.signer = {} as InstanceType<typeof UniversalProvider>;\n    this.rpc = {} as EthereumRpcConfig;\n  }\n\n  static async init(opts: EthereumProviderOptions): Promise<EthereumProvider> {\n    const provider = new EthereumProvider();\n    await provider.initialize(opts);\n    return provider;\n  }\n\n  public async request<T = unknown>(args: RequestArguments, expiry?: number): Promise<T> {\n    return await this.signer.request(args, this.formatChainId(this.chainId), expiry);\n  }\n\n  public sendAsync(\n    args: RequestArguments,\n    callback: (error: Error | null, response: JsonRpcResult) => void,\n    expiry?: number,\n  ): void {\n    this.signer.sendAsync(args, callback, this.formatChainId(this.chainId), expiry);\n  }\n\n  get connected(): boolean {\n    if (!this.signer.client) return false;\n    return this.signer.client.core.relayer.connected;\n  }\n\n  get connecting(): boolean {\n    if (!this.signer.client) return false;\n    return this.signer.client.core.relayer.connecting;\n  }\n\n  public async enable(): Promise<ProviderAccounts> {\n    if (!this.session) await this.connect();\n    const accounts = await this.request({ method: \"eth_requestAccounts\" });\n    return accounts as ProviderAccounts;\n  }\n\n  public async connect(opts?: ConnectOps): Promise<void> {\n    if (!this.signer.client) {\n      throw new Error(\"Provider not initialized. Call init() first\");\n    }\n\n    this.loadConnectOpts(opts);\n    const { required, optional } = buildNamespaces(this.rpc);\n    try {\n      const session = await new Promise<SessionTypes.Struct | undefined>(\n        async (resolve, reject) => {\n          if (this.rpc.showQrModal) {\n            this.modal?.subscribeModal((state: { open: boolean }) => {\n              // the modal was closed so reject the promise\n              if (!state.open && !this.signer.session) {\n                this.signer.abortPairingAttempt();\n                reject(new Error(\"Connection request reset. Please try again.\"));\n              }\n            });\n          }\n          await this.signer\n            .connect({\n              namespaces: {\n                ...(required && {\n                  [this.namespace]: required,\n                }),\n              },\n              ...(optional && {\n                optionalNamespaces: {\n                  [this.namespace]: optional,\n                },\n              }),\n              pairingTopic: opts?.pairingTopic,\n            })\n            .then((session?: SessionTypes.Struct) => {\n              resolve(session);\n            })\n            .catch((error: Error) => {\n              reject(new Error(error.message));\n            });\n        },\n      );\n      if (!session) return;\n\n      const accounts = getAccountsFromNamespaces(session.namespaces, [this.namespace]);\n      // if no required chains are set, use the approved accounts to fetch chainIds\n      this.setChainIds(this.rpc.chains.length ? this.rpc.chains : accounts);\n      this.setAccounts(accounts);\n      this.events.emit(\"connect\", { chainId: toHexChainId(this.chainId) });\n    } catch (error) {\n      this.signer.logger.error(error);\n      throw error;\n    } finally {\n      if (this.modal) this.modal.closeModal();\n    }\n  }\n\n  public async authenticate(\n    params: AuthenticateParams,\n  ): Promise<AuthTypes.AuthenticateResponseResult | undefined> {\n    if (!this.signer.client) {\n      throw new Error(\"Provider not initialized. Call init() first\");\n    }\n\n    this.loadConnectOpts({\n      chains: params?.chains,\n    });\n\n    try {\n      const result = await new Promise<AuthTypes.AuthenticateResponseResult>(\n        async (resolve, reject) => {\n          if (this.rpc.showQrModal) {\n            this.modal?.subscribeModal((state: { open: boolean }) => {\n              // the modal was closed so reject the promise\n              if (!state.open && !this.signer.session) {\n                this.signer.abortPairingAttempt();\n                reject(new Error(\"Connection request reset. Please try again.\"));\n              }\n            });\n          }\n          await this.signer\n            .authenticate({\n              ...params,\n              chains: this.rpc.chains,\n            })\n            .then((result: AuthTypes.AuthenticateResponseResult) => {\n              resolve(result);\n            })\n            .catch((error: Error) => {\n              reject(new Error(error.message));\n            });\n        },\n      );\n\n      const session = result.session;\n      if (session) {\n        const accounts = getAccountsFromNamespaces(session.namespaces, [this.namespace]);\n        // if no required chains are set, use the approved accounts to fetch chainIds as both contain <namespace>:<chainId>\n        this.setChainIds(this.rpc.chains.length ? this.rpc.chains : accounts);\n        this.setAccounts(accounts);\n        this.events.emit(\"connect\", { chainId: toHexChainId(this.chainId) });\n      }\n      return result;\n    } catch (error) {\n      this.signer.logger.error(error);\n      throw error;\n    } finally {\n      if (this.modal) this.modal.closeModal();\n    }\n  }\n\n  public async disconnect(): Promise<void> {\n    if (this.session) {\n      await this.signer.disconnect();\n    }\n    this.reset();\n  }\n\n  public on: IEthereumProviderEvents[\"on\"] = (event, listener) => {\n    this.events.on(event, listener);\n    return this;\n  };\n\n  public once: IEthereumProviderEvents[\"once\"] = (event, listener) => {\n    this.events.once(event, listener);\n    return this;\n  };\n\n  public removeListener: IEthereumProviderEvents[\"removeListener\"] = (event, listener) => {\n    this.events.removeListener(event, listener);\n    return this;\n  };\n\n  public off: IEthereumProviderEvents[\"off\"] = (event, listener) => {\n    this.events.off(event, listener);\n    return this;\n  };\n\n  get isWalletConnect() {\n    return true;\n  }\n\n  get session() {\n    return this.signer.session;\n  }\n\n  // ---------- Protected --------------------------------------------- //\n\n  protected registerEventListeners() {\n    this.signer.on(\"session_event\", (payload: SignClientTypes.EventArguments[\"session_event\"]) => {\n      const { params } = payload;\n      const { event } = params;\n      if (event.name === \"accountsChanged\") {\n        this.accounts = this.parseAccounts(event.data);\n        this.events.emit(\"accountsChanged\", this.accounts);\n      } else if (event.name === \"chainChanged\") {\n        this.setChainId(this.formatChainId(event.data));\n      } else {\n        this.events.emit(event.name as any, event.data);\n      }\n      this.events.emit(\"session_event\", payload);\n    });\n\n    this.signer.on(\"chainChanged\", (chainId: string) => {\n      const chain = parseInt(chainId);\n      this.chainId = chain;\n      this.events.emit(\"chainChanged\", toHexChainId(this.chainId));\n      this.persist();\n    });\n\n    this.signer.on(\n      \"session_update\",\n      (payload: SignClientTypes.EventArguments[\"session_update\"]) => {\n        this.events.emit(\"session_update\", payload);\n      },\n    );\n\n    this.signer.on(\n      \"session_delete\",\n      (payload: SignClientTypes.EventArguments[\"session_delete\"]) => {\n        this.reset();\n        this.events.emit(\"session_delete\", payload);\n        this.events.emit(\"disconnect\", {\n          ...getSdkError(\"USER_DISCONNECTED\"),\n          data: payload.topic,\n          name: \"USER_DISCONNECTED\",\n        });\n      },\n    );\n\n    this.signer.on(\"display_uri\", (uri: string) => {\n      if (this.rpc.showQrModal) {\n        // to refresh the QR we have to close the modal and open it again\n        // until proper API is provided by walletconnect modal\n        this.modal?.closeModal();\n        this.modal?.openModal({ uri });\n      }\n      this.events.emit(\"display_uri\", uri);\n    });\n  }\n\n  protected switchEthereumChain(chainId: number): void {\n    this.request({\n      method: \"wallet_switchEthereumChain\",\n      params: [{ chainId: chainId.toString(16) }],\n    });\n  }\n\n  protected isCompatibleChainId(chainId: string): boolean {\n    return typeof chainId === \"string\" ? chainId.startsWith(`${this.namespace}:`) : false;\n  }\n\n  protected formatChainId(chainId: number): string {\n    return `${this.namespace}:${chainId}`;\n  }\n\n  protected parseChainId(chainId: string): number {\n    return Number(chainId.split(\":\")[1]);\n  }\n\n  protected setChainIds(chains: string[]) {\n    const compatible = chains.filter((x) => this.isCompatibleChainId(x));\n    const chainIds = compatible.map((c) => this.parseChainId(c));\n    if (chainIds.length) {\n      this.chainId = chainIds[0];\n      this.events.emit(\"chainChanged\", toHexChainId(this.chainId));\n      this.persist();\n    }\n  }\n\n  protected setChainId(chain: string) {\n    if (this.isCompatibleChainId(chain)) {\n      const chainId = this.parseChainId(chain);\n      this.chainId = chainId;\n      this.switchEthereumChain(chainId);\n    }\n  }\n\n  protected parseAccountId(account: string): { chainId: string; address: string } {\n    const [namespace, reference, address] = account.split(\":\");\n    const chainId = `${namespace}:${reference}`;\n    return { chainId, address };\n  }\n\n  protected setAccounts(accounts: string[]) {\n    this.accounts = accounts\n      .filter((x) => this.parseChainId(this.parseAccountId(x).chainId) === this.chainId)\n      .map((x) => this.parseAccountId(x).address);\n    this.events.emit(\"accountsChanged\", this.accounts);\n  }\n\n  protected getRpcConfig(opts: EthereumProviderOptions): EthereumRpcConfig {\n    const requiredChains = opts?.chains ?? [];\n    const optionalChains = opts?.optionalChains ?? [];\n    const allChains = requiredChains.concat(optionalChains);\n    if (!allChains.length)\n      throw new Error(\"No chains specified in either `chains` or `optionalChains`\");\n    const requiredMethods = requiredChains.length ? opts?.methods || REQUIRED_METHODS : [];\n    const requiredEvents = requiredChains.length ? opts?.events || REQUIRED_EVENTS : [];\n    const optionalMethods = opts?.optionalMethods || [];\n    const optionalEvents = opts?.optionalEvents || [];\n    const rpcMap = opts?.rpcMap || this.buildRpcMap(allChains, opts.projectId);\n    const qrModalOptions = opts?.qrModalOptions || undefined;\n    return {\n      chains: requiredChains?.map((chain) => this.formatChainId(chain)),\n      optionalChains: optionalChains.map((chain) => this.formatChainId(chain)),\n      methods: requiredMethods,\n      events: requiredEvents,\n      optionalMethods,\n      optionalEvents,\n      rpcMap,\n      showQrModal: Boolean(opts?.showQrModal),\n      qrModalOptions,\n      projectId: opts.projectId,\n      metadata: opts.metadata,\n    };\n  }\n\n  protected buildRpcMap(chains: number[], projectId: string): EthereumRpcMap {\n    const map: EthereumRpcMap = {};\n    chains.forEach((chain) => {\n      map[chain] = this.getRpcUrl(chain, projectId);\n    });\n    return map;\n  }\n\n  protected async initialize(opts: EthereumProviderOptions) {\n    this.rpc = this.getRpcConfig(opts);\n    this.chainId = this.rpc.chains.length\n      ? getEthereumChainId(this.rpc.chains)\n      : getEthereumChainId(this.rpc.optionalChains);\n    this.signer = await UniversalProvider.init({\n      projectId: this.rpc.projectId,\n      metadata: this.rpc.metadata,\n      disableProviderPing: opts.disableProviderPing,\n      relayUrl: opts.relayUrl,\n      storageOptions: opts.storageOptions,\n    });\n    this.registerEventListeners();\n    await this.loadPersistedSession();\n    if (this.rpc.showQrModal) {\n      let WalletConnectModalClass;\n      try {\n        const { WalletConnectModal } = await import(\"@walletconnect/modal\");\n        WalletConnectModalClass = WalletConnectModal;\n      } catch {\n        throw new Error(\"To use QR modal, please install @walletconnect/modal package\");\n      }\n      if (WalletConnectModalClass) {\n        try {\n          this.modal = new WalletConnectModalClass({\n            projectId: this.rpc.projectId,\n            ...this.rpc.qrModalOptions,\n          });\n        } catch (e) {\n          this.signer.logger.error(e);\n          throw new Error(\"Could not generate WalletConnectModal Instance\");\n        }\n      }\n    }\n  }\n\n  protected loadConnectOpts(opts?: ConnectOps) {\n    if (!opts) return;\n    const { chains, optionalChains, rpcMap } = opts;\n    if (chains && isValidArray(chains)) {\n      this.rpc.chains = chains.map((chain) => this.formatChainId(chain));\n      chains.forEach((chain) => {\n        this.rpc.rpcMap[chain] = rpcMap?.[chain] || this.getRpcUrl(chain);\n      });\n    }\n    if (optionalChains && isValidArray(optionalChains)) {\n      this.rpc.optionalChains = [];\n      this.rpc.optionalChains = optionalChains?.map((chain) => this.formatChainId(chain));\n      optionalChains.forEach((chain) => {\n        this.rpc.rpcMap[chain] = rpcMap?.[chain] || this.getRpcUrl(chain);\n      });\n    }\n  }\n\n  protected getRpcUrl(chainId: number, projectId?: string): string {\n    const providedRpc = this.rpc.rpcMap?.[chainId];\n    return (\n      providedRpc ||\n      `${RPC_URL}?chainId=eip155:${chainId}&projectId=${projectId || this.rpc.projectId}`\n    );\n  }\n\n  protected async loadPersistedSession() {\n    if (!this.session) return;\n    try {\n      const chainId = await this.signer.client.core.storage.getItem(`${this.STORAGE_KEY}/chainId`);\n\n      // cater to both inline & nested namespace formats\n      const namespace = this.session.namespaces[`${this.namespace}:${chainId}`]\n        ? this.session.namespaces[`${this.namespace}:${chainId}`]\n        : this.session.namespaces[this.namespace];\n\n      this.setChainIds(chainId ? [this.formatChainId(chainId)] : namespace?.accounts);\n      this.setAccounts(namespace?.accounts);\n    } catch (error) {\n      this.signer.logger.error(\"Failed to load persisted session, clearing state...\");\n      this.signer.logger.error(error);\n      await this.disconnect().catch((error) => this.signer.logger.warn(error));\n    }\n  }\n\n  protected reset() {\n    this.chainId = 1;\n    this.accounts = [];\n  }\n\n  protected persist() {\n    if (!this.session) return;\n    this.signer.client.core.storage.setItem(`${this.STORAGE_KEY}/chainId`, this.chainId);\n  }\n\n  protected parseAccounts(payload: string | string[]): string[] {\n    if (typeof payload === \"string\" || payload instanceof String) {\n      return [this.parseAccount(payload)];\n    }\n    return payload.map((account: string) => this.parseAccount(account));\n  }\n\n  protected parseAccount = (payload: any): string => {\n    return this.isCompatibleChainId(payload) ? this.parseAccountId(payload).address : payload;\n  };\n}\n\nexport default EthereumProvider;\n","import { EthereumProvider as Provider } from \"./EthereumProvider\";\nexport const EthereumProvider = Provider;\nexport type { EthereumProviderOptions, RpcEvent, RpcMethod } from \"./EthereumProvider\";\nexport * from \"./constants/rpc\";\nexport default Provider;\n"],"names":[],"mappings":""}},
    {"offset": {"line": 2212, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}
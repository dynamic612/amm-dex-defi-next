{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@stablelib/int/int.ts"],"sourcesContent":["// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\n\n/**\n * Package int provides helper functions for integerss.\n */\n\n// Shim using 16-bit pieces.\nfunction imulShim(a: number, b: number): number {\n    const ah = (a >>> 16) & 0xffff, al = a & 0xffff;\n    const bh = (b >>> 16) & 0xffff, bl = b & 0xffff;\n    return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0) | 0);\n}\n\n/** 32-bit integer multiplication.  */\n// Use system Math.imul if available, otherwise use our shim.\nexport const mul = (Math as { imul?(a: number, b: number): number }).imul || imulShim;\n\n/** 32-bit integer addition.  */\nexport function add(a: number, b: number): number {\n    return (a + b) | 0;\n}\n\n/**  32-bit integer subtraction.  */\nexport function sub(a: number, b: number): number {\n    return (a - b) | 0;\n}\n\n/** 32-bit integer left rotation */\nexport function rotl(x: number, n: number): number {\n    return x << n | x >>> (32 - n);\n}\n\n/** 32-bit integer left rotation */\nexport function rotr(x: number, n: number): number {\n    return x << (32 - n) | x >>> n;\n}\n\nfunction isIntegerShim(n: number): boolean {\n    return typeof n === \"number\" && isFinite(n) && Math.floor(n) === n;\n}\n\n/**\n * Returns true if the argument is an integer number.\n *\n * In ES2015, Number.isInteger.\n */\nexport const isInteger = (Number as { isInteger?(n: number): boolean }).isInteger || isIntegerShim;\n\n/**\n *  Math.pow(2, 53) - 1\n *\n *  In ES2015 Number.MAX_SAFE_INTEGER.\n */\nexport const MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Returns true if the argument is a safe integer number\n * (-MIN_SAFE_INTEGER < number <= MAX_SAFE_INTEGER)\n *\n * In ES2015, Number.isSafeInteger.\n */\nexport const isSafeInteger = (n: number): boolean =>\n    isInteger(n) && (n >= -MAX_SAFE_INTEGER && n <= MAX_SAFE_INTEGER);\n"],"names":[],"mappings":";AAAA,sCAAsC;AACtC,6CAA6C;;;;AAE7C;;IAIA,4BAA4B;AAC5B,SAAS,SAAS,CAAS,EAAE,CAAS;IAClC,IAAM,KAAK,AAAC,MAAM,KAAM,QAAQ,KAAK,IAAI;IACzC,IAAM,KAAK,AAAC,MAAM,KAAM,QAAQ,KAAK,IAAI;IACzC,OAAQ,AAAC,KAAK,KAAM,CAAC,AAAE,KAAK,KAAK,KAAK,MAAO,OAAQ,CAAC,IAAI;AAC9D;AAEA,oCAAA,GACA,6DAA6D;AAChD,QAAA,GAAG,GAAI,KAAiD,IAAI,IAAI;AAE7E,8BAAA,GACA,SAAgB,IAAI,CAAS,EAAE,CAAS;IACpC,OAAO,AAAC,IAAI,IAAK;AACrB;AAFA,QAAA,GAAA,GAAA;AAIA,kCAAA,GACA,SAAgB,IAAI,CAAS,EAAE,CAAS;IACpC,OAAO,AAAC,IAAI,IAAK;AACrB;AAFA,QAAA,GAAA,GAAA;AAIA,iCAAA,GACA,SAAgB,KAAK,CAAS,EAAE,CAAS;IACrC,OAAO,KAAK,IAAI,MAAO,KAAK;AAChC;AAFA,QAAA,IAAA,GAAA;AAIA,iCAAA,GACA,SAAgB,KAAK,CAAS,EAAE,CAAS;IACrC,OAAO,KAAM,KAAK,IAAK,MAAM;AACjC;AAFA,QAAA,IAAA,GAAA;AAIA,SAAS,cAAc,CAAS;IAC5B,OAAO,OAAO,MAAM,YAAY,SAAS,MAAM,KAAK,KAAK,CAAC,OAAO;AACrE;AAEA;;;;IAKa,QAAA,SAAS,GAAI,OAA8C,SAAS,IAAI;AAErF;;;;IAKa,QAAA,gBAAgB,GAAG;AAEhC;;;;;IAMa,QAAA,aAAa,GAAG,SAAC,CAAS;IACnC,OAAA,QAAA,SAAS,CAAC,MAAO,KAAK,CAAC,QAAA,gBAAgB,IAAI,KAAK,QAAA,gBAAgB;AAAhE"}},
    {"offset": {"line": 57, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 61, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@stablelib/binary/binary.ts"],"sourcesContent":["// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\n\n/**\n * Package binary provides functions for encoding and decoding numbers in byte arrays.\n */\n\nimport { isSafeInteger } from \"@stablelib/int\";\n\n// TODO(dchest): add asserts for correct value ranges and array offsets.\n\n/**\n * Reads 2 bytes from array starting at offset as big-endian\n * signed 16-bit integer and returns it.\n */\nexport function readInt16BE(array: Uint8Array, offset = 0): number {\n    return (((array[offset + 0] << 8) | array[offset + 1]) << 16) >> 16;\n}\n\n/**\n * Reads 2 bytes from array starting at offset as big-endian\n * unsigned 16-bit integer and returns it.\n */\nexport function readUint16BE(array: Uint8Array, offset = 0): number {\n    return ((array[offset + 0] << 8) | array[offset + 1]) >>> 0;\n}\n\n/**\n * Reads 2 bytes from array starting at offset as little-endian\n * signed 16-bit integer and returns it.\n */\nexport function readInt16LE(array: Uint8Array, offset = 0): number {\n    return (((array[offset + 1] << 8) | array[offset]) << 16) >> 16;\n}\n\n/**\n * Reads 2 bytes from array starting at offset as little-endian\n * unsigned 16-bit integer and returns it.\n */\nexport function readUint16LE(array: Uint8Array, offset = 0): number {\n    return ((array[offset + 1] << 8) | array[offset]) >>> 0;\n}\n\n/**\n * Writes 2-byte big-endian representation of 16-bit unsigned\n * value to byte array starting at offset.\n *\n * If byte array is not given, creates a new 2-byte one.\n *\n * Returns the output byte array.\n */\nexport function writeUint16BE(value: number, out = new Uint8Array(2), offset = 0): Uint8Array {\n    out[offset + 0] = value >>> 8;\n    out[offset + 1] = value >>> 0;\n    return out;\n}\n\nexport const writeInt16BE = writeUint16BE;\n\n/**\n * Writes 2-byte little-endian representation of 16-bit unsigned\n * value to array starting at offset.\n *\n * If byte array is not given, creates a new 2-byte one.\n *\n * Returns the output byte array.\n */\nexport function writeUint16LE(value: number, out = new Uint8Array(2), offset = 0): Uint8Array {\n    out[offset + 0] = value >>> 0;\n    out[offset + 1] = value >>> 8;\n    return out;\n}\n\nexport const writeInt16LE = writeUint16LE;\n\n/**\n * Reads 4 bytes from array starting at offset as big-endian\n * signed 32-bit integer and returns it.\n */\nexport function readInt32BE(array: Uint8Array, offset = 0): number {\n    return (array[offset] << 24) |\n        (array[offset + 1] << 16) |\n        (array[offset + 2] << 8) |\n        array[offset + 3];\n}\n\n/**\n * Reads 4 bytes from array starting at offset as big-endian\n * unsigned 32-bit integer and returns it.\n */\nexport function readUint32BE(array: Uint8Array, offset = 0): number {\n    return ((array[offset] << 24) |\n        (array[offset + 1] << 16) |\n        (array[offset + 2] << 8) |\n        array[offset + 3]) >>> 0;\n}\n\n/**\n * Reads 4 bytes from array starting at offset as little-endian\n * signed 32-bit integer and returns it.\n */\nexport function readInt32LE(array: Uint8Array, offset = 0): number {\n    return (array[offset + 3] << 24) |\n        (array[offset + 2] << 16) |\n        (array[offset + 1] << 8) |\n        array[offset];\n}\n\n/**\n * Reads 4 bytes from array starting at offset as little-endian\n * unsigned 32-bit integer and returns it.\n */\nexport function readUint32LE(array: Uint8Array, offset = 0): number {\n    return ((array[offset + 3] << 24) |\n        (array[offset + 2] << 16) |\n        (array[offset + 1] << 8) |\n        array[offset]) >>> 0;\n}\n\n/**\n * Writes 4-byte big-endian representation of 32-bit unsigned\n * value to byte array starting at offset.\n *\n * If byte array is not given, creates a new 4-byte one.\n *\n * Returns the output byte array.\n */\nexport function writeUint32BE(value: number, out = new Uint8Array(4), offset = 0): Uint8Array {\n    out[offset + 0] = value >>> 24;\n    out[offset + 1] = value >>> 16;\n    out[offset + 2] = value >>> 8;\n    out[offset + 3] = value >>> 0;\n    return out;\n}\n\nexport const writeInt32BE = writeUint32BE;\n\n/**\n * Writes 4-byte little-endian representation of 32-bit unsigned\n * value to array starting at offset.\n *\n * If byte array is not given, creates a new 4-byte one.\n *\n * Returns the output byte array.\n */\nexport function writeUint32LE(value: number, out = new Uint8Array(4), offset = 0): Uint8Array {\n    out[offset + 0] = value >>> 0;\n    out[offset + 1] = value >>> 8;\n    out[offset + 2] = value >>> 16;\n    out[offset + 3] = value >>> 24;\n    return out;\n}\n\n\nexport const writeInt32LE = writeUint32LE;\n\n/**\n * Reads 8 bytes from array starting at offset as big-endian\n * signed 64-bit integer and returns it.\n *\n * IMPORTANT: due to JavaScript limitation, supports exact\n * numbers in range -9007199254740991 to 9007199254740991.\n * If the number stored in the byte array is outside this range,\n * the result is not exact.\n */\nexport function readInt64BE(array: Uint8Array, offset = 0): number {\n    const hi = readInt32BE(array, offset);\n    const lo = readInt32BE(array, offset + 4);\n    return hi * 0x100000000 + lo - ((lo>>31) * 0x100000000);\n}\n\n/**\n * Reads 8 bytes from array starting at offset as big-endian\n * unsigned 64-bit integer and returns it.\n *\n * IMPORTANT: due to JavaScript limitation, supports values up to 2^53-1.\n */\nexport function readUint64BE(array: Uint8Array, offset = 0): number {\n    const hi = readUint32BE(array, offset);\n    const lo = readUint32BE(array, offset + 4);\n    return hi * 0x100000000 + lo;\n}\n\n/**\n * Reads 8 bytes from array starting at offset as little-endian\n * signed 64-bit integer and returns it.\n *\n * IMPORTANT: due to JavaScript limitation, supports exact\n * numbers in range -9007199254740991 to 9007199254740991.\n * If the number stored in the byte array is outside this range,\n * the result is not exact.\n */\nexport function readInt64LE(array: Uint8Array, offset = 0): number {\n    const lo = readInt32LE(array, offset);\n    const hi = readInt32LE(array, offset + 4);\n    return hi * 0x100000000 + lo - ((lo>>31) * 0x100000000);\n}\n\n\n/**\n * Reads 8 bytes from array starting at offset as little-endian\n * unsigned 64-bit integer and returns it.\n *\n * IMPORTANT: due to JavaScript limitation, supports values up to 2^53-1.\n */\nexport function readUint64LE(array: Uint8Array, offset = 0): number {\n    const lo = readUint32LE(array, offset);\n    const hi = readUint32LE(array, offset + 4);\n    return hi * 0x100000000 + lo;\n}\n\n/**\n * Writes 8-byte big-endian representation of 64-bit unsigned\n * value to byte array starting at offset.\n *\n * Due to JavaScript limitation, supports values up to 2^53-1.\n *\n * If byte array is not given, creates a new 8-byte one.\n *\n * Returns the output byte array.\n */\nexport function writeUint64BE(value: number, out = new Uint8Array(8), offset = 0): Uint8Array {\n    writeUint32BE(value / 0x100000000 >>> 0, out, offset);\n    writeUint32BE(value >>> 0, out, offset + 4);\n    return out;\n}\n\nexport const writeInt64BE = writeUint64BE;\n\n/**\n * Writes 8-byte little-endian representation of 64-bit unsigned\n * value to byte array starting at offset.\n *\n * Due to JavaScript limitation, supports values up to 2^53-1.\n *\n * If byte array is not given, creates a new 8-byte one.\n *\n * Returns the output byte array.\n */\nexport function writeUint64LE(value: number, out = new Uint8Array(8), offset = 0): Uint8Array {\n    writeUint32LE(value >>> 0, out, offset);\n    writeUint32LE(value / 0x100000000 >>> 0, out, offset + 4);\n    return out;\n}\n\nexport const writeInt64LE = writeUint64LE;\n\n/**\n * Reads bytes from array starting at offset as big-endian\n * unsigned bitLen-bit integer and returns it.\n *\n * Supports bit lengths divisible by 8, up to 48.\n */\nexport function readUintBE(bitLength: number, array: Uint8Array, offset = 0): number {\n    // TODO(dchest): implement support for bitLengths non-divisible by 8\n    if (bitLength % 8 !== 0) {\n        throw new Error(\"readUintBE supports only bitLengths divisible by 8\");\n    }\n    if (bitLength / 8 > array.length - offset) {\n        throw new Error(\"readUintBE: array is too short for the given bitLength\");\n    }\n    let result = 0;\n    let mul = 1;\n    for (let i = bitLength / 8 + offset - 1; i >= offset; i--) {\n        result += array[i] * mul;\n        mul *= 256;\n    }\n    return result;\n}\n\n/**\n * Reads bytes from array starting at offset as little-endian\n * unsigned bitLen-bit integer and returns it.\n *\n * Supports bit lengths divisible by 8, up to 48.\n */\nexport function readUintLE(bitLength: number, array: Uint8Array, offset = 0): number {\n    // TODO(dchest): implement support for bitLengths non-divisible by 8\n    if (bitLength % 8 !== 0) {\n        throw new Error(\"readUintLE supports only bitLengths divisible by 8\");\n    }\n    if (bitLength / 8 > array.length - offset) {\n        throw new Error(\"readUintLE: array is too short for the given bitLength\");\n    }\n    let result = 0;\n    let mul = 1;\n    for (let i = offset; i < offset + bitLength / 8; i++) {\n        result += array[i] * mul;\n        mul *= 256;\n    }\n    return result;\n}\n\n/**\n * Writes a big-endian representation of bitLen-bit unsigned\n * value to array starting at offset.\n *\n * Supports bit lengths divisible by 8, up to 48.\n *\n * If byte array is not given, creates a new one.\n *\n * Returns the output byte array.\n */\nexport function writeUintBE(bitLength: number, value: number,\n    out = new Uint8Array(bitLength / 8), offset = 0): Uint8Array {\n    // TODO(dchest): implement support for bitLengths non-divisible by 8\n    if (bitLength % 8 !== 0) {\n        throw new Error(\"writeUintBE supports only bitLengths divisible by 8\");\n    }\n    if (!isSafeInteger(value)) {\n        throw new Error(\"writeUintBE value must be an integer\");\n    }\n    let div = 1;\n    for (let i = bitLength / 8 + offset - 1; i >= offset; i--) {\n        out[i] = (value / div) & 0xff;\n        div *= 256;\n    }\n    return out;\n}\n\n/**\n * Writes a little-endian representation of bitLen-bit unsigned\n * value to array starting at offset.\n *\n * Supports bit lengths divisible by 8, up to 48.\n *\n * If byte array is not given, creates a new one.\n *\n * Returns the output byte array.\n */\nexport function writeUintLE(bitLength: number, value: number,\n    out = new Uint8Array(bitLength / 8), offset = 0): Uint8Array {\n    // TODO(dchest): implement support for bitLengths non-divisible by 8\n    if (bitLength % 8 !== 0) {\n        throw new Error(\"writeUintLE supports only bitLengths divisible by 8\");\n    }\n    if (!isSafeInteger(value)) {\n        throw new Error(\"writeUintLE value must be an integer\");\n    }\n    let div = 1;\n    for (let i = offset; i < offset + bitLength / 8; i++) {\n        out[i] = (value / div) & 0xff;\n        div *= 256;\n    }\n    return out;\n}\n\n/**\n * Reads 4 bytes from array starting at offset as big-endian\n * 32-bit floating-point number and returns it.\n */\nexport function readFloat32BE(array: Uint8Array, offset = 0): number {\n    const view = new DataView(array.buffer, array.byteOffset, array.byteLength);\n    return view.getFloat32(offset);\n}\n\n/**\n * Reads 4 bytes from array starting at offset as little-endian\n * 32-bit floating-point number and returns it.\n */\nexport function readFloat32LE(array: Uint8Array, offset = 0): number {\n    const view = new DataView(array.buffer, array.byteOffset, array.byteLength);\n    return view.getFloat32(offset, true);\n}\n\n/**\n * Reads 8 bytes from array starting at offset as big-endian\n * 64-bit floating-point number (\"double\") and returns it.\n */\nexport function readFloat64BE(array: Uint8Array, offset = 0): number {\n    const view = new DataView(array.buffer, array.byteOffset, array.byteLength);\n    return view.getFloat64(offset);\n}\n\n/**\n * Reads 8 bytes from array starting at offset as little-endian\n * 64-bit floating-point number (\"double\") and returns it.\n */\nexport function readFloat64LE(array: Uint8Array, offset = 0): number {\n    const view = new DataView(array.buffer, array.byteOffset, array.byteLength);\n    return view.getFloat64(offset, true);\n}\n\n/**\n * Writes 4-byte big-endian floating-point representation of value\n * to byte array starting at offset.\n *\n * If byte array is not given, creates a new 4-byte one.\n *\n * Returns the output byte array.\n */\nexport function writeFloat32BE(value: number, out = new Uint8Array(4), offset = 0): Uint8Array {\n    const view = new DataView(out.buffer, out.byteOffset, out.byteLength);\n    view.setFloat32(offset, value);\n    return out;\n}\n\n/**\n * Writes 4-byte little-endian floating-point representation of value\n * to byte array starting at offset.\n *\n * If byte array is not given, creates a new 4-byte one.\n *\n * Returns the output byte array.\n */\nexport function writeFloat32LE(value: number, out = new Uint8Array(4), offset = 0): Uint8Array {\n    const view = new DataView(out.buffer, out.byteOffset, out.byteLength);\n    view.setFloat32(offset, value, true);\n    return out;\n}\n\n/**\n * Writes 8-byte big-endian floating-point representation of value\n * to byte array starting at offset.\n *\n * If byte array is not given, creates a new 8-byte one.\n *\n * Returns the output byte array.\n */\nexport function writeFloat64BE(value: number, out = new Uint8Array(8), offset = 0): Uint8Array {\n    const view = new DataView(out.buffer, out.byteOffset, out.byteLength);\n    view.setFloat64(offset, value);\n    return out;\n}\n\n/**\n * Writes 8-byte little-endian floating-point representation of value\n * to byte array starting at offset.\n *\n * If byte array is not given, creates a new 8-byte one.\n *\n * Returns the output byte array.\n */\nexport function writeFloat64LE(value: number, out = new Uint8Array(8), offset = 0): Uint8Array {\n    const view = new DataView(out.buffer, out.byteOffset, out.byteLength);\n    view.setFloat64(offset, value, true);\n    return out;\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 573, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 577, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@stablelib/wipe/wipe.ts"],"sourcesContent":["// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\n\n/**\n * Package wipe implements functions for zeroing arrays.\n */\n\nexport type NumericArray = number[] | Uint8Array | Int8Array | Uint16Array\n    | Int16Array | Uint32Array | Int32Array | Float32Array | Float64Array;\n\n/**\n * Sets all values in the given array to zero and returns it.\n *\n * The fact that it sets bytes to zero can be relied on.\n *\n * There is no guarantee that this function makes data disappear from memory,\n * as runtime implementation can, for example, have copying garbage collector\n * that will make copies of sensitive data before we wipe it. Or that an\n * operating system will write our data to swap or sleep image. Another thing\n * is that an optimizing compiler can remove calls to this function or make it\n * no-op. There's nothing we can do with it, so we just do our best and hope\n * that everything will be okay and good will triumph over evil.\n */\nexport function wipe(array: NumericArray): NumericArray {\n    // Right now it's similar to array.fill(0). If it turns\n    // out that runtimes optimize this call away, maybe\n    // we can try something else.\n    for (let i = 0; i < array.length; i++) {\n        array[i] = 0;\n    }\n    return array;\n}\n"],"names":[],"mappings":";AAAA,sCAAsC;AACtC,6CAA6C;;;;AAS7C;;;;;;;;;;;;IAaA,SAAgB,KAAK,KAAmB;IACpC,uDAAuD;IACvD,mDAAmD;IACnD,6BAA6B;IAC7B,IAAK,IAAI,IAAI,GAAG,IAAI,MAAM,MAAM,EAAE,IAAK;QACnC,KAAK,CAAC,EAAE,GAAG;;IAEf,OAAO;AACX;AARA,QAAA,IAAA,GAAA"}},
    {"offset": {"line": 605, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 609, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@stablelib/chacha/chacha.ts"],"sourcesContent":["// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\n\n/**\n * Package chacha implements ChaCha stream cipher.\n */\n\nimport { writeUint32LE } from \"@stablelib/binary\";\nimport { wipe } from \"@stablelib/wipe\";\n\n// Number of ChaCha rounds (ChaCha20).\nconst ROUNDS = 20;\n\n// Applies the ChaCha core function to 16-byte input,\n// 32-byte key key, and puts the result into 64-byte array out.\nfunction core(out: Uint8Array, input: Uint8Array, key: Uint8Array): void {\n    let j0 = 0x61707865; // \"expa\"  -- ChaCha's \"sigma\" constant\n    let j1 = 0x3320646E; // \"nd 3\"     for 32-byte keys\n    let j2 = 0x79622D32; // \"2-by\"\n    let j3 = 0x6B206574; // \"te k\"\n    let j4 = (key[3] << 24) | (key[2] << 16) | (key[1] << 8) | key[0];\n    let j5 = (key[7] << 24) | (key[6] << 16) | (key[5] << 8) | key[4];\n    let j6 = (key[11] << 24) | (key[10] << 16) | (key[9] << 8) | key[8];\n    let j7 = (key[15] << 24) | (key[14] << 16) | (key[13] << 8) | key[12];\n    let j8 = (key[19] << 24) | (key[18] << 16) | (key[17] << 8) | key[16];\n    let j9 = (key[23] << 24) | (key[22] << 16) | (key[21] << 8) | key[20];\n    let j10 = (key[27] << 24) | (key[26] << 16) | (key[25] << 8) | key[24];\n    let j11 = (key[31] << 24) | (key[30] << 16) | (key[29] << 8) | key[28];\n    let j12 = (input[3] << 24) | (input[2] << 16) | (input[1] << 8) | input[0];\n    let j13 = (input[7] << 24) | (input[6] << 16) | (input[5] << 8) | input[4];\n    let j14 = (input[11] << 24) | (input[10] << 16) | (input[9] << 8) | input[8];\n    let j15 = (input[15] << 24) | (input[14] << 16) | (input[13] << 8) | input[12];\n\n    let x0 = j0;\n    let x1 = j1;\n    let x2 = j2;\n    let x3 = j3;\n    let x4 = j4;\n    let x5 = j5;\n    let x6 = j6;\n    let x7 = j7;\n    let x8 = j8;\n    let x9 = j9;\n    let x10 = j10;\n    let x11 = j11;\n    let x12 = j12;\n    let x13 = j13;\n    let x14 = j14;\n    let x15 = j15;\n\n    for (let i = 0; i < ROUNDS; i += 2) {\n        x0 = x0 + x4 | 0; x12 ^= x0; x12 = x12 >>> (32 - 16) | x12 << 16;\n        x8 = x8 + x12 | 0; x4 ^= x8; x4 = x4 >>> (32 - 12) | x4 << 12;\n        x1 = x1 + x5 | 0; x13 ^= x1; x13 = x13 >>> (32 - 16) | x13 << 16;\n        x9 = x9 + x13 | 0; x5 ^= x9; x5 = x5 >>> (32 - 12) | x5 << 12;\n\n        x2 = x2 + x6 | 0; x14 ^= x2; x14 = x14 >>> (32 - 16) | x14 << 16;\n        x10 = x10 + x14 | 0; x6 ^= x10; x6 = x6 >>> (32 - 12) | x6 << 12;\n        x3 = x3 + x7 | 0; x15 ^= x3; x15 = x15 >>> (32 - 16) | x15 << 16;\n        x11 = x11 + x15 | 0; x7 ^= x11; x7 = x7 >>> (32 - 12) | x7 << 12;\n\n        x2 = x2 + x6 | 0; x14 ^= x2; x14 = x14 >>> (32 - 8) | x14 << 8;\n        x10 = x10 + x14 | 0; x6 ^= x10; x6 = x6 >>> (32 - 7) | x6 << 7;\n        x3 = x3 + x7 | 0; x15 ^= x3; x15 = x15 >>> (32 - 8) | x15 << 8;\n        x11 = x11 + x15 | 0; x7 ^= x11; x7 = x7 >>> (32 - 7) | x7 << 7;\n\n        x1 = x1 + x5 | 0; x13 ^= x1; x13 = x13 >>> (32 - 8) | x13 << 8;\n        x9 = x9 + x13 | 0; x5 ^= x9; x5 = x5 >>> (32 - 7) | x5 << 7;\n        x0 = x0 + x4 | 0; x12 ^= x0; x12 = x12 >>> (32 - 8) | x12 << 8;\n        x8 = x8 + x12 | 0; x4 ^= x8; x4 = x4 >>> (32 - 7) | x4 << 7;\n\n        x0 = x0 + x5 | 0; x15 ^= x0; x15 = x15 >>> (32 - 16) | x15 << 16;\n        x10 = x10 + x15 | 0; x5 ^= x10; x5 = x5 >>> (32 - 12) | x5 << 12;\n        x1 = x1 + x6 | 0; x12 ^= x1; x12 = x12 >>> (32 - 16) | x12 << 16;\n        x11 = x11 + x12 | 0; x6 ^= x11; x6 = x6 >>> (32 - 12) | x6 << 12;\n\n        x2 = x2 + x7 | 0; x13 ^= x2; x13 = x13 >>> (32 - 16) | x13 << 16;\n        x8 = x8 + x13 | 0; x7 ^= x8; x7 = x7 >>> (32 - 12) | x7 << 12;\n        x3 = x3 + x4 | 0; x14 ^= x3; x14 = x14 >>> (32 - 16) | x14 << 16;\n        x9 = x9 + x14 | 0; x4 ^= x9; x4 = x4 >>> (32 - 12) | x4 << 12;\n\n        x2 = x2 + x7 | 0; x13 ^= x2; x13 = x13 >>> (32 - 8) | x13 << 8;\n        x8 = x8 + x13 | 0; x7 ^= x8; x7 = x7 >>> (32 - 7) | x7 << 7;\n        x3 = x3 + x4 | 0; x14 ^= x3; x14 = x14 >>> (32 - 8) | x14 << 8;\n        x9 = x9 + x14 | 0; x4 ^= x9; x4 = x4 >>> (32 - 7) | x4 << 7;\n\n        x1 = x1 + x6 | 0; x12 ^= x1; x12 = x12 >>> (32 - 8) | x12 << 8;\n        x11 = x11 + x12 | 0; x6 ^= x11; x6 = x6 >>> (32 - 7) | x6 << 7;\n        x0 = x0 + x5 | 0; x15 ^= x0; x15 = x15 >>> (32 - 8) | x15 << 8;\n        x10 = x10 + x15 | 0; x5 ^= x10; x5 = x5 >>> (32 - 7) | x5 << 7;\n    }\n    writeUint32LE(x0 + j0 | 0, out, 0);\n    writeUint32LE(x1 + j1 | 0, out, 4);\n    writeUint32LE(x2 + j2 | 0, out, 8);\n    writeUint32LE(x3 + j3 | 0, out, 12);\n    writeUint32LE(x4 + j4 | 0, out, 16);\n    writeUint32LE(x5 + j5 | 0, out, 20);\n    writeUint32LE(x6 + j6 | 0, out, 24);\n    writeUint32LE(x7 + j7 | 0, out, 28);\n    writeUint32LE(x8 + j8 | 0, out, 32);\n    writeUint32LE(x9 + j9 | 0, out, 36);\n    writeUint32LE(x10 + j10 | 0, out, 40);\n    writeUint32LE(x11 + j11 | 0, out, 44);\n    writeUint32LE(x12 + j12 | 0, out, 48);\n    writeUint32LE(x13 + j13 | 0, out, 52);\n    writeUint32LE(x14 + j14 | 0, out, 56);\n    writeUint32LE(x15 + j15 | 0, out, 60);\n}\n\n/**\n * Encrypt src with ChaCha20 stream generated for the given 32-byte key and\n * 8-byte (as in original implementation) or 12-byte (as in RFC7539) nonce and\n * write the result into dst and return it.\n *\n * dst and src may be the same, but otherwise must not overlap.\n *\n * If nonce is 12 bytes, users should not encrypt more than 256 GiB with the\n * same key and nonce, otherwise the stream will repeat. The function will\n * throw error if counter overflows to prevent this.\n *\n * If nonce is 8 bytes, the output is practically unlimited (2^70 bytes, which\n * is more than a million petabytes). However, it is not recommended to\n * generate 8-byte nonces randomly, as the chance of collision is high.\n *\n * Never use the same key and nonce to encrypt more than one message.\n *\n * If nonceInplaceCounterLength is not 0, the nonce is assumed to be a 16-byte\n * array with stream counter in first nonceInplaceCounterLength bytes and nonce\n * in the last remaining bytes. The counter will be incremented inplace for\n * each ChaCha block. This is useful if you need to encrypt one stream of data\n * in chunks.\n */\nexport function streamXOR(key: Uint8Array, nonce: Uint8Array,\n    src: Uint8Array, dst: Uint8Array, nonceInplaceCounterLength = 0): Uint8Array {\n    // We only support 256-bit keys.\n    if (key.length !== 32) {\n        throw new Error(\"ChaCha: key size must be 32 bytes\");\n    }\n\n    if (dst.length < src.length) {\n        throw new Error(\"ChaCha: destination is shorter than source\");\n    }\n\n    let nc: Uint8Array;\n    let counterLength: number;\n\n    if (nonceInplaceCounterLength === 0) {\n        if (nonce.length !== 8 && nonce.length !== 12) {\n            throw new Error(\"ChaCha nonce must be 8 or 12 bytes\");\n        }\n        nc = new Uint8Array(16);\n        // First counterLength bytes of nc are counter, starting with zero.\n        counterLength = nc.length - nonce.length;\n        // Last bytes of nc after counterLength are nonce, set them.\n        nc.set(nonce, counterLength);\n    } else {\n        if (nonce.length !== 16) {\n            throw new Error(\"ChaCha nonce with counter must be 16 bytes\");\n        }\n        // This will update passed nonce with counter inplace.\n        nc = nonce;\n        counterLength = nonceInplaceCounterLength;\n    }\n\n    // Allocate temporary space for ChaCha block.\n    const block = new Uint8Array(64);\n\n    for (let i = 0; i < src.length; i += 64) {\n        // Generate a block.\n        core(block, nc, key);\n\n        // XOR block bytes with src into dst.\n        for (let j = i; j < i + 64 && j < src.length; j++) {\n            dst[j] = src[j] ^ block[j - i];\n        }\n\n        // Increment counter.\n        incrementCounter(nc, 0, counterLength);\n    }\n\n    // Cleanup temporary space.\n    wipe(block);\n\n    if (nonceInplaceCounterLength === 0) {\n        // Cleanup counter.\n        wipe(nc);\n    }\n\n    return dst;\n}\n\n/**\n * Generate ChaCha20 stream for the given 32-byte key and 8-byte or 12-byte\n * nonce and write it into dst and return it.\n *\n * Never use the same key and nonce to generate more than one stream.\n *\n * If nonceInplaceCounterLength is not 0, it behaves the same with respect to\n * the nonce as described in the streamXOR documentation.\n *\n * stream is like streamXOR with all-zero src.\n */\nexport function stream(key: Uint8Array, nonce: Uint8Array,\n    dst: Uint8Array, nonceInplaceCounterLength = 0): Uint8Array {\n    wipe(dst);\n    return streamXOR(key, nonce, dst, dst, nonceInplaceCounterLength);\n}\n\nfunction incrementCounter(counter: Uint8Array, pos: number, len: number) {\n    let carry = 1;\n    while (len--) {\n        carry = carry + (counter[pos] & 0xff) | 0;\n        counter[pos] = carry & 0xff;\n        carry >>>= 8;\n        pos++;\n    }\n    if (carry > 0) {\n        throw new Error(\"ChaCha: counter overflow\");\n    }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 874, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 878, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@stablelib/constant-time/constant-time.ts"],"sourcesContent":["// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\n\n/**\n * Package constant-time provides functions for performing algorithmically constant-time operations.\n */\n\n/**\n * NOTE! Due to the inability to guarantee real constant time evaluation of\n * anything in JavaScript VM, this is module is the best effort.\n */\n\n/**\n * Returns resultIfOne if subject is 1, or resultIfZero if subject is 0.\n *\n * Supports only 32-bit integers, so resultIfOne or resultIfZero are not\n * integers, they'll be converted to them with bitwise operations.\n */\nexport function select(subject: number, resultIfOne: number, resultIfZero: number): number {\n    return (~(subject - 1) & resultIfOne) | ((subject - 1) & resultIfZero);\n}\n\n/**\n * Returns 1 if a <= b, or 0 if not.\n * Arguments must be positive 32-bit integers less than or equal to 2^31 - 1.\n */\nexport function lessOrEqual(a: number, b: number): number {\n    return (((a | 0) - (b | 0) - 1) >>> 31) & 1;\n}\n\n/**\n * Returns 1 if a and b are of equal length and their contents\n * are equal, or 0 otherwise.\n *\n * Note that unlike in equal(), zero-length inputs are considered\n * the same, so this function will return 1.\n */\nexport function compare(a: Uint8Array, b: Uint8Array): number {\n    if (a.length !== b.length) {\n        return 0;\n    }\n    let result = 0;\n    for (let i = 0; i < a.length; i++) {\n        result |= a[i] ^ b[i];\n    }\n    return (1 & ((result - 1) >>> 8));\n}\n\n/**\n * Returns true if a and b are of equal non-zero length,\n * and their contents are equal, or false otherwise.\n *\n * Note that unlike in compare() zero-length inputs are considered\n * _not_ equal, so this function will return false.\n */\nexport function equal(a: Uint8Array, b: Uint8Array): boolean {\n    if (a.length === 0 || b.length === 0) {\n        return false;\n    }\n    return compare(a, b) !== 0;\n}\n"],"names":[],"mappings":";AAAA,sCAAsC;AACtC,6CAA6C;;;;AAE7C;;IAIA;;;IAKA;;;;;IAMA,SAAgB,OAAO,OAAe,EAAE,WAAmB,EAAE,YAAoB;IAC7E,OAAO,AAAC,CAAC,CAAC,UAAU,CAAC,IAAI,cAAgB,AAAC,UAAU,IAAK;AAC7D;AAFA,QAAA,MAAA,GAAA;AAIA;;;IAIA,SAAgB,YAAY,CAAS,EAAE,CAAS;IAC5C,OAAO,AAAE,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,MAAO,KAAM;AAC9C;AAFA,QAAA,WAAA,GAAA;AAIA;;;;;;IAOA,SAAgB,QAAQ,CAAa,EAAE,CAAa;IAChD,IAAI,EAAE,MAAM,KAAK,EAAE,MAAM,EAAE;QACvB,OAAO;;IAEX,IAAI,SAAS;IACb,IAAK,IAAI,IAAI,GAAG,IAAI,EAAE,MAAM,EAAE,IAAK;QAC/B,UAAU,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE;;IAEzB,OAAQ,IAAK,AAAC,SAAS,MAAO;AAClC;AATA,QAAA,OAAA,GAAA;AAWA;;;;;;IAOA,SAAgB,MAAM,CAAa,EAAE,CAAa;IAC9C,IAAI,EAAE,MAAM,KAAK,KAAK,EAAE,MAAM,KAAK,GAAG;QAClC,OAAO;;IAEX,OAAO,QAAQ,GAAG,OAAO;AAC7B;AALA,QAAA,KAAA,GAAA"}},
    {"offset": {"line": 935, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 939, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@stablelib/poly1305/poly1305.ts"],"sourcesContent":["// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\n\n/**\n * Package poly1305 implements Poly1305 one-time message authentication algorithm.\n */\n\nimport { equal as constantTimeEqual } from \"@stablelib/constant-time\";\nimport { wipe } from \"@stablelib/wipe\";\n\nexport const DIGEST_LENGTH = 16;\n\n// Port of Andrew Moon's Poly1305-donna-16. Public domain.\n// https://github.com/floodyberry/poly1305-donna\n\n/**\n * Poly1305 computes 16-byte authenticator of message using\n * a one-time 32-byte key.\n *\n * Important: key should be used for only one message,\n * it should never repeat.\n */\nexport class Poly1305 {\n    readonly digestLength = DIGEST_LENGTH;\n\n    private _buffer = new Uint8Array(16);\n    private _r = new Uint16Array(10);\n    private _h = new Uint16Array(10);\n    private _pad = new Uint16Array(8);\n    private _leftover = 0;\n    private _fin = 0;\n    private _finished = false;\n\n    constructor(key: Uint8Array) {\n        let t0 = key[0] | key[1] << 8; this._r[0] = (t0) & 0x1fff;\n        let t1 = key[2] | key[3] << 8; this._r[1] = ((t0 >>> 13) | (t1 << 3)) & 0x1fff;\n        let t2 = key[4] | key[5] << 8; this._r[2] = ((t1 >>> 10) | (t2 << 6)) & 0x1f03;\n        let t3 = key[6] | key[7] << 8; this._r[3] = ((t2 >>> 7) | (t3 << 9)) & 0x1fff;\n        let t4 = key[8] | key[9] << 8; this._r[4] = ((t3 >>> 4) | (t4 << 12)) & 0x00ff;\n        this._r[5] = ((t4 >>> 1)) & 0x1ffe;\n        let t5 = key[10] | key[11] << 8; this._r[6] = ((t4 >>> 14) | (t5 << 2)) & 0x1fff;\n        let t6 = key[12] | key[13] << 8; this._r[7] = ((t5 >>> 11) | (t6 << 5)) & 0x1f81;\n        let t7 = key[14] | key[15] << 8; this._r[8] = ((t6 >>> 8) | (t7 << 8)) & 0x1fff;\n        this._r[9] = ((t7 >>> 5)) & 0x007f;\n\n        this._pad[0] = key[16] | key[17] << 8;\n        this._pad[1] = key[18] | key[19] << 8;\n        this._pad[2] = key[20] | key[21] << 8;\n        this._pad[3] = key[22] | key[23] << 8;\n        this._pad[4] = key[24] | key[25] << 8;\n        this._pad[5] = key[26] | key[27] << 8;\n        this._pad[6] = key[28] | key[29] << 8;\n        this._pad[7] = key[30] | key[31] << 8;\n    }\n\n    private _blocks(m: Uint8Array, mpos: number, bytes: number) {\n        let hibit = this._fin ? 0 : 1 << 11;\n\n        let h0 = this._h[0],\n            h1 = this._h[1],\n            h2 = this._h[2],\n            h3 = this._h[3],\n            h4 = this._h[4],\n            h5 = this._h[5],\n            h6 = this._h[6],\n            h7 = this._h[7],\n            h8 = this._h[8],\n            h9 = this._h[9];\n\n        let r0 = this._r[0],\n            r1 = this._r[1],\n            r2 = this._r[2],\n            r3 = this._r[3],\n            r4 = this._r[4],\n            r5 = this._r[5],\n            r6 = this._r[6],\n            r7 = this._r[7],\n            r8 = this._r[8],\n            r9 = this._r[9];\n\n        while (bytes >= 16) {\n            let t0 = m[mpos + 0] | m[mpos + 1] << 8; h0 += (t0) & 0x1fff;\n            let t1 = m[mpos + 2] | m[mpos + 3] << 8; h1 += ((t0 >>> 13) | (t1 << 3)) & 0x1fff;\n            let t2 = m[mpos + 4] | m[mpos + 5] << 8; h2 += ((t1 >>> 10) | (t2 << 6)) & 0x1fff;\n            let t3 = m[mpos + 6] | m[mpos + 7] << 8; h3 += ((t2 >>> 7) | (t3 << 9)) & 0x1fff;\n            let t4 = m[mpos + 8] | m[mpos + 9] << 8; h4 += ((t3 >>> 4) | (t4 << 12)) & 0x1fff;\n            h5 += ((t4 >>> 1)) & 0x1fff;\n            let t5 = m[mpos + 10] | m[mpos + 11] << 8; h6 += ((t4 >>> 14) | (t5 << 2)) & 0x1fff;\n            let t6 = m[mpos + 12] | m[mpos + 13] << 8; h7 += ((t5 >>> 11) | (t6 << 5)) & 0x1fff;\n            let t7 = m[mpos + 14] | m[mpos + 15] << 8; h8 += ((t6 >>> 8) | (t7 << 8)) & 0x1fff;\n            h9 += ((t7 >>> 5)) | hibit;\n\n            let c = 0;\n\n            let d0 = c;\n            d0 += h0 * r0;\n            d0 += h1 * (5 * r9);\n            d0 += h2 * (5 * r8);\n            d0 += h3 * (5 * r7);\n            d0 += h4 * (5 * r6);\n            c = (d0 >>> 13); d0 &= 0x1fff;\n            d0 += h5 * (5 * r5);\n            d0 += h6 * (5 * r4);\n            d0 += h7 * (5 * r3);\n            d0 += h8 * (5 * r2);\n            d0 += h9 * (5 * r1);\n            c += (d0 >>> 13); d0 &= 0x1fff;\n\n            let d1 = c;\n            d1 += h0 * r1;\n            d1 += h1 * r0;\n            d1 += h2 * (5 * r9);\n            d1 += h3 * (5 * r8);\n            d1 += h4 * (5 * r7);\n            c = (d1 >>> 13); d1 &= 0x1fff;\n            d1 += h5 * (5 * r6);\n            d1 += h6 * (5 * r5);\n            d1 += h7 * (5 * r4);\n            d1 += h8 * (5 * r3);\n            d1 += h9 * (5 * r2);\n            c += (d1 >>> 13); d1 &= 0x1fff;\n\n            let d2 = c;\n            d2 += h0 * r2;\n            d2 += h1 * r1;\n            d2 += h2 * r0;\n            d2 += h3 * (5 * r9);\n            d2 += h4 * (5 * r8);\n            c = (d2 >>> 13); d2 &= 0x1fff;\n            d2 += h5 * (5 * r7);\n            d2 += h6 * (5 * r6);\n            d2 += h7 * (5 * r5);\n            d2 += h8 * (5 * r4);\n            d2 += h9 * (5 * r3);\n            c += (d2 >>> 13); d2 &= 0x1fff;\n\n            let d3 = c;\n            d3 += h0 * r3;\n            d3 += h1 * r2;\n            d3 += h2 * r1;\n            d3 += h3 * r0;\n            d3 += h4 * (5 * r9);\n            c = (d3 >>> 13); d3 &= 0x1fff;\n            d3 += h5 * (5 * r8);\n            d3 += h6 * (5 * r7);\n            d3 += h7 * (5 * r6);\n            d3 += h8 * (5 * r5);\n            d3 += h9 * (5 * r4);\n            c += (d3 >>> 13); d3 &= 0x1fff;\n\n            let d4 = c;\n            d4 += h0 * r4;\n            d4 += h1 * r3;\n            d4 += h2 * r2;\n            d4 += h3 * r1;\n            d4 += h4 * r0;\n            c = (d4 >>> 13); d4 &= 0x1fff;\n            d4 += h5 * (5 * r9);\n            d4 += h6 * (5 * r8);\n            d4 += h7 * (5 * r7);\n            d4 += h8 * (5 * r6);\n            d4 += h9 * (5 * r5);\n            c += (d4 >>> 13); d4 &= 0x1fff;\n\n            let d5 = c;\n            d5 += h0 * r5;\n            d5 += h1 * r4;\n            d5 += h2 * r3;\n            d5 += h3 * r2;\n            d5 += h4 * r1;\n            c = (d5 >>> 13); d5 &= 0x1fff;\n            d5 += h5 * r0;\n            d5 += h6 * (5 * r9);\n            d5 += h7 * (5 * r8);\n            d5 += h8 * (5 * r7);\n            d5 += h9 * (5 * r6);\n            c += (d5 >>> 13); d5 &= 0x1fff;\n\n            let d6 = c;\n            d6 += h0 * r6;\n            d6 += h1 * r5;\n            d6 += h2 * r4;\n            d6 += h3 * r3;\n            d6 += h4 * r2;\n            c = (d6 >>> 13); d6 &= 0x1fff;\n            d6 += h5 * r1;\n            d6 += h6 * r0;\n            d6 += h7 * (5 * r9);\n            d6 += h8 * (5 * r8);\n            d6 += h9 * (5 * r7);\n            c += (d6 >>> 13); d6 &= 0x1fff;\n\n            let d7 = c;\n            d7 += h0 * r7;\n            d7 += h1 * r6;\n            d7 += h2 * r5;\n            d7 += h3 * r4;\n            d7 += h4 * r3;\n            c = (d7 >>> 13); d7 &= 0x1fff;\n            d7 += h5 * r2;\n            d7 += h6 * r1;\n            d7 += h7 * r0;\n            d7 += h8 * (5 * r9);\n            d7 += h9 * (5 * r8);\n            c += (d7 >>> 13); d7 &= 0x1fff;\n\n            let d8 = c;\n            d8 += h0 * r8;\n            d8 += h1 * r7;\n            d8 += h2 * r6;\n            d8 += h3 * r5;\n            d8 += h4 * r4;\n            c = (d8 >>> 13); d8 &= 0x1fff;\n            d8 += h5 * r3;\n            d8 += h6 * r2;\n            d8 += h7 * r1;\n            d8 += h8 * r0;\n            d8 += h9 * (5 * r9);\n            c += (d8 >>> 13); d8 &= 0x1fff;\n\n            let d9 = c;\n            d9 += h0 * r9;\n            d9 += h1 * r8;\n            d9 += h2 * r7;\n            d9 += h3 * r6;\n            d9 += h4 * r5;\n            c = (d9 >>> 13); d9 &= 0x1fff;\n            d9 += h5 * r4;\n            d9 += h6 * r3;\n            d9 += h7 * r2;\n            d9 += h8 * r1;\n            d9 += h9 * r0;\n            c += (d9 >>> 13); d9 &= 0x1fff;\n\n            c = (((c << 2) + c)) | 0;\n            c = (c + d0) | 0;\n            d0 = c & 0x1fff;\n            c = (c >>> 13);\n            d1 += c;\n\n            h0 = d0;\n            h1 = d1;\n            h2 = d2;\n            h3 = d3;\n            h4 = d4;\n            h5 = d5;\n            h6 = d6;\n            h7 = d7;\n            h8 = d8;\n            h9 = d9;\n\n            mpos += 16;\n            bytes -= 16;\n        }\n        this._h[0] = h0;\n        this._h[1] = h1;\n        this._h[2] = h2;\n        this._h[3] = h3;\n        this._h[4] = h4;\n        this._h[5] = h5;\n        this._h[6] = h6;\n        this._h[7] = h7;\n        this._h[8] = h8;\n        this._h[9] = h9;\n    }\n\n    finish(mac: Uint8Array, macpos = 0): this {\n        const g = new Uint16Array(10);\n        let c: number;\n        let mask: number;\n        let f: number;\n        let i: number;\n\n        if (this._leftover) {\n            i = this._leftover;\n            this._buffer[i++] = 1;\n            for (; i < 16; i++) {\n                this._buffer[i] = 0;\n            }\n            this._fin = 1;\n            this._blocks(this._buffer, 0, 16);\n        }\n\n        c = this._h[1] >>> 13;\n        this._h[1] &= 0x1fff;\n        for (i = 2; i < 10; i++) {\n            this._h[i] += c;\n            c = this._h[i] >>> 13;\n            this._h[i] &= 0x1fff;\n        }\n        this._h[0] += (c * 5);\n        c = this._h[0] >>> 13;\n        this._h[0] &= 0x1fff;\n        this._h[1] += c;\n        c = this._h[1] >>> 13;\n        this._h[1] &= 0x1fff;\n        this._h[2] += c;\n\n        g[0] = this._h[0] + 5;\n        c = g[0] >>> 13;\n        g[0] &= 0x1fff;\n        for (i = 1; i < 10; i++) {\n            g[i] = this._h[i] + c;\n            c = g[i] >>> 13;\n            g[i] &= 0x1fff;\n        }\n        g[9] -= (1 << 13);\n\n        mask = (c ^ 1) - 1;\n        for (i = 0; i < 10; i++) {\n            g[i] &= mask;\n        }\n        mask = ~mask;\n        for (i = 0; i < 10; i++) {\n            this._h[i] = (this._h[i] & mask) | g[i];\n        }\n\n        this._h[0] = ((this._h[0]) | (this._h[1] << 13)) & 0xffff;\n        this._h[1] = ((this._h[1] >>> 3) | (this._h[2] << 10)) & 0xffff;\n        this._h[2] = ((this._h[2] >>> 6) | (this._h[3] << 7)) & 0xffff;\n        this._h[3] = ((this._h[3] >>> 9) | (this._h[4] << 4)) & 0xffff;\n        this._h[4] = ((this._h[4] >>> 12) | (this._h[5] << 1) | (this._h[6] << 14)) & 0xffff;\n        this._h[5] = ((this._h[6] >>> 2) | (this._h[7] << 11)) & 0xffff;\n        this._h[6] = ((this._h[7] >>> 5) | (this._h[8] << 8)) & 0xffff;\n        this._h[7] = ((this._h[8] >>> 8) | (this._h[9] << 5)) & 0xffff;\n\n        f = this._h[0] + this._pad[0];\n        this._h[0] = f & 0xffff;\n        for (i = 1; i < 8; i++) {\n            f = (((this._h[i] + this._pad[i]) | 0) + (f >>> 16)) | 0;\n            this._h[i] = f & 0xffff;\n        }\n\n        mac[macpos + 0] = this._h[0] >>> 0;\n        mac[macpos + 1] = this._h[0] >>> 8;\n        mac[macpos + 2] = this._h[1] >>> 0;\n        mac[macpos + 3] = this._h[1] >>> 8;\n        mac[macpos + 4] = this._h[2] >>> 0;\n        mac[macpos + 5] = this._h[2] >>> 8;\n        mac[macpos + 6] = this._h[3] >>> 0;\n        mac[macpos + 7] = this._h[3] >>> 8;\n        mac[macpos + 8] = this._h[4] >>> 0;\n        mac[macpos + 9] = this._h[4] >>> 8;\n        mac[macpos + 10] = this._h[5] >>> 0;\n        mac[macpos + 11] = this._h[5] >>> 8;\n        mac[macpos + 12] = this._h[6] >>> 0;\n        mac[macpos + 13] = this._h[6] >>> 8;\n        mac[macpos + 14] = this._h[7] >>> 0;\n        mac[macpos + 15] = this._h[7] >>> 8;\n\n        this._finished = true;\n        return this;\n    }\n\n    update(m: Uint8Array): this {\n        let mpos = 0;\n        let bytes = m.length;\n        let want: number;\n\n        if (this._leftover) {\n            want = (16 - this._leftover);\n            if (want > bytes) {\n                want = bytes;\n            }\n            for (let i = 0; i < want; i++) {\n                this._buffer[this._leftover + i] = m[mpos + i];\n            }\n            bytes -= want;\n            mpos += want;\n            this._leftover += want;\n            if (this._leftover < 16) {\n                return this;\n            }\n            this._blocks(this._buffer, 0, 16);\n            this._leftover = 0;\n        }\n\n        if (bytes >= 16) {\n            want = bytes - (bytes % 16);\n            this._blocks(m, mpos, want);\n            mpos += want;\n            bytes -= want;\n        }\n\n        if (bytes) {\n            for (let i = 0; i < bytes; i++) {\n                this._buffer[this._leftover + i] = m[mpos + i];\n            }\n            this._leftover += bytes;\n        }\n\n        return this;\n    }\n\n    digest(): Uint8Array {\n        // TODO(dchest): it behaves differently than other hashes/HMAC,\n        // because it throws when finished — others just return saved result.\n        if (this._finished) {\n            throw new Error(\"Poly1305 was finished\");\n        }\n        let mac = new Uint8Array(16);\n        this.finish(mac);\n        return mac;\n    }\n\n    clean(): this {\n        wipe(this._buffer);\n        wipe(this._r);\n        wipe(this._h);\n        wipe(this._pad);\n        this._leftover = 0;\n        this._fin = 0;\n        this._finished = true; // mark as finished even if not\n        return this;\n    }\n}\n\n/**\n * Returns 16-byte authenticator of data using a one-time 32-byte key.\n *\n * Important: key should be used for only one message, it should never repeat.\n */\nexport function oneTimeAuth(key: Uint8Array, data: Uint8Array): Uint8Array {\n    const h = new Poly1305(key);\n    h.update(data);\n    const digest = h.digest();\n    h.clean();\n    return digest;\n}\n\n/**\n * Returns true if two authenticators are 16-byte long and equal.\n * Uses contant-time comparison to avoid leaking timing information.\n */\nexport function equal(a: Uint8Array, b: Uint8Array): boolean {\n    if (a.length !== DIGEST_LENGTH || b.length !== DIGEST_LENGTH) {\n        return false;\n    }\n    return constantTimeEqual(a, b);\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1360, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1364, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@stablelib/chacha20poly1305/chacha20poly1305.ts"],"sourcesContent":["// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\n\n/**\n * Package chacha20poly1305 implements ChaCha20-Poly1305 AEAD.\n */\n\nimport { AEAD } from \"@stablelib/aead\";\nimport { streamXOR, stream } from \"@stablelib/chacha\";\nimport { Poly1305 } from \"@stablelib/poly1305\";\nimport { wipe } from \"@stablelib/wipe\";\nimport { writeUint64LE } from \"@stablelib/binary\";\nimport { equal } from \"@stablelib/constant-time\";\n\nexport const KEY_LENGTH = 32;\nexport const NONCE_LENGTH = 12;\nexport const TAG_LENGTH = 16;\n\nconst ZEROS = new Uint8Array(16);\n\n/**\n * ChaCha20-Poly1305 Authenticated Encryption with Associated Data.\n *\n * Defined in RFC7539.\n */\nexport class ChaCha20Poly1305 implements AEAD {\n    readonly nonceLength = NONCE_LENGTH;\n    readonly tagLength = TAG_LENGTH;\n\n    private _key: Uint8Array;\n\n    /**\n     * Creates a new instance with the given 32-byte key.\n     */\n    constructor(key: Uint8Array) {\n        if (key.length !== KEY_LENGTH) {\n            throw new Error(\"ChaCha20Poly1305 needs 32-byte key\");\n        }\n        // Copy key.\n        this._key = new Uint8Array(key);\n    }\n\n    /**\n     * Encrypts and authenticates plaintext, authenticates associated data,\n     * and returns sealed ciphertext, which includes authentication tag.\n     *\n     * RFC7539 specifies 12 bytes for nonce. It may be this 12-byte nonce\n     * (\"IV\"), or full 16-byte counter (called \"32-bit fixed-common part\")\n     * and nonce.\n     *\n     * If dst is given (it must be the size of plaintext + the size of tag\n     * length) the result will be put into it. Dst and plaintext must not\n     * overlap.\n     */\n    seal(nonce: Uint8Array, plaintext: Uint8Array, associatedData?: Uint8Array,\n        dst?: Uint8Array): Uint8Array {\n        if (nonce.length > 16) {\n            throw new Error(\"ChaCha20Poly1305: incorrect nonce length\");\n        }\n\n        // Allocate space for counter, and set nonce as last bytes of it.\n        const counter = new Uint8Array(16);\n        counter.set(nonce, counter.length - nonce.length);\n\n        // Generate authentication key by taking first 32-bytes of stream.\n        // We pass full counter, which has 12-byte nonce and 4-byte block counter,\n        // and it will get incremented after generating the block, which is\n        // exactly what we need: we only use the first 32 bytes of 64-byte\n        // ChaCha block and discard the next 32 bytes.\n        const authKey = new Uint8Array(32);\n        stream(this._key, counter, authKey, 4);\n\n        // Allocate space for sealed ciphertext.\n        const resultLength = plaintext.length + this.tagLength;\n        let result;\n        if (dst) {\n            if (dst.length !== resultLength) {\n                throw new Error(\"ChaCha20Poly1305: incorrect destination length\");\n            }\n            result = dst;\n        } else {\n            result = new Uint8Array(resultLength);\n        }\n\n        // Encrypt plaintext.\n        streamXOR(this._key, counter, plaintext, result, 4);\n\n        // Authenticate.\n        // XXX: can \"simplify\" here: pass full result (which is already padded\n        // due to zeroes prepared for tag), and ciphertext length instead of\n        // subarray of result.\n        this._authenticate(result.subarray(result.length - this.tagLength, result.length),\n            authKey, result.subarray(0, result.length - this.tagLength), associatedData);\n\n        // Cleanup.\n        wipe(counter);\n\n        return result;\n    }\n\n    /**\n     * Authenticates sealed ciphertext (which includes authentication tag) and\n     * associated data, decrypts ciphertext and returns decrypted plaintext.\n     *\n     * RFC7539 specifies 12 bytes for nonce. It may be this 12-byte nonce\n     * (\"IV\"), or full 16-byte counter (called \"32-bit fixed-common part\")\n     * and nonce.\n     *\n     * If authentication fails, it returns null.\n     *\n     * If dst is given (it must be of ciphertext length minus tag length),\n     * the result will be put into it. Dst and plaintext must not overlap.\n     */\n    open(nonce: Uint8Array, sealed: Uint8Array, associatedData?: Uint8Array,\n        dst?: Uint8Array): Uint8Array | null {\n        if (nonce.length > 16) {\n            throw new Error(\"ChaCha20Poly1305: incorrect nonce length\");\n        }\n\n        // Sealed ciphertext should at least contain tag.\n        if (sealed.length < this.tagLength) {\n            // TODO(dchest): should we throw here instead?\n            return null;\n        }\n\n        // Allocate space for counter, and set nonce as last bytes of it.\n        const counter = new Uint8Array(16);\n        counter.set(nonce, counter.length - nonce.length);\n\n        // Generate authentication key by taking first 32-bytes of stream.\n        const authKey = new Uint8Array(32);\n        stream(this._key, counter, authKey, 4);\n\n        // Authenticate.\n        // XXX: can simplify and avoid allocation: since authenticate()\n        // already allocates tag (from Poly1305.digest(), it can return)\n        // it instead of copying to calculatedTag. But then in seal()\n        // we'll need to copy it.\n        const calculatedTag = new Uint8Array(this.tagLength);\n        this._authenticate(calculatedTag, authKey,\n            sealed.subarray(0, sealed.length - this.tagLength), associatedData);\n\n        // Constant-time compare tags and return null if they differ.\n        if (!equal(calculatedTag,\n            sealed.subarray(sealed.length - this.tagLength, sealed.length))) {\n            return null;\n        }\n\n        // Allocate space for decrypted plaintext.\n        const resultLength = sealed.length - this.tagLength;\n        let result;\n        if (dst) {\n            if (dst.length !== resultLength) {\n                throw new Error(\"ChaCha20Poly1305: incorrect destination length\");\n            }\n            result = dst;\n        } else {\n            result = new Uint8Array(resultLength);\n        }\n\n        // Decrypt.\n        streamXOR(this._key, counter,\n            sealed.subarray(0, sealed.length - this.tagLength), result, 4);\n\n        // Cleanup.\n        wipe(counter);\n\n        return result;\n    }\n\n    clean(): this {\n        wipe(this._key);\n        return this;\n    }\n\n    private _authenticate(tagOut: Uint8Array, authKey: Uint8Array,\n        ciphertext: Uint8Array, associatedData?: Uint8Array) {\n\n        // Initialize Poly1305 with authKey.\n        const h = new Poly1305(authKey);\n\n        // Authenticate padded associated data.\n        if (associatedData) {\n            h.update(associatedData);\n            if (associatedData.length % 16 > 0) {\n                h.update(ZEROS.subarray(associatedData.length % 16));\n            }\n        }\n\n        // Authenticate padded ciphertext.\n        h.update(ciphertext);\n        if (ciphertext.length % 16 > 0) {\n            h.update(ZEROS.subarray(ciphertext.length % 16));\n        }\n\n        // Authenticate length of associated data.\n        // XXX: can avoid allocation here?\n        const length = new Uint8Array(8);\n        if (associatedData) {\n            writeUint64LE(associatedData.length, length);\n        }\n        h.update(length);\n\n        // Authenticate length of ciphertext.\n        writeUint64LE(ciphertext.length, length);\n        h.update(length);\n\n        // Get tag and copy it into tagOut.\n        const tag = h.digest();\n        for (let i = 0; i < tag.length; i++) {\n            tagOut[i] = tag[i];\n        }\n\n        // Cleanup.\n        h.clean();\n        wipe(tag);\n        wipe(length);\n    }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1539, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1543, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@stablelib/hash/hash.ts"],"sourcesContent":["// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\n\n/**\n * Package hash provides interface for hash functions.\n */\n\n/**\n * Hash interface describes properties of\n * cryptographic hash functions.\n */\nexport interface Hash {\n    readonly digestLength: number;\n    readonly blockSize: number;\n    update(data: Uint8Array): this;\n    reset(): this;\n    finish(out: Uint8Array): this;\n    digest(): Uint8Array;\n    clean(): void;\n}\n\nexport interface SerializableHash extends Hash {\n    saveState(): any;\n    restoreState(savedState: any): this;\n    cleanSavedState(savedState: any): void;\n}\n\nexport function isSerializableHash(h: Hash): h is SerializableHash {\n    return (\n        typeof (h as SerializableHash).saveState !== \"undefined\" &&\n        typeof (h as SerializableHash).restoreState !== \"undefined\" &&\n        typeof (h as SerializableHash).cleanSavedState !== \"undefined\"\n    );\n}\n\n// TODO(dchest): figure out the standardized interface for XOF such as\n// SHAKE and BLAKE2X.\n"],"names":[],"mappings":";AAAA,sCAAsC;AACtC,6CAA6C;;;;AA0B7C,SAAgB,mBAAmB,CAAO;IACtC,OACI,OAAQ,EAAuB,SAAS,KAAK,eAC7C,OAAQ,EAAuB,YAAY,KAAK,eAChD,OAAQ,EAAuB,eAAe,KAAK;AAE3D;AANA,QAAA,kBAAA,GAAA,oBAQA,sEAAsE;CACtE,qBAAqB"}},
    {"offset": {"line": 1555, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1559, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@stablelib/hmac/hmac.ts"],"sourcesContent":["// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\n\n/**\n * Package hmac implements HMAC algorithm.\n */\n\nimport { Hash, SerializableHash, isSerializableHash } from \"@stablelib/hash\";\nimport { equal as constantTimeEqual } from \"@stablelib/constant-time\";\nimport { wipe } from \"@stablelib/wipe\";\n\n/**\n *  HMAC implements hash-based message authentication algorithm.\n */\nexport class HMAC implements SerializableHash {\n    readonly blockSize: number;\n    readonly digestLength: number;\n\n    private _inner: Hash; // inner hash\n    private _outer: Hash; // outer hash\n\n    private _finished = false; // true if HMAC was finalized\n\n    // Copies of hash states after keying.\n    // Need for quick reset without hashing the key again.\n    private _innerKeyedState: any | undefined;\n    private _outerKeyedState: any | undefined;\n\n    /**\n     * Constructs a new HMAC with the given Hash and secret key.\n     */\n    constructor(hash: new () => Hash | SerializableHash, key: Uint8Array) {\n        // Initialize inner and outer hashes.\n        this._inner = new hash();\n        this._outer = new hash();\n\n        // Set block and digest sizes for this HMAC\n        // instance to values from the hash.\n        this.blockSize = this._outer.blockSize;\n        this.digestLength = this._outer.digestLength;\n\n        // Pad temporary stores a key (or its hash) padded with zeroes.\n        const pad = new Uint8Array(this.blockSize);\n\n        if (key.length > this.blockSize) {\n            // If key is bigger than hash block size, it must be\n            // hashed and this hash is used as a key instead.\n            this._inner.update(key).finish(pad).clean();\n        } else {\n            // Otherwise, copy the key into pad.\n            pad.set(key);\n        }\n\n        // Now two different keys are derived from padded key\n        // by xoring a different byte value to each.\n\n        // To make inner hash key, xor byte 0x36 into pad.\n        for (let i = 0; i < pad.length; i++) {\n            pad[i] ^= 0x36;\n        }\n        // Update inner hash with the result.\n        this._inner.update(pad);\n\n        // To make outer hash key, xor byte 0x5c into pad.\n        // But since we already xored 0x36 there, we must\n        // first undo this by xoring it again.\n        for (let i = 0; i < pad.length; i++) {\n            pad[i] ^= 0x36 ^ 0x5c;\n        }\n        // Update outer hash with the result.\n        this._outer.update(pad);\n\n        // Save states of both hashes, so that we can quickly restore\n        // them later in reset() without the need to remember the actual\n        // key and perform this initialization again.\n        if (isSerializableHash(this._inner) && isSerializableHash(this._outer)) {\n            this._innerKeyedState = this._inner.saveState();\n            this._outerKeyedState = this._outer.saveState();\n        }\n\n        // Clean pad.\n        wipe(pad);\n    }\n\n    /**\n     * Returns HMAC state to the state initialized with key\n     * to make it possible to run HMAC over the other data with the same\n     * key without creating a new instance.\n     */\n    reset(): this {\n        if (!isSerializableHash(this._inner) || !isSerializableHash(this._outer)) {\n            throw new Error(\"hmac: can't reset() because hash doesn't implement restoreState()\");\n        }\n        // Restore keyed states of inner and outer hashes.\n        this._inner.restoreState(this._innerKeyedState);\n        this._outer.restoreState(this._outerKeyedState);\n        this._finished = false;\n        return this;\n    }\n\n    /**\n     * Cleans HMAC state.\n     */\n    clean() {\n        if (isSerializableHash(this._inner)) {\n            this._inner.cleanSavedState(this._innerKeyedState);\n        }\n        if (isSerializableHash(this._outer)) {\n            this._outer.cleanSavedState(this._outerKeyedState);\n        }\n        this._inner.clean();\n        this._outer.clean();\n    }\n\n    /**\n     * Updates state with provided data.\n     */\n    update(data: Uint8Array): this {\n        this._inner.update(data);\n        return this;\n    }\n\n    /**\n     * Finalizes HMAC and puts the result in out.\n     */\n    finish(out: Uint8Array): this {\n        if (this._finished) {\n            // If HMAC was finalized, outer hash is also finalized,\n            // so it produces the same digest it produced when it\n            // was finalized.\n            this._outer.finish(out);\n            return this;\n        }\n\n        // Finalize inner hash and store the result temporarily.\n        this._inner.finish(out);\n\n        // Update outer hash with digest of inner hash and and finalize it.\n        this._outer.update(out.subarray(0, this.digestLength)).finish(out);\n        this._finished = true;\n\n        return this;\n    }\n\n    /**\n     * Returns the computed message authentication code.\n     */\n    digest(): Uint8Array {\n        const out = new Uint8Array(this.digestLength);\n        this.finish(out);\n        return out;\n    }\n\n    /**\n     * Saves HMAC state.\n     * This function is needed for PBKDF2 optimization.\n     */\n    saveState(): any {\n        if (!isSerializableHash(this._inner)) {\n            throw new Error(\"hmac: can't saveState() because hash doesn't implement it\");\n        }\n        return this._inner.saveState();\n    }\n\n    restoreState(savedState: any): this {\n        if (!isSerializableHash(this._inner) || !isSerializableHash(this._outer)) {\n            throw new Error(\"hmac: can't restoreState() because hash doesn't implement it\");\n        }\n        this._inner.restoreState(savedState);\n        this._outer.restoreState(this._outerKeyedState);\n        this._finished = false;\n        return this;\n    }\n\n    cleanSavedState(savedState: any) {\n        if (!isSerializableHash(this._inner)) {\n            throw new Error(\"hmac: can't cleanSavedState() because hash doesn't implement it\");\n        }\n        this._inner.cleanSavedState(savedState);\n    }\n}\n\n/**\n * Returns HMAC using the given hash constructor for the key over data.\n */\nexport function hmac(hash: new () => Hash, key: Uint8Array, data: Uint8Array): Uint8Array {\n    const h = new HMAC(hash, key);\n    h.update(data);\n    const digest = h.digest();\n    h.clean();\n    return digest;\n}\n\n/**\n * Returns true if two HMAC digests are equal.\n * Uses constant-time comparison to avoid leaking timing information.\n *\n * Example:\n *\n *    const receivedDigest = ...\n *    const realDigest = hmac(SHA256, key, data);\n *    if (!equal(receivedDigest, realDigest)) {\n *        throw new Error(\"Authentication error\");\n *    }\n */\nexport const equal = constantTimeEqual;\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1725, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1729, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@stablelib/hkdf/hkdf.ts"],"sourcesContent":["// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\n\n/**\n * Package hkdf implements HKDF key derivation function.\n */\n\nimport { Hash } from \"@stablelib/hash\";\nimport { HMAC, hmac } from \"@stablelib/hmac\";\nimport { wipe } from \"@stablelib/wipe\";\n\n/**\n * HMAC-based Extract-and-Expand Key Derivation Function.\n *\n * Implements HKDF from RFC5869.\n *\n * Expands the given master key with salt and info into\n * a limited stream of key material.\n */\nexport class HKDF {\n    private _hmac: HMAC;\n    private _buffer: Uint8Array;\n    private _bufpos: number;\n    private _counter = new Uint8Array(1); // starts with zero\n    private _hash: new () => Hash;\n    private _info?: Uint8Array;\n\n    /**\n     * Create a new HKDF instance for the given hash function\n     * with the master key, optional salt, and info.\n     *\n     * - Master key is a high-entropy secret key (not a password).\n     * - Salt is a non-secret random value.\n     * - Info is application- and/or context-specific information.\n     */\n    constructor(hash: new () => Hash,\n        key: Uint8Array,\n        salt = new Uint8Array(0),\n        info?: Uint8Array) {\n\n        this._hash = hash;\n        this._info = info;\n\n        // HKDF-Extract uses salt as HMAC key, and key as data.\n        const okm = hmac(this._hash, salt, key);\n\n        // Initialize HMAC for expanding with extracted key.\n        this._hmac = new HMAC(hash, okm);\n\n        // Allocate buffer.\n        this._buffer = new Uint8Array(this._hmac.digestLength);\n        this._bufpos = this._buffer.length;\n    }\n\n    // Fill buffer with new block of HKDF-Extract output.\n    private _fillBuffer(): void {\n        // Increment counter.\n        this._counter[0]++;\n\n        const ctr = this._counter[0];\n\n        // Check if counter overflowed.\n        if (ctr === 0) {\n            throw new Error(\"hkdf: cannot expand more\");\n        }\n\n        // Prepare HMAC instance for new data with old key.\n        this._hmac.reset();\n\n        // Hash in previous output if it was generated\n        // (i.e. counter is greater than 1).\n        if (ctr > 1) {\n            this._hmac.update(this._buffer);\n        }\n\n        // Hash in info if it exists.\n        if (this._info) {\n            this._hmac.update(this._info);\n        }\n\n        // Hash in the counter.\n        this._hmac.update(this._counter);\n\n        // Output result to buffer and clean HMAC instance.\n        this._hmac.finish(this._buffer);\n\n        // Reset buffer position.\n        this._bufpos = 0;\n    }\n\n    /**\n     * Expand returns next key material of the given length.\n     *\n     * It throws if expansion limit is reached (which is\n     * 254 digests of the underlying HMAC function).\n     */\n    expand(length: number): Uint8Array {\n        const out = new Uint8Array(length);\n        for (let i = 0; i < out.length; i++) {\n            if (this._bufpos === this._buffer.length) {\n                this._fillBuffer();\n            }\n            out[i] = this._buffer[this._bufpos++];\n        }\n        return out;\n    }\n\n    clean(): void {\n        this._hmac.clean();\n        wipe(this._buffer);\n        wipe(this._counter);\n        this._bufpos = 0;\n    }\n}\n\n// TODO(dchest): maybe implement deriveKey?\n"],"names":[],"mappings":";AAAA,sCAAsC;AACtC,6CAA6C;;;;AAO7C,IAAA;AACA,IAAA;AAEA;;;;;;;IAQA,IAAA,OAAA;IAQI;;;;;;;QAQA,SAAA,KAAY,IAAoB,EAC5B,GAAe,EACf,IAAwB,EACxB,IAAiB;QADjB,IAAA,SAAA,KAAA,GAAA;YAAA,OAAA,IAAW,WAAW;QAAE;QAdpB,IAAA,CAAA,QAAQ,GAAG,IAAI,WAAW,IAAI,mBAAmB;QAiBrD,IAAI,CAAC,KAAK,GAAG;QACb,IAAI,CAAC,KAAK,GAAG;QAEb,uDAAuD;QACvD,IAAM,MAAM,OAAA,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,MAAM;QAEnC,oDAAoD;QACpD,IAAI,CAAC,KAAK,GAAG,IAAI,OAAA,IAAI,CAAC,MAAM;QAE5B,mBAAmB;QACnB,IAAI,CAAC,OAAO,GAAG,IAAI,WAAW,IAAI,CAAC,KAAK,CAAC,YAAY;QACrD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM;IACtC;IAEA,qDAAqD;IAC7C,KAAA,SAAA,CAAA,WAAW,GAAnB;QACI,qBAAqB;QACrB,IAAI,CAAC,QAAQ,CAAC,EAAE;QAEhB,IAAM,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAE;QAE5B,+BAA+B;QAC/B,IAAI,QAAQ,GAAG;YACX,MAAM,IAAI,MAAM;;QAGpB,mDAAmD;QACnD,IAAI,CAAC,KAAK,CAAC,KAAK;QAEhB,8CAA8C;QAC9C,oCAAoC;QACpC,IAAI,MAAM,GAAG;YACT,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO;;QAGlC,6BAA6B;QAC7B,IAAI,IAAI,CAAC,KAAK,EAAE;YACZ,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK;;QAGhC,uBAAuB;QACvB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ;QAE/B,mDAAmD;QACnD,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO;QAE9B,yBAAyB;QACzB,IAAI,CAAC,OAAO,GAAG;IACnB;IAEA;;;;;QAMA,KAAA,SAAA,CAAA,MAAM,GAAN,SAAO,MAAc;QACjB,IAAM,MAAM,IAAI,WAAW;QAC3B,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,MAAM,EAAE,IAAK;YACjC,IAAI,IAAI,CAAC,OAAO,KAAK,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;gBACtC,IAAI,CAAC,WAAW;;YAEpB,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,GAAG;;QAEzC,OAAO;IACX;IAEA,KAAA,SAAA,CAAA,KAAK,GAAL;QACI,IAAI,CAAC,KAAK,CAAC,KAAK;QAChB,OAAA,IAAI,CAAC,IAAI,CAAC,OAAO;QACjB,OAAA,IAAI,CAAC,IAAI,CAAC,QAAQ;QAClB,IAAI,CAAC,OAAO,GAAG;IACnB;IACJ,OAAA;AAAA;AA9Fa,QAAA,IAAA,GAAA,MAgGb,2CAA2C"}},
    {"offset": {"line": 1819, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1823, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@stablelib/random/source/browser.ts"],"sourcesContent":["// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\n\nimport { RandomSource } from \"./\";\n\nconst QUOTA = 65536;\n\nexport class BrowserRandomSource implements RandomSource {\n    isAvailable = false;\n    isInstantiated = false;\n\n    private _crypto?: { getRandomValues: typeof window.crypto.getRandomValues };\n\n    constructor() {\n        const browserCrypto = typeof self !== 'undefined'\n            ? (self.crypto || (self as { msCrypto?: any }).msCrypto) // IE11 has msCrypto\n            : null;\n\n        if (browserCrypto && browserCrypto.getRandomValues !== undefined) {\n            this._crypto = browserCrypto;\n            this.isAvailable = true;\n            this.isInstantiated = true;\n        }\n    }\n\n    randomBytes(length: number): Uint8Array {\n        if (!this.isAvailable || !this._crypto) {\n            throw new Error(\"Browser random byte generator is not available.\");\n        }\n        const out = new Uint8Array(length);\n        for (let i = 0; i < out.length; i += QUOTA) {\n            this._crypto.getRandomValues(out.subarray(i, i + Math.min(out.length - i, QUOTA)));\n        }\n        return out;\n    }\n}\n"],"names":[],"mappings":";AAAA,sCAAsC;AACtC,6CAA6C;;;;;AAI7C,MAAM,QAAQ;AAEd,MAAa;IAMT,aAAA;QALA,IAAA,CAAA,WAAW,GAAG;QACd,IAAA,CAAA,cAAc,GAAG;QAKb,MAAM,gBAAgB,OAAO,SAAS,cAC/B,KAAK,MAAM,IAAK,KAA4B,QAAQ,GACrD;QAEN,IAAI,iBAAiB,cAAc,eAAe,KAAK,WAAW;YAC9D,IAAI,CAAC,OAAO,GAAG;YACf,IAAI,CAAC,WAAW,GAAG;YACnB,IAAI,CAAC,cAAc,GAAG;;IAE9B;IAEA,YAAY,MAAc,EAAA;QACtB,IAAI,CAAC,IAAI,CAAC,WAAW,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YACpC,MAAM,IAAI,MAAM;;QAEpB,MAAM,MAAM,IAAI,WAAW;QAC3B,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,MAAM,EAAE,KAAK,MAAO;YACxC,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,IAAI,QAAQ,CAAC,GAAG,IAAI,KAAK,GAAG,CAAC,IAAI,MAAM,GAAG,GAAG;;QAE9E,OAAO;IACX;;AA3BJ,QAAA,mBAAA,GAAA"}},
    {"offset": {"line": 1854, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1858, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@stablelib/random/source/node.ts"],"sourcesContent":["// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\n\nimport { RandomSource } from \"./\";\nimport { wipe } from \"@stablelib/wipe\";\n\ndeclare function require(name: string): any;\n\nexport class NodeRandomSource implements RandomSource {\n    isAvailable = false;\n    isInstantiated = false;\n\n    private _crypto: { randomBytes(n: number): Uint8Array } | undefined;\n\n    constructor() {\n        if (typeof require !== \"undefined\") {\n            const nodeCrypto = require(\"crypto\");\n            if (nodeCrypto && nodeCrypto.randomBytes) {\n                this._crypto = nodeCrypto;\n                this.isAvailable = true;\n                this.isInstantiated = true;\n            }\n        }\n    }\n\n    randomBytes(length: number): Uint8Array {\n        if (!this.isAvailable || !this._crypto) {\n            throw new Error(\"Node.js random byte generator is not available.\");\n        }\n\n        // Get random bytes (result is Buffer).\n        let buffer = this._crypto.randomBytes(length);\n\n        // Make sure we got the length that we requested.\n        if (buffer.length !== length) {\n            throw new Error(\"NodeRandomSource: got fewer bytes than requested\");\n        }\n\n        // Allocate output array.\n        const out = new Uint8Array(length);\n\n        // Copy bytes from buffer to output.\n        for (let i = 0; i < out.length; i++) {\n            out[i] = buffer[i];\n        }\n\n        // Cleanup.\n        wipe(buffer);\n\n        return out;\n    }\n}\n"],"names":[],"mappings":";AAAA,sCAAsC;AACtC,6CAA6C;;;;;AAG7C,MAAA;AAIA,MAAa;IAMT,aAAA;QALA,IAAA,CAAA,WAAW,GAAG;QACd,IAAA,CAAA,cAAc,GAAG;QAKb,IAAI,OAAO,YAAY,aAAa;YAChC,MAAM;YACN,IAAI,cAAc,WAAW,WAAW,EAAE;gBACtC,IAAI,CAAC,OAAO,GAAG;gBACf,IAAI,CAAC,WAAW,GAAG;gBACnB,IAAI,CAAC,cAAc,GAAG;;;IAGlC;IAEA,YAAY,MAAc,EAAA;QACtB,IAAI,CAAC,IAAI,CAAC,WAAW,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YACpC,MAAM,IAAI,MAAM;;QAGpB,uCAAuC;QACvC,IAAI,SAAS,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC;QAEtC,iDAAiD;QACjD,IAAI,OAAO,MAAM,KAAK,QAAQ;YAC1B,MAAM,IAAI,MAAM;;QAGpB,yBAAyB;QACzB,MAAM,MAAM,IAAI,WAAW;QAE3B,oCAAoC;QACpC,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,MAAM,EAAE,IAAK;YACjC,GAAG,CAAC,EAAE,GAAG,MAAM,CAAC,EAAE;;QAGtB,WAAW;QACX,CAAA,GAAA,OAAA,IAAI,EAAC;QAEL,OAAO;IACX;;AA1CJ,QAAA,gBAAA,GAAA"}},
    {"offset": {"line": 1901, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1905, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@stablelib/random/source/system.ts"],"sourcesContent":["// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\n\nimport { RandomSource } from \"./\";\nimport { BrowserRandomSource } from \"./browser\";\nimport { NodeRandomSource } from \"./node\";\n\nexport class SystemRandomSource implements RandomSource {\n    isAvailable = false;\n    name = \"\";\n    private _source: RandomSource;\n\n    constructor() {\n        // Try browser.\n        this._source = new BrowserRandomSource();\n        if (this._source.isAvailable) {\n            this.isAvailable = true;\n            this.name = \"Browser\";\n            return;\n        }\n\n        // If no browser source, try Node.\n        this._source = new NodeRandomSource();\n        if (this._source.isAvailable) {\n            this.isAvailable = true;\n            this.name = \"Node\";\n            return;\n        }\n\n        // No sources, we're out of options.\n    }\n\n    randomBytes(length: number): Uint8Array {\n        if (!this.isAvailable) {\n            throw new Error(\"System random byte generator is not available.\");\n        }\n        return this._source.randomBytes(length);\n    }\n}\n"],"names":[],"mappings":";AAAA,sCAAsC;AACtC,6CAA6C;;;;;AAG7C,MAAA;AACA,MAAA;AAEA,MAAa;IAKT,aAAA;QAJA,IAAA,CAAA,WAAW,GAAG;QACd,IAAA,CAAA,IAAI,GAAG;QAIH,eAAe;QACf,IAAI,CAAC,OAAO,GAAG,IAAI,UAAA,mBAAmB;QACtC,IAAI,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE;YAC1B,IAAI,CAAC,WAAW,GAAG;YACnB,IAAI,CAAC,IAAI,GAAG;YACZ;;QAGJ,kCAAkC;QAClC,IAAI,CAAC,OAAO,GAAG,IAAI,OAAA,gBAAgB;QACnC,IAAI,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE;YAC1B,IAAI,CAAC,WAAW,GAAG;YACnB,IAAI,CAAC,IAAI,GAAG;YACZ;;IAGJ,oCAAoC;IACxC;IAEA,YAAY,MAAc,EAAA;QACtB,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;YACnB,MAAM,IAAI,MAAM;;QAEpB,OAAO,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC;IACpC;;AA9BJ,QAAA,kBAAA,GAAA"}},
    {"offset": {"line": 1942, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1946, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@stablelib/random/random.ts"],"sourcesContent":["// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\n\n/**\n * Package random provides functions to access system's\n * cryptographically secure random byte generator.\n */\n\nimport { RandomSource } from \"./source\";\nimport { SystemRandomSource } from \"./source/system\";\nimport { readUint32LE } from \"@stablelib/binary\";\nimport { wipe } from \"@stablelib/wipe\";\n\nexport { RandomSource } from \"./source\";\n\nexport const defaultRandomSource = new SystemRandomSource();\n\nexport function randomBytes(length: number, prng: RandomSource = defaultRandomSource): Uint8Array {\n    return prng.randomBytes(length);\n}\n\n/**\n * Returns a uniformly random unsigned 32-bit integer.\n */\nexport function randomUint32(prng: RandomSource = defaultRandomSource): number {\n    // Generate 4-byte random buffer.\n    const buf = randomBytes(4, prng);\n\n    // Convert bytes from buffer into a 32-bit integer.\n    // It's not important which byte order to use, since\n    // the result is random.\n    const result = readUint32LE(buf);\n\n    // Clean the buffer.\n    wipe(buf);\n\n    return result;\n}\n\n/** 62 alphanumeric characters for default charset of randomString() */\nconst ALPHANUMERIC = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n\n/**\n * Returns a uniform random string of the given length\n * with characters from the given charset.\n *\n * Charset must not have more than 256 characters.\n *\n * Default charset generates case-sensitive alphanumeric\n * strings (0-9, A-Z, a-z).\n */\nexport function randomString(\n    length: number,\n    charset = ALPHANUMERIC,\n    prng: RandomSource = defaultRandomSource\n): string {\n    if (charset.length < 2) {\n        throw new Error(\"randomString charset is too short\");\n    }\n    if (charset.length > 256) {\n        throw new Error(\"randomString charset is too long\");\n    }\n    let out = '';\n    const charsLen = charset.length;\n    const maxByte = 256 - (256 % charsLen);\n    while (length > 0) {\n        const buf = randomBytes(Math.ceil(length * 256 / maxByte), prng);\n        for (let i = 0; i < buf.length && length > 0; i++) {\n            const randomByte = buf[i];\n            if (randomByte < maxByte) {\n                out += charset.charAt(randomByte % charsLen);\n                length--;\n            }\n        }\n        wipe(buf);\n    }\n    return out;\n}\n\n/**\n * Returns uniform random string containing at least the given\n * number of bits of entropy.\n *\n * For example, randomStringForEntropy(128) will return a 22-character\n * alphanumeric string, while randomStringForEntropy(128, \"0123456789\")\n * will return a 39-character numeric string, both will contain at\n * least 128 bits of entropy.\n *\n * Default charset generates case-sensitive alphanumeric\n * strings (0-9, A-Z, a-z).\n */\nexport function randomStringForEntropy(\n    bits: number,\n    charset = ALPHANUMERIC,\n    prng: RandomSource = defaultRandomSource\n): string {\n    const length = Math.ceil(bits / (Math.log(charset.length) / Math.LN2));\n    return randomString(length, charset, prng);\n}\n"],"names":[],"mappings":";AAAA,sCAAsC;AACtC,6CAA6C;;;;;AAQ7C,MAAA;AACA,MAAA;AACA,MAAA;AAIa,QAAA,mBAAmB,GAAG,IAAI,SAAA,kBAAkB;AAEzD,SAAgB,YAAY,MAAc,EAAE,OAAqB,QAAA,mBAAmB;IAChF,OAAO,KAAK,WAAW,CAAC;AAC5B;AAFA,QAAA,WAAA,GAAA;AAIA;;IAGA,SAAgB,aAAa,OAAqB,QAAA,mBAAmB;IACjE,iCAAiC;IACjC,MAAM,MAAM,YAAY,GAAG;IAE3B,mDAAmD;IACnD,oDAAoD;IACpD,wBAAwB;IACxB,MAAM,SAAS,CAAA,GAAA,SAAA,YAAY,EAAC;IAE5B,oBAAoB;IACpB,CAAA,GAAA,OAAA,IAAI,EAAC;IAEL,OAAO;AACX;AAbA,QAAA,YAAA,GAAA;AAeA,qEAAA,GACA,MAAM,eAAe;AAErB;;;;;;;;IASA,SAAgB,aACZ,MAAc,EACd,UAAU,YAAY,EACtB,OAAqB,QAAA,mBAAmB;IAExC,IAAI,QAAQ,MAAM,GAAG,GAAG;QACpB,MAAM,IAAI,MAAM;;IAEpB,IAAI,QAAQ,MAAM,GAAG,KAAK;QACtB,MAAM,IAAI,MAAM;;IAEpB,IAAI,MAAM;IACV,MAAM,WAAW,QAAQ,MAAM;IAC/B,MAAM,UAAU,MAAO,MAAM;IAC7B,MAAO,SAAS,EAAG;QACf,MAAM,MAAM,YAAY,KAAK,IAAI,CAAC,SAAS,MAAM,UAAU;QAC3D,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,MAAM,IAAI,SAAS,GAAG,IAAK;YAC/C,MAAM,aAAa,GAAG,CAAC,EAAE;YACzB,IAAI,aAAa,SAAS;gBACtB,OAAO,QAAQ,MAAM,CAAC,aAAa;gBACnC;;;QAGR,CAAA,GAAA,OAAA,IAAI,EAAC;;IAET,OAAO;AACX;AA1BA,QAAA,YAAA,GAAA;AA4BA;;;;;;;;;;;IAYA,SAAgB,uBACZ,IAAY,EACZ,UAAU,YAAY,EACtB,OAAqB,QAAA,mBAAmB;IAExC,MAAM,SAAS,KAAK,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,CAAC,QAAQ,MAAM,IAAI,KAAK,GAAG;IACpE,OAAO,aAAa,QAAQ,SAAS;AACzC;AAPA,QAAA,sBAAA,GAAA"}},
    {"offset": {"line": 2024, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2028, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@stablelib/sha256/sha256.ts"],"sourcesContent":["// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\n\n/**\n * Package sha256 implements SHA-2-256 cryptographic hash function.\n */\n\nimport { SerializableHash } from \"@stablelib/hash\";\nimport { readUint32BE, writeUint32BE } from \"@stablelib/binary\";\nimport { wipe } from \"@stablelib/wipe\";\n\nexport const DIGEST_LENGTH = 32;\nexport const BLOCK_SIZE = 64;\n\n/**\n * SHA2-256 cryptographic hash algorithm.\n */\nexport class SHA256 implements SerializableHash {\n    /** Length of hash output */\n    readonly digestLength: number = DIGEST_LENGTH;\n\n    /** Block size */\n    readonly blockSize: number = BLOCK_SIZE;\n\n    // Note: Int32Array is used instead of Uint32Array for performance reasons.\n    protected _state = new Int32Array(8); // hash state\n    private _temp = new Int32Array(64); // temporary state\n    private _buffer = new Uint8Array(128); // buffer for data to hash\n    private _bufferLength = 0; // number of bytes in buffer\n    private _bytesHashed = 0; // number of total bytes hashed\n    private _finished = false; // indicates whether the hash was finalized\n\n    constructor() {\n        this.reset();\n    }\n\n    protected _initState() {\n        this._state[0] = 0x6a09e667;\n        this._state[1] = 0xbb67ae85;\n        this._state[2] = 0x3c6ef372;\n        this._state[3] = 0xa54ff53a;\n        this._state[4] = 0x510e527f;\n        this._state[5] = 0x9b05688c;\n        this._state[6] = 0x1f83d9ab;\n        this._state[7] = 0x5be0cd19;\n    }\n\n    /**\n     * Resets hash state making it possible\n     * to re-use this instance to hash other data.\n     */\n    reset(): this {\n        this._initState();\n        this._bufferLength = 0;\n        this._bytesHashed = 0;\n        this._finished = false;\n        return this;\n    }\n\n    /**\n     * Cleans internal buffers and resets hash state.\n     */\n    clean() {\n        wipe(this._buffer);\n        wipe(this._temp);\n        this.reset();\n    }\n\n    /**\n     * Updates hash state with the given data.\n     *\n     * Throws error when trying to update already finalized hash:\n     * instance must be reset to update it again.\n     */\n    update(data: Uint8Array, dataLength: number = data.length): this {\n        if (this._finished) {\n            throw new Error(\"SHA256: can't update because hash was finished.\");\n        }\n        let dataPos = 0;\n        this._bytesHashed += dataLength;\n        if (this._bufferLength > 0) {\n            while (this._bufferLength < this.blockSize && dataLength > 0) {\n                this._buffer[this._bufferLength++] = data[dataPos++];\n                dataLength--;\n            }\n            if (this._bufferLength === this.blockSize) {\n                hashBlocks(this._temp, this._state, this._buffer, 0, this.blockSize);\n                this._bufferLength = 0;\n            }\n        }\n        if (dataLength >= this.blockSize) {\n            dataPos = hashBlocks(this._temp, this._state, data, dataPos, dataLength);\n            dataLength %= this.blockSize;\n        }\n        while (dataLength > 0) {\n            this._buffer[this._bufferLength++] = data[dataPos++];\n            dataLength--;\n        }\n        return this;\n    }\n\n    /**\n     * Finalizes hash state and puts hash into out.\n     * If hash was already finalized, puts the same value.\n     */\n    finish(out: Uint8Array): this {\n        if (!this._finished) {\n            const bytesHashed = this._bytesHashed;\n            const left = this._bufferLength;\n            const bitLenHi = (bytesHashed / 0x20000000) | 0;\n            const bitLenLo = bytesHashed << 3;\n            const padLength = (bytesHashed % 64 < 56) ? 64 : 128;\n\n            this._buffer[left] = 0x80;\n            for (let i = left + 1; i < padLength - 8; i++) {\n                this._buffer[i] = 0;\n            }\n            writeUint32BE(bitLenHi, this._buffer, padLength - 8);\n            writeUint32BE(bitLenLo, this._buffer, padLength - 4);\n\n            hashBlocks(this._temp, this._state, this._buffer, 0, padLength);\n\n            this._finished = true;\n        }\n\n        for (let i = 0; i < this.digestLength / 4; i++) {\n            writeUint32BE(this._state[i], out, i * 4);\n        }\n\n        return this;\n    }\n\n    /**\n     * Returns the final hash digest.\n     */\n    digest(): Uint8Array {\n        const out = new Uint8Array(this.digestLength);\n        this.finish(out);\n        return out;\n    }\n\n    /**\n     * Function useful for HMAC/PBKDF2 optimization.\n     * Returns hash state to be used with restoreState().\n     * Only chain value is saved, not buffers or other\n     * state variables.\n     */\n    saveState(): SavedState {\n        if (this._finished) {\n            throw new Error(\"SHA256: cannot save finished state\");\n        }\n        return {\n            state: new Int32Array(this._state),\n            buffer: this._bufferLength > 0 ? new Uint8Array(this._buffer) : undefined,\n            bufferLength: this._bufferLength,\n            bytesHashed: this._bytesHashed\n        };\n    }\n\n    /**\n     * Function useful for HMAC/PBKDF2 optimization.\n     * Restores state saved by saveState() and sets bytesHashed\n     * to the given value.\n     */\n    restoreState(savedState: SavedState): this {\n        this._state.set(savedState.state);\n        this._bufferLength = savedState.bufferLength;\n        if (savedState.buffer) {\n            this._buffer.set(savedState.buffer);\n        }\n        this._bytesHashed = savedState.bytesHashed;\n        this._finished = false;\n        return this;\n    }\n\n    /**\n     * Cleans state returned by saveState().\n     */\n    cleanSavedState(savedState: SavedState) {\n        wipe(savedState.state);\n        if (savedState.buffer) {\n            wipe(savedState.buffer);\n        }\n        savedState.bufferLength = 0;\n        savedState.bytesHashed = 0;\n    }\n}\n\nexport type SavedState = {\n    state: Int32Array;\n    buffer: Uint8Array | undefined;\n    bufferLength: number;\n    bytesHashed: number;\n};\n\n// Constants\nconst K = new Int32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b,\n    0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01,\n    0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7,\n    0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n    0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152,\n    0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147,\n    0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc,\n    0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819,\n    0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08,\n    0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f,\n    0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n\nfunction hashBlocks(w: Int32Array, v: Int32Array, p: Uint8Array, pos: number, len: number): number {\n    while (len >= 64) {\n        let a = v[0];\n        let b = v[1];\n        let c = v[2];\n        let d = v[3];\n        let e = v[4];\n        let f = v[5];\n        let g = v[6];\n        let h = v[7];\n\n        for (let i = 0; i < 16; i++) {\n            let j = pos + i * 4;\n            w[i] = readUint32BE(p, j);\n        }\n\n        for (let i = 16; i < 64; i++) {\n            let u = w[i - 2];\n            let t1 = (u >>> 17 | u << (32 - 17)) ^ (u >>> 19 | u << (32 - 19)) ^ (u >>> 10);\n\n            u = w[i - 15];\n            let t2 = (u >>> 7 | u << (32 - 7)) ^ (u >>> 18 | u << (32 - 18)) ^ (u >>> 3);\n\n            w[i] = (t1 + w[i - 7] | 0) + (t2 + w[i - 16] | 0);\n        }\n\n        for (let i = 0; i < 64; i++) {\n            let t1 = (((((e >>> 6 | e << (32 - 6)) ^ (e >>> 11 | e << (32 - 11)) ^\n                (e >>> 25 | e << (32 - 25))) + ((e & f) ^ (~e & g))) | 0) +\n                ((h + ((K[i] + w[i]) | 0)) | 0)) | 0;\n\n            let t2 = (((a >>> 2 | a << (32 - 2)) ^ (a >>> 13 | a << (32 - 13)) ^\n                (a >>> 22 | a << (32 - 22))) + ((a & b) ^ (a & c) ^ (b & c))) | 0;\n\n            h = g;\n            g = f;\n            f = e;\n            e = (d + t1) | 0;\n            d = c;\n            c = b;\n            b = a;\n            a = (t1 + t2) | 0;\n        }\n\n        v[0] += a;\n        v[1] += b;\n        v[2] += c;\n        v[3] += d;\n        v[4] += e;\n        v[5] += f;\n        v[6] += g;\n        v[7] += h;\n\n        pos += 64;\n        len -= 64;\n    }\n    return pos;\n}\n\nexport function hash(data: Uint8Array): Uint8Array {\n    const h = new SHA256();\n    h.update(data);\n    const digest = h.digest();\n    h.clean();\n    return digest;\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 2309, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2313, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@stablelib/x25519/x25519.ts"],"sourcesContent":["// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\n\n/**\n * Package x25519 implements X25519 key agreement.\n */\n\nimport { randomBytes, RandomSource } from \"@stablelib/random\";\nimport { wipe } from \"@stablelib/wipe\";\n\nexport const PUBLIC_KEY_LENGTH = 32;\nexport const SECRET_KEY_LENGTH = 32;\nexport const SHARED_KEY_LENGTH = 32;\n\n// TODO(dchest): some functions are copies of ../sign/ed25519.\n// Find a way to combine them without opening up to public.\n\n// Ported from TweetNaCl.js, which is ported from TweetNaCl\n// by Dmitry Chestnykh and Devi Mandiri.\n// Public domain.\n// https://tweetnacl.js.org\n\n// TweetNaCl contributors:\n// Daniel J. Bernstein, Bernard van Gastel, Wesley Janssen,\n// Tanja Lange, Peter Schwabe, Sjaak Smetsers.\n// Public domain.\n// https://tweetnacl.cr.yp.to/\n\ntype GF = Float64Array;\n\n// Returns new zero-filled 16-element GF (Float64Array).\n// If passed an array of numbers, prefills the returned\n// array with them.\n//\n// We use Float64Array, because we need 48-bit numbers\n// for this implementation.\nfunction gf(init?: number[]): GF {\n    const r = new Float64Array(16);\n    if (init) {\n        for (let i = 0; i < init.length; i++) {\n            r[i] = init[i];\n        }\n    }\n    return r;\n}\n\n// Base point.\nconst _9 = new Uint8Array(32); _9[0] = 9;\n\nconst _121665 = gf([0xdb41, 1]);\n\nfunction car25519(o: GF) {\n    let c = 1;\n    for (let i = 0; i < 16; i++) {\n        let v = o[i] + c + 65535;\n        c = Math.floor(v / 65536);\n        o[i] = v - c * 65536;\n    }\n    o[0] += c - 1 + 37 * (c - 1);\n}\n\nfunction sel25519(p: GF, q: GF, b: number) {\n    const c = ~(b - 1);\n    for (let i = 0; i < 16; i++) {\n        const t = c & (p[i] ^ q[i]);\n        p[i] ^= t;\n        q[i] ^= t;\n    }\n}\n\nfunction pack25519(o: Uint8Array, n: GF) {\n    const m = gf();\n    const t = gf();\n    for (let i = 0; i < 16; i++) {\n        t[i] = n[i];\n    }\n    car25519(t);\n    car25519(t);\n    car25519(t);\n    for (let j = 0; j < 2; j++) {\n        m[0] = t[0] - 0xffed;\n        for (let i = 1; i < 15; i++) {\n            m[i] = t[i] - 0xffff - ((m[i - 1] >> 16) & 1);\n            m[i - 1] &= 0xffff;\n        }\n        m[15] = t[15] - 0x7fff - ((m[14] >> 16) & 1);\n        const b = (m[15] >> 16) & 1;\n        m[14] &= 0xffff;\n        sel25519(t, m, 1 - b);\n    }\n    for (let i = 0; i < 16; i++) {\n        o[2 * i] = t[i] & 0xff;\n        o[2 * i + 1] = t[i] >> 8;\n    }\n}\n\nfunction unpack25519(o: GF, n: Uint8Array) {\n    for (let i = 0; i < 16; i++) {\n        o[i] = n[2 * i] + (n[2 * i + 1] << 8);\n    }\n    o[15] &= 0x7fff;\n}\n\nfunction add(o: GF, a: GF, b: GF) {\n    for (let i = 0; i < 16; i++) {\n        o[i] = a[i] + b[i];\n    }\n}\n\nfunction sub(o: GF, a: GF, b: GF) {\n    for (let i = 0; i < 16; i++) {\n        o[i] = a[i] - b[i];\n    }\n}\n\nfunction mul(o: GF, a: GF, b: GF) {\n    let v: number, c: number,\n        t0 = 0, t1 = 0, t2 = 0, t3 = 0, t4 = 0, t5 = 0, t6 = 0, t7 = 0,\n        t8 = 0, t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0,\n        t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0,\n        t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0,\n        b0 = b[0],\n        b1 = b[1],\n        b2 = b[2],\n        b3 = b[3],\n        b4 = b[4],\n        b5 = b[5],\n        b6 = b[6],\n        b7 = b[7],\n        b8 = b[8],\n        b9 = b[9],\n        b10 = b[10],\n        b11 = b[11],\n        b12 = b[12],\n        b13 = b[13],\n        b14 = b[14],\n        b15 = b[15];\n\n    v = a[0];\n    t0 += v * b0;\n    t1 += v * b1;\n    t2 += v * b2;\n    t3 += v * b3;\n    t4 += v * b4;\n    t5 += v * b5;\n    t6 += v * b6;\n    t7 += v * b7;\n    t8 += v * b8;\n    t9 += v * b9;\n    t10 += v * b10;\n    t11 += v * b11;\n    t12 += v * b12;\n    t13 += v * b13;\n    t14 += v * b14;\n    t15 += v * b15;\n    v = a[1];\n    t1 += v * b0;\n    t2 += v * b1;\n    t3 += v * b2;\n    t4 += v * b3;\n    t5 += v * b4;\n    t6 += v * b5;\n    t7 += v * b6;\n    t8 += v * b7;\n    t9 += v * b8;\n    t10 += v * b9;\n    t11 += v * b10;\n    t12 += v * b11;\n    t13 += v * b12;\n    t14 += v * b13;\n    t15 += v * b14;\n    t16 += v * b15;\n    v = a[2];\n    t2 += v * b0;\n    t3 += v * b1;\n    t4 += v * b2;\n    t5 += v * b3;\n    t6 += v * b4;\n    t7 += v * b5;\n    t8 += v * b6;\n    t9 += v * b7;\n    t10 += v * b8;\n    t11 += v * b9;\n    t12 += v * b10;\n    t13 += v * b11;\n    t14 += v * b12;\n    t15 += v * b13;\n    t16 += v * b14;\n    t17 += v * b15;\n    v = a[3];\n    t3 += v * b0;\n    t4 += v * b1;\n    t5 += v * b2;\n    t6 += v * b3;\n    t7 += v * b4;\n    t8 += v * b5;\n    t9 += v * b6;\n    t10 += v * b7;\n    t11 += v * b8;\n    t12 += v * b9;\n    t13 += v * b10;\n    t14 += v * b11;\n    t15 += v * b12;\n    t16 += v * b13;\n    t17 += v * b14;\n    t18 += v * b15;\n    v = a[4];\n    t4 += v * b0;\n    t5 += v * b1;\n    t6 += v * b2;\n    t7 += v * b3;\n    t8 += v * b4;\n    t9 += v * b5;\n    t10 += v * b6;\n    t11 += v * b7;\n    t12 += v * b8;\n    t13 += v * b9;\n    t14 += v * b10;\n    t15 += v * b11;\n    t16 += v * b12;\n    t17 += v * b13;\n    t18 += v * b14;\n    t19 += v * b15;\n    v = a[5];\n    t5 += v * b0;\n    t6 += v * b1;\n    t7 += v * b2;\n    t8 += v * b3;\n    t9 += v * b4;\n    t10 += v * b5;\n    t11 += v * b6;\n    t12 += v * b7;\n    t13 += v * b8;\n    t14 += v * b9;\n    t15 += v * b10;\n    t16 += v * b11;\n    t17 += v * b12;\n    t18 += v * b13;\n    t19 += v * b14;\n    t20 += v * b15;\n    v = a[6];\n    t6 += v * b0;\n    t7 += v * b1;\n    t8 += v * b2;\n    t9 += v * b3;\n    t10 += v * b4;\n    t11 += v * b5;\n    t12 += v * b6;\n    t13 += v * b7;\n    t14 += v * b8;\n    t15 += v * b9;\n    t16 += v * b10;\n    t17 += v * b11;\n    t18 += v * b12;\n    t19 += v * b13;\n    t20 += v * b14;\n    t21 += v * b15;\n    v = a[7];\n    t7 += v * b0;\n    t8 += v * b1;\n    t9 += v * b2;\n    t10 += v * b3;\n    t11 += v * b4;\n    t12 += v * b5;\n    t13 += v * b6;\n    t14 += v * b7;\n    t15 += v * b8;\n    t16 += v * b9;\n    t17 += v * b10;\n    t18 += v * b11;\n    t19 += v * b12;\n    t20 += v * b13;\n    t21 += v * b14;\n    t22 += v * b15;\n    v = a[8];\n    t8 += v * b0;\n    t9 += v * b1;\n    t10 += v * b2;\n    t11 += v * b3;\n    t12 += v * b4;\n    t13 += v * b5;\n    t14 += v * b6;\n    t15 += v * b7;\n    t16 += v * b8;\n    t17 += v * b9;\n    t18 += v * b10;\n    t19 += v * b11;\n    t20 += v * b12;\n    t21 += v * b13;\n    t22 += v * b14;\n    t23 += v * b15;\n    v = a[9];\n    t9 += v * b0;\n    t10 += v * b1;\n    t11 += v * b2;\n    t12 += v * b3;\n    t13 += v * b4;\n    t14 += v * b5;\n    t15 += v * b6;\n    t16 += v * b7;\n    t17 += v * b8;\n    t18 += v * b9;\n    t19 += v * b10;\n    t20 += v * b11;\n    t21 += v * b12;\n    t22 += v * b13;\n    t23 += v * b14;\n    t24 += v * b15;\n    v = a[10];\n    t10 += v * b0;\n    t11 += v * b1;\n    t12 += v * b2;\n    t13 += v * b3;\n    t14 += v * b4;\n    t15 += v * b5;\n    t16 += v * b6;\n    t17 += v * b7;\n    t18 += v * b8;\n    t19 += v * b9;\n    t20 += v * b10;\n    t21 += v * b11;\n    t22 += v * b12;\n    t23 += v * b13;\n    t24 += v * b14;\n    t25 += v * b15;\n    v = a[11];\n    t11 += v * b0;\n    t12 += v * b1;\n    t13 += v * b2;\n    t14 += v * b3;\n    t15 += v * b4;\n    t16 += v * b5;\n    t17 += v * b6;\n    t18 += v * b7;\n    t19 += v * b8;\n    t20 += v * b9;\n    t21 += v * b10;\n    t22 += v * b11;\n    t23 += v * b12;\n    t24 += v * b13;\n    t25 += v * b14;\n    t26 += v * b15;\n    v = a[12];\n    t12 += v * b0;\n    t13 += v * b1;\n    t14 += v * b2;\n    t15 += v * b3;\n    t16 += v * b4;\n    t17 += v * b5;\n    t18 += v * b6;\n    t19 += v * b7;\n    t20 += v * b8;\n    t21 += v * b9;\n    t22 += v * b10;\n    t23 += v * b11;\n    t24 += v * b12;\n    t25 += v * b13;\n    t26 += v * b14;\n    t27 += v * b15;\n    v = a[13];\n    t13 += v * b0;\n    t14 += v * b1;\n    t15 += v * b2;\n    t16 += v * b3;\n    t17 += v * b4;\n    t18 += v * b5;\n    t19 += v * b6;\n    t20 += v * b7;\n    t21 += v * b8;\n    t22 += v * b9;\n    t23 += v * b10;\n    t24 += v * b11;\n    t25 += v * b12;\n    t26 += v * b13;\n    t27 += v * b14;\n    t28 += v * b15;\n    v = a[14];\n    t14 += v * b0;\n    t15 += v * b1;\n    t16 += v * b2;\n    t17 += v * b3;\n    t18 += v * b4;\n    t19 += v * b5;\n    t20 += v * b6;\n    t21 += v * b7;\n    t22 += v * b8;\n    t23 += v * b9;\n    t24 += v * b10;\n    t25 += v * b11;\n    t26 += v * b12;\n    t27 += v * b13;\n    t28 += v * b14;\n    t29 += v * b15;\n    v = a[15];\n    t15 += v * b0;\n    t16 += v * b1;\n    t17 += v * b2;\n    t18 += v * b3;\n    t19 += v * b4;\n    t20 += v * b5;\n    t21 += v * b6;\n    t22 += v * b7;\n    t23 += v * b8;\n    t24 += v * b9;\n    t25 += v * b10;\n    t26 += v * b11;\n    t27 += v * b12;\n    t28 += v * b13;\n    t29 += v * b14;\n    t30 += v * b15;\n\n    t0 += 38 * t16;\n    t1 += 38 * t17;\n    t2 += 38 * t18;\n    t3 += 38 * t19;\n    t4 += 38 * t20;\n    t5 += 38 * t21;\n    t6 += 38 * t22;\n    t7 += 38 * t23;\n    t8 += 38 * t24;\n    t9 += 38 * t25;\n    t10 += 38 * t26;\n    t11 += 38 * t27;\n    t12 += 38 * t28;\n    t13 += 38 * t29;\n    t14 += 38 * t30;\n    // t15 left as is\n\n    // first car\n    c = 1;\n    v = t0 + c + 65535; c = Math.floor(v / 65536); t0 = v - c * 65536;\n    v = t1 + c + 65535; c = Math.floor(v / 65536); t1 = v - c * 65536;\n    v = t2 + c + 65535; c = Math.floor(v / 65536); t2 = v - c * 65536;\n    v = t3 + c + 65535; c = Math.floor(v / 65536); t3 = v - c * 65536;\n    v = t4 + c + 65535; c = Math.floor(v / 65536); t4 = v - c * 65536;\n    v = t5 + c + 65535; c = Math.floor(v / 65536); t5 = v - c * 65536;\n    v = t6 + c + 65535; c = Math.floor(v / 65536); t6 = v - c * 65536;\n    v = t7 + c + 65535; c = Math.floor(v / 65536); t7 = v - c * 65536;\n    v = t8 + c + 65535; c = Math.floor(v / 65536); t8 = v - c * 65536;\n    v = t9 + c + 65535; c = Math.floor(v / 65536); t9 = v - c * 65536;\n    v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;\n    v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;\n    v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;\n    v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;\n    v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;\n    v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;\n    t0 += c - 1 + 37 * (c - 1);\n\n    // second car\n    c = 1;\n    v = t0 + c + 65535; c = Math.floor(v / 65536); t0 = v - c * 65536;\n    v = t1 + c + 65535; c = Math.floor(v / 65536); t1 = v - c * 65536;\n    v = t2 + c + 65535; c = Math.floor(v / 65536); t2 = v - c * 65536;\n    v = t3 + c + 65535; c = Math.floor(v / 65536); t3 = v - c * 65536;\n    v = t4 + c + 65535; c = Math.floor(v / 65536); t4 = v - c * 65536;\n    v = t5 + c + 65535; c = Math.floor(v / 65536); t5 = v - c * 65536;\n    v = t6 + c + 65535; c = Math.floor(v / 65536); t6 = v - c * 65536;\n    v = t7 + c + 65535; c = Math.floor(v / 65536); t7 = v - c * 65536;\n    v = t8 + c + 65535; c = Math.floor(v / 65536); t8 = v - c * 65536;\n    v = t9 + c + 65535; c = Math.floor(v / 65536); t9 = v - c * 65536;\n    v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;\n    v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;\n    v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;\n    v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;\n    v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;\n    v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;\n    t0 += c - 1 + 37 * (c - 1);\n\n    o[0] = t0;\n    o[1] = t1;\n    o[2] = t2;\n    o[3] = t3;\n    o[4] = t4;\n    o[5] = t5;\n    o[6] = t6;\n    o[7] = t7;\n    o[8] = t8;\n    o[9] = t9;\n    o[10] = t10;\n    o[11] = t11;\n    o[12] = t12;\n    o[13] = t13;\n    o[14] = t14;\n    o[15] = t15;\n}\n\nfunction square(o: GF, a: GF) {\n    mul(o, a, a);\n}\n\nfunction inv25519(o: GF, inp: GF) {\n    const c = gf();\n    for (let i = 0; i < 16; i++) {\n        c[i] = inp[i];\n    }\n    for (let i = 253; i >= 0; i--) {\n        square(c, c);\n        if (i !== 2 && i !== 4) {\n            mul(c, c, inp);\n        }\n    }\n    for (let i = 0; i < 16; i++) {\n        o[i] = c[i];\n    }\n}\n\nexport function scalarMult(n: Uint8Array, p: Uint8Array): Uint8Array {\n    const z = new Uint8Array(32);\n    const x = new Float64Array(80);\n    const a = gf(), b = gf(), c = gf(),\n        d = gf(), e = gf(), f = gf();\n\n    for (let i = 0; i < 31; i++) {\n        z[i] = n[i];\n    }\n    z[31] = (n[31] & 127) | 64;\n    z[0] &= 248;\n\n    unpack25519(x, p);\n\n    for (let i = 0; i < 16; i++) {\n        b[i] = x[i];\n    }\n\n    a[0] = d[0] = 1;\n\n    for (let i = 254; i >= 0; --i) {\n        const r = (z[i >>> 3] >>> (i & 7)) & 1;\n        sel25519(a, b, r);\n        sel25519(c, d, r);\n        add(e, a, c);\n        sub(a, a, c);\n        add(c, b, d);\n        sub(b, b, d);\n        square(d, e);\n        square(f, a);\n        mul(a, c, a);\n        mul(c, b, e);\n        add(e, a, c);\n        sub(a, a, c);\n        square(b, a);\n        sub(c, d, f);\n        mul(a, c, _121665);\n        add(a, a, d);\n        mul(c, c, a);\n        mul(a, d, f);\n        mul(d, b, x);\n        square(b, e);\n        sel25519(a, b, r);\n        sel25519(c, d, r);\n    }\n    for (let i = 0; i < 16; i++) {\n        x[i + 16] = a[i];\n        x[i + 32] = c[i];\n        x[i + 48] = b[i];\n        x[i + 64] = d[i];\n    }\n    const x32 = x.subarray(32);\n    const x16 = x.subarray(16);\n    inv25519(x32, x32);\n    mul(x16, x16, x32);\n    const q = new Uint8Array(32);\n    pack25519(q, x16);\n    return q;\n}\n\nexport function scalarMultBase(n: Uint8Array): Uint8Array {\n    return scalarMult(n, _9);\n}\n\nexport interface KeyPair {\n    publicKey: Uint8Array;\n    secretKey: Uint8Array;\n}\n\nexport function generateKeyPairFromSeed(seed: Uint8Array): KeyPair {\n    if (seed.length !== SECRET_KEY_LENGTH) {\n        throw new Error(`x25519: seed must be ${SECRET_KEY_LENGTH} bytes`);\n    }\n    const secretKey = new Uint8Array(seed);\n    const publicKey = scalarMultBase(secretKey);\n    return {\n        publicKey,\n        secretKey\n    };\n}\n\nexport function generateKeyPair(prng?: RandomSource): KeyPair {\n    const seed = randomBytes(32, prng);\n    const result = generateKeyPairFromSeed(seed);\n    wipe(seed);\n    return result;\n}\n\n/**\n * Returns a shared key between our secret key and a peer's public key.\n *\n * Throws an error if the given keys are of wrong length.\n *\n * If rejectZero is true throws if the calculated shared key is all-zero.\n * From RFC 7748:\n *\n * > Protocol designers using Diffie-Hellman over the curves defined in\n * > this document must not assume \"contributory behavior\".  Specially,\n * > contributory behavior means that both parties' private keys\n * > contribute to the resulting shared key.  Since curve25519 and\n * > curve448 have cofactors of 8 and 4 (respectively), an input point of\n * > small order will eliminate any contribution from the other party's\n * > private key.  This situation can be detected by checking for the all-\n * > zero output, which implementations MAY do, as specified in Section 6.\n * > However, a large number of existing implementations do not do this.\n *\n * IMPORTANT: the returned key is a raw result of scalar multiplication.\n * To use it as a key material, hash it with a cryptographic hash function.\n */\nexport function sharedKey(mySecretKey: Uint8Array, theirPublicKey: Uint8Array, rejectZero = false): Uint8Array {\n    if (mySecretKey.length !== PUBLIC_KEY_LENGTH) {\n        throw new Error(\"X25519: incorrect secret key length\");\n    }\n    if (theirPublicKey.length !== PUBLIC_KEY_LENGTH) {\n        throw new Error(\"X25519: incorrect public key length\");\n    }\n\n    const result = scalarMult(mySecretKey, theirPublicKey);\n\n    if (rejectZero) {\n        let zeros = 0;\n        for (let i = 0; i < result.length; i++) {\n            zeros |= result[i];\n        }\n        if (zeros === 0) {\n            throw new Error(\"X25519: invalid shared key\");\n        }\n    }\n\n    return result;\n}\n"],"names":[],"mappings":"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;IACV,MAAM,IAAI;IACV,MAAM,IAAI;IACV,MAAM,IAAI;IACV,MAAM,IAAI;IACV,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,IAAI,CAAC,CAAC,EAAE;IACR,MAAM,IAAI;IACV,MAAM,IAAI;IACV,MAAM,IAAI;IACV,MAAM,IAAI;IACV,MAAM,IAAI;IACV,MAAM,IAAI;IACV,MAAM,IAAI;IACV,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,IAAI,CAAC,CAAC,EAAE;IACR,MAAM,IAAI;IACV,MAAM,IAAI;IACV,MAAM,IAAI;IACV,MAAM,IAAI;IACV,MAAM,IAAI;IACV,MAAM,IAAI;IACV,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,IAAI,CAAC,CAAC,EAAE;IACR,MAAM,IAAI;IACV,MAAM,IAAI;IACV,MAAM,IAAI;IACV,MAAM,IAAI;IACV,MAAM,IAAI;IACV,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,IAAI,CAAC,CAAC,EAAE;IACR,MAAM,IAAI;IACV,MAAM,IAAI;IACV,MAAM,IAAI;IACV,MAAM,IAAI;IACV,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,IAAI,CAAC,CAAC,EAAE;IACR,MAAM,IAAI;IACV,MAAM,IAAI;IACV,MAAM,IAAI;IACV,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,IAAI,CAAC,CAAC,EAAE;IACR,MAAM,IAAI;IACV,MAAM,IAAI;IACV,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,IAAI,CAAC,CAAC,EAAE;IACR,MAAM,IAAI;IACV,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,IAAI,CAAC,CAAC,GAAG;IACT,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,IAAI,CAAC,CAAC,GAAG;IACT,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,IAAI,CAAC,CAAC,GAAG;IACT,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,IAAI,CAAC,CAAC,GAAG;IACT,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,IAAI,CAAC,CAAC,GAAG;IACT,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,IAAI,CAAC,CAAC,GAAG;IACT,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX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"}},
    {"offset": {"line": 2951, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2955, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@stablelib/sha512/sha512.ts"],"sourcesContent":["// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\n\n/**\n * Package sha512 implements SHA-2-512 cryptographic hash function.\n */\n\nimport { SerializableHash } from \"@stablelib/hash\";\nimport { readUint32BE, writeUint32BE } from \"@stablelib/binary\";\nimport { wipe } from \"@stablelib/wipe\";\n\nexport const DIGEST_LENGTH = 64;\nexport const BLOCK_SIZE = 128;\n\n/**\n * SHA-2-512 cryptographic hash algorithm.\n */\nexport class SHA512 implements SerializableHash {\n    /** Length of hash output */\n    readonly digestLength: number = DIGEST_LENGTH;\n\n    /** Block size */\n    readonly blockSize: number = BLOCK_SIZE;\n\n    // Note: Int32Array is used instead of Uint32Array for performance reasons.\n    protected _stateHi = new Int32Array(8); // hash state, high bytes\n    protected _stateLo = new Int32Array(8); // hash state, low bytes\n    private _tempHi = new Int32Array(16); // temporary state, high bytes\n    private _tempLo = new Int32Array(16); // temporary state, low bytes\n    private _buffer = new Uint8Array(256); // buffer for data to hash\n    private _bufferLength = 0; // number of bytes in buffer\n    private _bytesHashed = 0; // number of total bytes hashed\n    private _finished = false; // indicates whether the hash was finalized\n\n    constructor() {\n        this.reset();\n    }\n\n    protected _initState() {\n        this._stateHi[0] = 0x6a09e667;\n        this._stateHi[1] = 0xbb67ae85;\n        this._stateHi[2] = 0x3c6ef372;\n        this._stateHi[3] = 0xa54ff53a;\n        this._stateHi[4] = 0x510e527f;\n        this._stateHi[5] = 0x9b05688c;\n        this._stateHi[6] = 0x1f83d9ab;\n        this._stateHi[7] = 0x5be0cd19;\n\n        this._stateLo[0] = 0xf3bcc908;\n        this._stateLo[1] = 0x84caa73b;\n        this._stateLo[2] = 0xfe94f82b;\n        this._stateLo[3] = 0x5f1d36f1;\n        this._stateLo[4] = 0xade682d1;\n        this._stateLo[5] = 0x2b3e6c1f;\n        this._stateLo[6] = 0xfb41bd6b;\n        this._stateLo[7] = 0x137e2179;\n    }\n\n    /**\n     * Resets hash state making it possible\n     * to re-use this instance to hash other data.\n     */\n    reset(): this {\n        this._initState();\n        this._bufferLength = 0;\n        this._bytesHashed = 0;\n        this._finished = false;\n        return this;\n    }\n\n    /**\n     * Cleans internal buffers and resets hash state.\n     */\n    clean() {\n        wipe(this._buffer);\n        wipe(this._tempHi);\n        wipe(this._tempLo);\n        this.reset();\n    }\n\n    /**\n     * Updates hash state with the given data.\n     *\n     * Throws error when trying to update already finalized hash:\n     * instance must be reset to update it again.\n     */\n    update(data: Uint8Array, dataLength: number = data.length): this {\n        if (this._finished) {\n            throw new Error(\"SHA512: can't update because hash was finished.\");\n        }\n        let dataPos = 0;\n        this._bytesHashed += dataLength;\n        if (this._bufferLength > 0) {\n            while (this._bufferLength < BLOCK_SIZE && dataLength > 0) {\n                this._buffer[this._bufferLength++] = data[dataPos++];\n                dataLength--;\n            }\n            if (this._bufferLength === this.blockSize) {\n                hashBlocks(this._tempHi, this._tempLo, this._stateHi, this._stateLo,\n                    this._buffer, 0, this.blockSize);\n                this._bufferLength = 0;\n            }\n        }\n        if (dataLength >= this.blockSize) {\n            dataPos = hashBlocks(this._tempHi, this._tempLo, this._stateHi, this._stateLo,\n                data, dataPos, dataLength);\n            dataLength %= this.blockSize;\n        }\n        while (dataLength > 0) {\n            this._buffer[this._bufferLength++] = data[dataPos++];\n            dataLength--;\n        }\n        return this;\n    }\n\n    /**\n     * Finalizes hash state and puts hash into out.\n     * If hash was already finalized, puts the same value.\n     */\n    finish(out: Uint8Array): this {\n        if (!this._finished) {\n            const bytesHashed = this._bytesHashed;\n            const left = this._bufferLength;\n            const bitLenHi = (bytesHashed / 0x20000000) | 0;\n            const bitLenLo = bytesHashed << 3;\n            const padLength = (bytesHashed % 128 < 112) ? 128 : 256;\n\n            this._buffer[left] = 0x80;\n            for (let i = left + 1; i < padLength - 8; i++) {\n                this._buffer[i] = 0;\n            }\n            writeUint32BE(bitLenHi, this._buffer, padLength - 8);\n            writeUint32BE(bitLenLo, this._buffer, padLength - 4);\n\n            hashBlocks(this._tempHi, this._tempLo, this._stateHi, this._stateLo, this._buffer, 0, padLength);\n\n            this._finished = true;\n        }\n\n        for (let i = 0; i < this.digestLength / 8; i++) {\n            writeUint32BE(this._stateHi[i], out, i * 8);\n            writeUint32BE(this._stateLo[i], out, i * 8 + 4);\n        }\n\n        return this;\n    }\n\n    /**\n     * Returns the final hash digest.\n     */\n    digest(): Uint8Array {\n        const out = new Uint8Array(this.digestLength);\n        this.finish(out);\n        return out;\n    }\n\n    /**\n     * Function useful for HMAC/PBKDF2 optimization. Returns hash state to be\n     * used with restoreState(). Only chain value is saved, not buffers or\n     * other state variables.\n     */\n    saveState(): SavedState {\n        if (this._finished) {\n            throw new Error(\"SHA256: cannot save finished state\");\n        }\n        return {\n            stateHi: new Int32Array(this._stateHi),\n            stateLo: new Int32Array(this._stateLo),\n            buffer: this._bufferLength > 0 ? new Uint8Array(this._buffer) : undefined,\n            bufferLength: this._bufferLength,\n            bytesHashed: this._bytesHashed\n        };\n    }\n\n    /**\n     * Function useful for HMAC/PBKDF2 optimization. Restores state saved by\n     * saveState() and sets bytesHashed to the given value.\n     */\n    restoreState(savedState: SavedState): this {\n        this._stateHi.set(savedState.stateHi);\n        this._stateLo.set(savedState.stateLo);\n        this._bufferLength = savedState.bufferLength;\n        if (savedState.buffer) {\n            this._buffer.set(savedState.buffer);\n        }\n        this._bytesHashed = savedState.bytesHashed;\n        this._finished = false;\n        return this;\n    }\n\n    /**\n     * Cleans state returned by saveState().\n     */\n    cleanSavedState(savedState: SavedState) {\n        wipe(savedState.stateHi);\n        wipe(savedState.stateLo);\n        if (savedState.buffer) {\n            wipe(savedState.buffer);\n        }\n        savedState.bufferLength = 0;\n        savedState.bytesHashed = 0;\n    }\n}\n\nexport type SavedState = {\n    stateHi: Int32Array;\n    stateLo: Int32Array;\n    buffer: Uint8Array | undefined;\n    bufferLength: number;\n    bytesHashed: number;\n};\n\n// Constants\nconst K = new Int32Array([\n    0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n    0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n    0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n    0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n    0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n    0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n    0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n    0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n    0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n    0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n    0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n    0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n    0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n    0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n    0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n    0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n    0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n    0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n    0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n    0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n    0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n    0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n    0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n    0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n    0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n    0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n    0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n    0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n    0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n    0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n    0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n    0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n    0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n    0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n    0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n    0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n    0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n    0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n    0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n    0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n]);\n\n\nfunction hashBlocks(wh: Int32Array, wl: Int32Array, hh: Int32Array, hl: Int32Array,\n    m: Uint8Array, pos: number, len: number): number {\n\n    let ah0 = hh[0],\n        ah1 = hh[1],\n        ah2 = hh[2],\n        ah3 = hh[3],\n        ah4 = hh[4],\n        ah5 = hh[5],\n        ah6 = hh[6],\n        ah7 = hh[7],\n\n        al0 = hl[0],\n        al1 = hl[1],\n        al2 = hl[2],\n        al3 = hl[3],\n        al4 = hl[4],\n        al5 = hl[5],\n        al6 = hl[6],\n        al7 = hl[7];\n\n    let h: number, l: number;\n    let th: number, tl: number;\n    let a: number, b: number, c: number, d: number;\n\n    while (len >= 128) {\n        for (let i = 0; i < 16; i++) {\n            const j = 8 * i + pos;\n            wh[i] = readUint32BE(m, j);\n            wl[i] = readUint32BE(m, j + 4);\n        }\n        for (let i = 0; i < 80; i++) {\n            let bh0 = ah0;\n            let bh1 = ah1;\n            let bh2 = ah2;\n            let bh3 = ah3;\n            let bh4 = ah4;\n            let bh5 = ah5;\n            let bh6 = ah6;\n            let bh7 = ah7;\n\n            let bl0 = al0;\n            let bl1 = al1;\n            let bl2 = al2;\n            let bl3 = al3;\n            let bl4 = al4;\n            let bl5 = al5;\n            let bl6 = al6;\n            let bl7 = al7;\n\n            // add\n            h = ah7;\n            l = al7;\n\n            a = l & 0xffff; b = l >>> 16;\n            c = h & 0xffff; d = h >>> 16;\n\n            // Sigma1\n            h = ((ah4 >>> 14) | (al4 << (32 - 14))) ^ ((ah4 >>> 18) |\n                (al4 << (32 - 18))) ^ ((al4 >>> (41 - 32)) | (ah4 << (32 - (41 - 32))));\n            l = ((al4 >>> 14) | (ah4 << (32 - 14))) ^ ((al4 >>> 18) |\n                (ah4 << (32 - 18))) ^ ((ah4 >>> (41 - 32)) | (al4 << (32 - (41 - 32))));\n\n            a += l & 0xffff; b += l >>> 16;\n            c += h & 0xffff; d += h >>> 16;\n\n            // Ch\n            h = (ah4 & ah5) ^ (~ah4 & ah6);\n            l = (al4 & al5) ^ (~al4 & al6);\n\n            a += l & 0xffff; b += l >>> 16;\n            c += h & 0xffff; d += h >>> 16;\n\n            // K\n            h = K[i * 2];\n            l = K[i * 2 + 1];\n\n            a += l & 0xffff; b += l >>> 16;\n            c += h & 0xffff; d += h >>> 16;\n\n            // w\n            h = wh[i % 16];\n            l = wl[i % 16];\n\n            a += l & 0xffff; b += l >>> 16;\n            c += h & 0xffff; d += h >>> 16;\n\n            b += a >>> 16;\n            c += b >>> 16;\n            d += c >>> 16;\n\n            th = c & 0xffff | d << 16;\n            tl = a & 0xffff | b << 16;\n\n            // add\n            h = th;\n            l = tl;\n\n            a = l & 0xffff; b = l >>> 16;\n            c = h & 0xffff; d = h >>> 16;\n\n            // Sigma0\n            h = ((ah0 >>> 28) | (al0 << (32 - 28))) ^ ((al0 >>> (34 - 32)) |\n                (ah0 << (32 - (34 - 32)))) ^ ((al0 >>> (39 - 32)) | (ah0 << (32 - (39 - 32))));\n            l = ((al0 >>> 28) | (ah0 << (32 - 28))) ^ ((ah0 >>> (34 - 32)) |\n                (al0 << (32 - (34 - 32)))) ^ ((ah0 >>> (39 - 32)) | (al0 << (32 - (39 - 32))));\n\n            a += l & 0xffff; b += l >>> 16;\n            c += h & 0xffff; d += h >>> 16;\n\n            // Maj\n            h = (ah0 & ah1) ^ (ah0 & ah2) ^ (ah1 & ah2);\n            l = (al0 & al1) ^ (al0 & al2) ^ (al1 & al2);\n\n            a += l & 0xffff; b += l >>> 16;\n            c += h & 0xffff; d += h >>> 16;\n\n            b += a >>> 16;\n            c += b >>> 16;\n            d += c >>> 16;\n\n            bh7 = (c & 0xffff) | (d << 16);\n            bl7 = (a & 0xffff) | (b << 16);\n\n            // add\n            h = bh3;\n            l = bl3;\n\n            a = l & 0xffff; b = l >>> 16;\n            c = h & 0xffff; d = h >>> 16;\n\n            h = th;\n            l = tl;\n\n            a += l & 0xffff; b += l >>> 16;\n            c += h & 0xffff; d += h >>> 16;\n\n            b += a >>> 16;\n            c += b >>> 16;\n            d += c >>> 16;\n\n            bh3 = (c & 0xffff) | (d << 16);\n            bl3 = (a & 0xffff) | (b << 16);\n\n            ah1 = bh0;\n            ah2 = bh1;\n            ah3 = bh2;\n            ah4 = bh3;\n            ah5 = bh4;\n            ah6 = bh5;\n            ah7 = bh6;\n            ah0 = bh7;\n\n            al1 = bl0;\n            al2 = bl1;\n            al3 = bl2;\n            al4 = bl3;\n            al5 = bl4;\n            al6 = bl5;\n            al7 = bl6;\n            al0 = bl7;\n\n            if (i % 16 === 15) {\n                for (let j = 0; j < 16; j++) {\n                    // add\n                    h = wh[j];\n                    l = wl[j];\n\n                    a = l & 0xffff; b = l >>> 16;\n                    c = h & 0xffff; d = h >>> 16;\n\n                    h = wh[(j + 9) % 16];\n                    l = wl[(j + 9) % 16];\n\n                    a += l & 0xffff; b += l >>> 16;\n                    c += h & 0xffff; d += h >>> 16;\n\n                    // sigma0\n                    th = wh[(j + 1) % 16];\n                    tl = wl[(j + 1) % 16];\n                    h = ((th >>> 1) | (tl << (32 - 1))) ^ ((th >>> 8) |\n                        (tl << (32 - 8))) ^ (th >>> 7);\n                    l = ((tl >>> 1) | (th << (32 - 1))) ^ ((tl >>> 8) |\n                        (th << (32 - 8))) ^ ((tl >>> 7) | (th << (32 - 7)));\n\n                    a += l & 0xffff; b += l >>> 16;\n                    c += h & 0xffff; d += h >>> 16;\n\n                    // sigma1\n                    th = wh[(j + 14) % 16];\n                    tl = wl[(j + 14) % 16];\n                    h = ((th >>> 19) | (tl << (32 - 19))) ^ ((tl >>> (61 - 32)) |\n                        (th << (32 - (61 - 32)))) ^ (th >>> 6);\n                    l = ((tl >>> 19) | (th << (32 - 19))) ^ ((th >>> (61 - 32)) |\n                        (tl << (32 - (61 - 32)))) ^ ((tl >>> 6) | (th << (32 - 6)));\n\n                    a += l & 0xffff; b += l >>> 16;\n                    c += h & 0xffff; d += h >>> 16;\n\n                    b += a >>> 16;\n                    c += b >>> 16;\n                    d += c >>> 16;\n\n                    wh[j] = (c & 0xffff) | (d << 16);\n                    wl[j] = (a & 0xffff) | (b << 16);\n                }\n            }\n        }\n\n        // add\n        h = ah0;\n        l = al0;\n\n        a = l & 0xffff; b = l >>> 16;\n        c = h & 0xffff; d = h >>> 16;\n\n        h = hh[0];\n        l = hl[0];\n\n        a += l & 0xffff; b += l >>> 16;\n        c += h & 0xffff; d += h >>> 16;\n\n        b += a >>> 16;\n        c += b >>> 16;\n        d += c >>> 16;\n\n        hh[0] = ah0 = (c & 0xffff) | (d << 16);\n        hl[0] = al0 = (a & 0xffff) | (b << 16);\n\n        h = ah1;\n        l = al1;\n\n        a = l & 0xffff; b = l >>> 16;\n        c = h & 0xffff; d = h >>> 16;\n\n        h = hh[1];\n        l = hl[1];\n\n        a += l & 0xffff; b += l >>> 16;\n        c += h & 0xffff; d += h >>> 16;\n\n        b += a >>> 16;\n        c += b >>> 16;\n        d += c >>> 16;\n\n        hh[1] = ah1 = (c & 0xffff) | (d << 16);\n        hl[1] = al1 = (a & 0xffff) | (b << 16);\n\n        h = ah2;\n        l = al2;\n\n        a = l & 0xffff; b = l >>> 16;\n        c = h & 0xffff; d = h >>> 16;\n\n        h = hh[2];\n        l = hl[2];\n\n        a += l & 0xffff; b += l >>> 16;\n        c += h & 0xffff; d += h >>> 16;\n\n        b += a >>> 16;\n        c += b >>> 16;\n        d += c >>> 16;\n\n        hh[2] = ah2 = (c & 0xffff) | (d << 16);\n        hl[2] = al2 = (a & 0xffff) | (b << 16);\n\n        h = ah3;\n        l = al3;\n\n        a = l & 0xffff; b = l >>> 16;\n        c = h & 0xffff; d = h >>> 16;\n\n        h = hh[3];\n        l = hl[3];\n\n        a += l & 0xffff; b += l >>> 16;\n        c += h & 0xffff; d += h >>> 16;\n\n        b += a >>> 16;\n        c += b >>> 16;\n        d += c >>> 16;\n\n        hh[3] = ah3 = (c & 0xffff) | (d << 16);\n        hl[3] = al3 = (a & 0xffff) | (b << 16);\n\n        h = ah4;\n        l = al4;\n\n        a = l & 0xffff; b = l >>> 16;\n        c = h & 0xffff; d = h >>> 16;\n\n        h = hh[4];\n        l = hl[4];\n\n        a += l & 0xffff; b += l >>> 16;\n        c += h & 0xffff; d += h >>> 16;\n\n        b += a >>> 16;\n        c += b >>> 16;\n        d += c >>> 16;\n\n        hh[4] = ah4 = (c & 0xffff) | (d << 16);\n        hl[4] = al4 = (a & 0xffff) | (b << 16);\n\n        h = ah5;\n        l = al5;\n\n        a = l & 0xffff; b = l >>> 16;\n        c = h & 0xffff; d = h >>> 16;\n\n        h = hh[5];\n        l = hl[5];\n\n        a += l & 0xffff; b += l >>> 16;\n        c += h & 0xffff; d += h >>> 16;\n\n        b += a >>> 16;\n        c += b >>> 16;\n        d += c >>> 16;\n\n        hh[5] = ah5 = (c & 0xffff) | (d << 16);\n        hl[5] = al5 = (a & 0xffff) | (b << 16);\n\n        h = ah6;\n        l = al6;\n\n        a = l & 0xffff; b = l >>> 16;\n        c = h & 0xffff; d = h >>> 16;\n\n        h = hh[6];\n        l = hl[6];\n\n        a += l & 0xffff; b += l >>> 16;\n        c += h & 0xffff; d += h >>> 16;\n\n        b += a >>> 16;\n        c += b >>> 16;\n        d += c >>> 16;\n\n        hh[6] = ah6 = (c & 0xffff) | (d << 16);\n        hl[6] = al6 = (a & 0xffff) | (b << 16);\n\n        h = ah7;\n        l = al7;\n\n        a = l & 0xffff; b = l >>> 16;\n        c = h & 0xffff; d = h >>> 16;\n\n        h = hh[7];\n        l = hl[7];\n\n        a += l & 0xffff; b += l >>> 16;\n        c += h & 0xffff; d += h >>> 16;\n\n        b += a >>> 16;\n        c += b >>> 16;\n        d += c >>> 16;\n\n        hh[7] = ah7 = (c & 0xffff) | (d << 16);\n        hl[7] = al7 = (a & 0xffff) | (b << 16);\n\n        pos += 128;\n        len -= 128;\n    }\n\n    return pos;\n}\n\nexport function hash(data: Uint8Array): Uint8Array {\n    const h = new SHA512();\n    h.update(data);\n    const digest = h.digest();\n    h.clean();\n    return digest;\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 3610, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3614, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@stablelib/ed25519/ed25519.ts"],"sourcesContent":["// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\n\n/**\n * Package ed25519 implements Ed25519 public-key signature algorithm.\n */\n\nimport { randomBytes, RandomSource } from \"@stablelib/random\";\nimport { hash, SHA512 } from \"@stablelib/sha512\";\nimport { wipe } from \"@stablelib/wipe\";\n\nexport const SIGNATURE_LENGTH = 64;\nexport const PUBLIC_KEY_LENGTH = 32;\nexport const SECRET_KEY_LENGTH = 64;\nexport const SEED_LENGTH = 32;\n\n// TODO(dchest): some functions are copies of ../kex/x25519.\n// Find a way to combine them without opening up to public.\n\n// Ported from TweetNaCl.js, which was ported from TweetNaCl\n// by Dmitry Chestnykh and Devi Mandiri.\n// Public domain.\n// https://tweetnacl.js.org\n\n// TweetNaCl contributors:\n// Daniel J. Bernstein, Bernard van Gastel, Wesley Janssen,\n// Tanja Lange, Peter Schwabe, Sjaak Smetsers.\n// Public domain.\n// https://tweetnacl.cr.yp.to/\n\ntype GF = Float64Array;\n\n// Returns new zero-filled 16-element GF (Float64Array).\n// If passed an array of numbers, prefills the returned\n// array with them.\n//\n// We use Float64Array, because we need 48-bit numbers\n// for this implementation.\nfunction gf(init?: number[]): GF {\n    const r = new Float64Array(16);\n    if (init) {\n        for (let i = 0; i < init.length; i++) {\n            r[i] = init[i];\n        }\n    }\n    return r;\n}\n\n// Base point.\nconst _9 = new Uint8Array(32); _9[0] = 9;\n\nconst gf0 = gf();\n\nconst gf1 = gf([1]);\n\nconst D = gf([\n    0x78a3, 0x1359, 0x4dca, 0x75eb, 0xd8ab, 0x4141, 0x0a4d, 0x0070,\n    0xe898, 0x7779, 0x4079, 0x8cc7, 0xfe73, 0x2b6f, 0x6cee, 0x5203\n]);\n\nconst D2 = gf([\n    0xf159, 0x26b2, 0x9b94, 0xebd6, 0xb156, 0x8283, 0x149a, 0x00e0,\n    0xd130, 0xeef3, 0x80f2, 0x198e, 0xfce7, 0x56df, 0xd9dc, 0x2406\n]);\n\nconst X = gf([\n    0xd51a, 0x8f25, 0x2d60, 0xc956, 0xa7b2, 0x9525, 0xc760, 0x692c,\n    0xdc5c, 0xfdd6, 0xe231, 0xc0a4, 0x53fe, 0xcd6e, 0x36d3, 0x2169\n]);\n\nconst Y = gf([\n    0x6658, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666,\n    0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666\n]);\n\nconst I = gf([\n    0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43,\n    0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83\n]);\n\nfunction set25519(r: GF, a: GF) {\n    for (let i = 0; i < 16; i++) {\n        r[i] = a[i] | 0;\n    }\n}\n\nfunction car25519(o: GF) {\n    let c = 1;\n    for (let i = 0; i < 16; i++) {\n        let v = o[i] + c + 65535;\n        c = Math.floor(v / 65536);\n        o[i] = v - c * 65536;\n    }\n    o[0] += c - 1 + 37 * (c - 1);\n}\n\nfunction sel25519(p: GF, q: GF, b: number) {\n    const c = ~(b - 1);\n    for (let i = 0; i < 16; i++) {\n        const t = c & (p[i] ^ q[i]);\n        p[i] ^= t;\n        q[i] ^= t;\n    }\n}\n\nfunction pack25519(o: Uint8Array, n: GF) {\n    const m = gf();\n    const t = gf();\n    for (let i = 0; i < 16; i++) {\n        t[i] = n[i];\n    }\n    car25519(t);\n    car25519(t);\n    car25519(t);\n    for (let j = 0; j < 2; j++) {\n        m[0] = t[0] - 0xffed;\n        for (let i = 1; i < 15; i++) {\n            m[i] = t[i] - 0xffff - ((m[i - 1] >> 16) & 1);\n            m[i - 1] &= 0xffff;\n        }\n        m[15] = t[15] - 0x7fff - ((m[14] >> 16) & 1);\n        const b = (m[15] >> 16) & 1;\n        m[14] &= 0xffff;\n        sel25519(t, m, 1 - b);\n    }\n    for (let i = 0; i < 16; i++) {\n        o[2 * i] = t[i] & 0xff;\n        o[2 * i + 1] = t[i] >> 8;\n    }\n}\n\nfunction verify32(x: Uint8Array, y: Uint8Array) {\n    let d = 0;\n    for (let i = 0; i < 32; i++) {\n        d |= x[i] ^ y[i];\n    }\n    return (1 & ((d - 1) >>> 8)) - 1;\n}\n\n\nfunction neq25519(a: GF, b: GF) {\n    const c = new Uint8Array(32);\n    const d = new Uint8Array(32);\n    pack25519(c, a);\n    pack25519(d, b);\n    return verify32(c, d);\n}\n\nfunction par25519(a: GF) {\n    const d = new Uint8Array(32);\n    pack25519(d, a);\n    return d[0] & 1;\n}\n\nfunction unpack25519(o: GF, n: Uint8Array) {\n    for (let i = 0; i < 16; i++) {\n        o[i] = n[2 * i] + (n[2 * i + 1] << 8);\n    }\n    o[15] &= 0x7fff;\n}\n\nfunction add(o: GF, a: GF, b: GF) {\n    for (let i = 0; i < 16; i++) {\n        o[i] = a[i] + b[i];\n    }\n}\n\nfunction sub(o: GF, a: GF, b: GF) {\n    for (let i = 0; i < 16; i++) {\n        o[i] = a[i] - b[i];\n    }\n}\n\nfunction mul(o: GF, a: GF, b: GF) {\n    let v: number, c: number,\n        t0 = 0, t1 = 0, t2 = 0, t3 = 0, t4 = 0, t5 = 0, t6 = 0, t7 = 0,\n        t8 = 0, t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0,\n        t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0,\n        t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0,\n        b0 = b[0],\n        b1 = b[1],\n        b2 = b[2],\n        b3 = b[3],\n        b4 = b[4],\n        b5 = b[5],\n        b6 = b[6],\n        b7 = b[7],\n        b8 = b[8],\n        b9 = b[9],\n        b10 = b[10],\n        b11 = b[11],\n        b12 = b[12],\n        b13 = b[13],\n        b14 = b[14],\n        b15 = b[15];\n\n    v = a[0];\n    t0 += v * b0;\n    t1 += v * b1;\n    t2 += v * b2;\n    t3 += v * b3;\n    t4 += v * b4;\n    t5 += v * b5;\n    t6 += v * b6;\n    t7 += v * b7;\n    t8 += v * b8;\n    t9 += v * b9;\n    t10 += v * b10;\n    t11 += v * b11;\n    t12 += v * b12;\n    t13 += v * b13;\n    t14 += v * b14;\n    t15 += v * b15;\n    v = a[1];\n    t1 += v * b0;\n    t2 += v * b1;\n    t3 += v * b2;\n    t4 += v * b3;\n    t5 += v * b4;\n    t6 += v * b5;\n    t7 += v * b6;\n    t8 += v * b7;\n    t9 += v * b8;\n    t10 += v * b9;\n    t11 += v * b10;\n    t12 += v * b11;\n    t13 += v * b12;\n    t14 += v * b13;\n    t15 += v * b14;\n    t16 += v * b15;\n    v = a[2];\n    t2 += v * b0;\n    t3 += v * b1;\n    t4 += v * b2;\n    t5 += v * b3;\n    t6 += v * b4;\n    t7 += v * b5;\n    t8 += v * b6;\n    t9 += v * b7;\n    t10 += v * b8;\n    t11 += v * b9;\n    t12 += v * b10;\n    t13 += v * b11;\n    t14 += v * b12;\n    t15 += v * b13;\n    t16 += v * b14;\n    t17 += v * b15;\n    v = a[3];\n    t3 += v * b0;\n    t4 += v * b1;\n    t5 += v * b2;\n    t6 += v * b3;\n    t7 += v * b4;\n    t8 += v * b5;\n    t9 += v * b6;\n    t10 += v * b7;\n    t11 += v * b8;\n    t12 += v * b9;\n    t13 += v * b10;\n    t14 += v * b11;\n    t15 += v * b12;\n    t16 += v * b13;\n    t17 += v * b14;\n    t18 += v * b15;\n    v = a[4];\n    t4 += v * b0;\n    t5 += v * b1;\n    t6 += v * b2;\n    t7 += v * b3;\n    t8 += v * b4;\n    t9 += v * b5;\n    t10 += v * b6;\n    t11 += v * b7;\n    t12 += v * b8;\n    t13 += v * b9;\n    t14 += v * b10;\n    t15 += v * b11;\n    t16 += v * b12;\n    t17 += v * b13;\n    t18 += v * b14;\n    t19 += v * b15;\n    v = a[5];\n    t5 += v * b0;\n    t6 += v * b1;\n    t7 += v * b2;\n    t8 += v * b3;\n    t9 += v * b4;\n    t10 += v * b5;\n    t11 += v * b6;\n    t12 += v * b7;\n    t13 += v * b8;\n    t14 += v * b9;\n    t15 += v * b10;\n    t16 += v * b11;\n    t17 += v * b12;\n    t18 += v * b13;\n    t19 += v * b14;\n    t20 += v * b15;\n    v = a[6];\n    t6 += v * b0;\n    t7 += v * b1;\n    t8 += v * b2;\n    t9 += v * b3;\n    t10 += v * b4;\n    t11 += v * b5;\n    t12 += v * b6;\n    t13 += v * b7;\n    t14 += v * b8;\n    t15 += v * b9;\n    t16 += v * b10;\n    t17 += v * b11;\n    t18 += v * b12;\n    t19 += v * b13;\n    t20 += v * b14;\n    t21 += v * b15;\n    v = a[7];\n    t7 += v * b0;\n    t8 += v * b1;\n    t9 += v * b2;\n    t10 += v * b3;\n    t11 += v * b4;\n    t12 += v * b5;\n    t13 += v * b6;\n    t14 += v * b7;\n    t15 += v * b8;\n    t16 += v * b9;\n    t17 += v * b10;\n    t18 += v * b11;\n    t19 += v * b12;\n    t20 += v * b13;\n    t21 += v * b14;\n    t22 += v * b15;\n    v = a[8];\n    t8 += v * b0;\n    t9 += v * b1;\n    t10 += v * b2;\n    t11 += v * b3;\n    t12 += v * b4;\n    t13 += v * b5;\n    t14 += v * b6;\n    t15 += v * b7;\n    t16 += v * b8;\n    t17 += v * b9;\n    t18 += v * b10;\n    t19 += v * b11;\n    t20 += v * b12;\n    t21 += v * b13;\n    t22 += v * b14;\n    t23 += v * b15;\n    v = a[9];\n    t9 += v * b0;\n    t10 += v * b1;\n    t11 += v * b2;\n    t12 += v * b3;\n    t13 += v * b4;\n    t14 += v * b5;\n    t15 += v * b6;\n    t16 += v * b7;\n    t17 += v * b8;\n    t18 += v * b9;\n    t19 += v * b10;\n    t20 += v * b11;\n    t21 += v * b12;\n    t22 += v * b13;\n    t23 += v * b14;\n    t24 += v * b15;\n    v = a[10];\n    t10 += v * b0;\n    t11 += v * b1;\n    t12 += v * b2;\n    t13 += v * b3;\n    t14 += v * b4;\n    t15 += v * b5;\n    t16 += v * b6;\n    t17 += v * b7;\n    t18 += v * b8;\n    t19 += v * b9;\n    t20 += v * b10;\n    t21 += v * b11;\n    t22 += v * b12;\n    t23 += v * b13;\n    t24 += v * b14;\n    t25 += v * b15;\n    v = a[11];\n    t11 += v * b0;\n    t12 += v * b1;\n    t13 += v * b2;\n    t14 += v * b3;\n    t15 += v * b4;\n    t16 += v * b5;\n    t17 += v * b6;\n    t18 += v * b7;\n    t19 += v * b8;\n    t20 += v * b9;\n    t21 += v * b10;\n    t22 += v * b11;\n    t23 += v * b12;\n    t24 += v * b13;\n    t25 += v * b14;\n    t26 += v * b15;\n    v = a[12];\n    t12 += v * b0;\n    t13 += v * b1;\n    t14 += v * b2;\n    t15 += v * b3;\n    t16 += v * b4;\n    t17 += v * b5;\n    t18 += v * b6;\n    t19 += v * b7;\n    t20 += v * b8;\n    t21 += v * b9;\n    t22 += v * b10;\n    t23 += v * b11;\n    t24 += v * b12;\n    t25 += v * b13;\n    t26 += v * b14;\n    t27 += v * b15;\n    v = a[13];\n    t13 += v * b0;\n    t14 += v * b1;\n    t15 += v * b2;\n    t16 += v * b3;\n    t17 += v * b4;\n    t18 += v * b5;\n    t19 += v * b6;\n    t20 += v * b7;\n    t21 += v * b8;\n    t22 += v * b9;\n    t23 += v * b10;\n    t24 += v * b11;\n    t25 += v * b12;\n    t26 += v * b13;\n    t27 += v * b14;\n    t28 += v * b15;\n    v = a[14];\n    t14 += v * b0;\n    t15 += v * b1;\n    t16 += v * b2;\n    t17 += v * b3;\n    t18 += v * b4;\n    t19 += v * b5;\n    t20 += v * b6;\n    t21 += v * b7;\n    t22 += v * b8;\n    t23 += v * b9;\n    t24 += v * b10;\n    t25 += v * b11;\n    t26 += v * b12;\n    t27 += v * b13;\n    t28 += v * b14;\n    t29 += v * b15;\n    v = a[15];\n    t15 += v * b0;\n    t16 += v * b1;\n    t17 += v * b2;\n    t18 += v * b3;\n    t19 += v * b4;\n    t20 += v * b5;\n    t21 += v * b6;\n    t22 += v * b7;\n    t23 += v * b8;\n    t24 += v * b9;\n    t25 += v * b10;\n    t26 += v * b11;\n    t27 += v * b12;\n    t28 += v * b13;\n    t29 += v * b14;\n    t30 += v * b15;\n\n    t0 += 38 * t16;\n    t1 += 38 * t17;\n    t2 += 38 * t18;\n    t3 += 38 * t19;\n    t4 += 38 * t20;\n    t5 += 38 * t21;\n    t6 += 38 * t22;\n    t7 += 38 * t23;\n    t8 += 38 * t24;\n    t9 += 38 * t25;\n    t10 += 38 * t26;\n    t11 += 38 * t27;\n    t12 += 38 * t28;\n    t13 += 38 * t29;\n    t14 += 38 * t30;\n    // t15 left as is\n\n    // first car\n    c = 1;\n    v = t0 + c + 65535; c = Math.floor(v / 65536); t0 = v - c * 65536;\n    v = t1 + c + 65535; c = Math.floor(v / 65536); t1 = v - c * 65536;\n    v = t2 + c + 65535; c = Math.floor(v / 65536); t2 = v - c * 65536;\n    v = t3 + c + 65535; c = Math.floor(v / 65536); t3 = v - c * 65536;\n    v = t4 + c + 65535; c = Math.floor(v / 65536); t4 = v - c * 65536;\n    v = t5 + c + 65535; c = Math.floor(v / 65536); t5 = v - c * 65536;\n    v = t6 + c + 65535; c = Math.floor(v / 65536); t6 = v - c * 65536;\n    v = t7 + c + 65535; c = Math.floor(v / 65536); t7 = v - c * 65536;\n    v = t8 + c + 65535; c = Math.floor(v / 65536); t8 = v - c * 65536;\n    v = t9 + c + 65535; c = Math.floor(v / 65536); t9 = v - c * 65536;\n    v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;\n    v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;\n    v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;\n    v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;\n    v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;\n    v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;\n    t0 += c - 1 + 37 * (c - 1);\n\n    // second car\n    c = 1;\n    v = t0 + c + 65535; c = Math.floor(v / 65536); t0 = v - c * 65536;\n    v = t1 + c + 65535; c = Math.floor(v / 65536); t1 = v - c * 65536;\n    v = t2 + c + 65535; c = Math.floor(v / 65536); t2 = v - c * 65536;\n    v = t3 + c + 65535; c = Math.floor(v / 65536); t3 = v - c * 65536;\n    v = t4 + c + 65535; c = Math.floor(v / 65536); t4 = v - c * 65536;\n    v = t5 + c + 65535; c = Math.floor(v / 65536); t5 = v - c * 65536;\n    v = t6 + c + 65535; c = Math.floor(v / 65536); t6 = v - c * 65536;\n    v = t7 + c + 65535; c = Math.floor(v / 65536); t7 = v - c * 65536;\n    v = t8 + c + 65535; c = Math.floor(v / 65536); t8 = v - c * 65536;\n    v = t9 + c + 65535; c = Math.floor(v / 65536); t9 = v - c * 65536;\n    v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;\n    v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;\n    v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;\n    v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;\n    v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;\n    v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;\n    t0 += c - 1 + 37 * (c - 1);\n\n    o[0] = t0;\n    o[1] = t1;\n    o[2] = t2;\n    o[3] = t3;\n    o[4] = t4;\n    o[5] = t5;\n    o[6] = t6;\n    o[7] = t7;\n    o[8] = t8;\n    o[9] = t9;\n    o[10] = t10;\n    o[11] = t11;\n    o[12] = t12;\n    o[13] = t13;\n    o[14] = t14;\n    o[15] = t15;\n}\n\nfunction square(o: GF, a: GF) {\n    mul(o, a, a);\n}\n\nfunction inv25519(o: GF, i: GF) {\n    const c = gf();\n    let a: number;\n    for (a = 0; a < 16; a++) {\n        c[a] = i[a];\n    }\n    for (a = 253; a >= 0; a--) {\n        square(c, c);\n        if (a !== 2 && a !== 4) {\n            mul(c, c, i);\n        }\n    }\n    for (a = 0; a < 16; a++) {\n        o[a] = c[a];\n    }\n}\n\nfunction pow2523(o: GF, i: GF) {\n    const c = gf();\n    let a: number;\n    for (a = 0; a < 16; a++) {\n        c[a] = i[a];\n    }\n    for (a = 250; a >= 0; a--) {\n        square(c, c);\n        if (a !== 1) {\n            mul(c, c, i);\n        }\n    }\n    for (a = 0; a < 16; a++) {\n        o[a] = c[a];\n    }\n}\n\n\nfunction edadd(p: GF[], q: GF[]) {\n    const a = gf(), b = gf(), c = gf(),\n        d = gf(), e = gf(), f = gf(),\n        g = gf(), h = gf(), t = gf();\n\n    sub(a, p[1], p[0]);\n    sub(t, q[1], q[0]);\n    mul(a, a, t);\n    add(b, p[0], p[1]);\n    add(t, q[0], q[1]);\n    mul(b, b, t);\n    mul(c, p[3], q[3]);\n    mul(c, c, D2);\n    mul(d, p[2], q[2]);\n    add(d, d, d);\n    sub(e, b, a);\n    sub(f, d, c);\n    add(g, d, c);\n    add(h, b, a);\n\n    mul(p[0], e, f);\n    mul(p[1], h, g);\n    mul(p[2], g, f);\n    mul(p[3], e, h);\n}\n\nfunction cswap(p: GF[], q: GF[], b: number) {\n    for (let i = 0; i < 4; i++) {\n        sel25519(p[i], q[i], b);\n    }\n}\n\nfunction pack(r: Uint8Array, p: GF[]) {\n    const tx = gf(), ty = gf(), zi = gf();\n    inv25519(zi, p[2]);\n    mul(tx, p[0], zi);\n    mul(ty, p[1], zi);\n    pack25519(r, ty);\n    r[31] ^= par25519(tx) << 7;\n}\n\nfunction scalarmult(p: GF[], q: GF[], s: Uint8Array) {\n    set25519(p[0], gf0);\n    set25519(p[1], gf1);\n    set25519(p[2], gf1);\n    set25519(p[3], gf0);\n    for (let i = 255; i >= 0; --i) {\n        const b = (s[(i / 8) | 0] >> (i & 7)) & 1;\n        cswap(p, q, b);\n        edadd(q, p);\n        edadd(p, p);\n        cswap(p, q, b);\n    }\n}\n\nfunction scalarbase(p: GF[], s: Uint8Array) {\n    const q = [gf(), gf(), gf(), gf()];\n    set25519(q[0], X);\n    set25519(q[1], Y);\n    set25519(q[2], gf1);\n    mul(q[3], X, Y);\n    scalarmult(p, q, s);\n}\n\nexport interface KeyPair {\n    publicKey: Uint8Array;\n    secretKey: Uint8Array;\n}\n\n// Generates key pair from secret 32-byte seed.\nexport function generateKeyPairFromSeed(seed: Uint8Array): KeyPair {\n    if (seed.length !== SEED_LENGTH) {\n        throw new Error(`ed25519: seed must be ${SEED_LENGTH} bytes`);\n    }\n\n    const d = hash(seed);\n    d[0] &= 248;\n    d[31] &= 127;\n    d[31] |= 64;\n\n    const publicKey = new Uint8Array(32);\n    const p = [gf(), gf(), gf(), gf()];\n    scalarbase(p, d);\n    pack(publicKey, p);\n\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n\n    return {\n        publicKey,\n        secretKey\n    };\n}\n\nexport function generateKeyPair(prng?: RandomSource): KeyPair {\n    const seed = randomBytes(32, prng);\n    const result = generateKeyPairFromSeed(seed);\n    wipe(seed);\n    return result;\n}\n\nexport function extractPublicKeyFromSecretKey(secretKey: Uint8Array): Uint8Array {\n    if (secretKey.length !== SECRET_KEY_LENGTH) {\n        throw new Error(`ed25519: secret key must be ${SECRET_KEY_LENGTH} bytes`);\n    }\n    return new Uint8Array(secretKey.subarray(32));\n}\n\nconst L = new Float64Array([\n    0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58, 0xd6, 0x9c, 0xf7, 0xa2,\n    0xde, 0xf9, 0xde, 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x10\n]);\n\nfunction modL(r: Uint8Array, x: Float64Array) {\n    let carry: number;\n    let i: number;\n    let j: number;\n    let k: number;\n    for (i = 63; i >= 32; --i) {\n        carry = 0;\n        for (j = i - 32, k = i - 12; j < k; ++j) {\n            x[j] += carry - 16 * x[i] * L[j - (i - 32)];\n            carry = Math.floor((x[j] + 128) / 256);\n            x[j] -= carry * 256;\n        }\n        x[j] += carry;\n        x[i] = 0;\n    }\n    carry = 0;\n    for (j = 0; j < 32; j++) {\n        x[j] += carry - (x[31] >> 4) * L[j];\n        carry = x[j] >> 8;\n        x[j] &= 255;\n    }\n    for (j = 0; j < 32; j++) {\n        x[j] -= carry * L[j];\n    }\n    for (i = 0; i < 32; i++) {\n        x[i + 1] += x[i] >> 8;\n        r[i] = x[i] & 255;\n    }\n}\n\nfunction reduce(r: Uint8Array) {\n    const x = new Float64Array(64);\n    for (let i = 0; i < 64; i++) {\n        x[i] = r[i];\n    }\n    for (let i = 0; i < 64; i++) {\n        r[i] = 0;\n    }\n    modL(r, x);\n}\n\n// Returns 64-byte signature of the message under the 64-byte secret key.\nexport function sign(secretKey: Uint8Array, message: Uint8Array): Uint8Array {\n    const x = new Float64Array(64);\n    const p = [gf(), gf(), gf(), gf()];\n\n    const d = hash(secretKey.subarray(0, 32));\n    d[0] &= 248;\n    d[31] &= 127;\n    d[31] |= 64;\n\n    const signature = new Uint8Array(64);\n    signature.set(d.subarray(32), 32);\n\n    const hs = new SHA512();\n    hs.update(signature.subarray(32));\n    hs.update(message);\n    const r = hs.digest();\n    hs.clean();\n    reduce(r);\n    scalarbase(p, r);\n    pack(signature, p);\n\n    hs.reset();\n    hs.update(signature.subarray(0, 32));\n    hs.update(secretKey.subarray(32));\n    hs.update(message);\n    const h = hs.digest();\n    reduce(h);\n\n    for (let i = 0; i < 32; i++) {\n        x[i] = r[i];\n    }\n    for (let i = 0; i < 32; i++) {\n        for (let j = 0; j < 32; j++) {\n            x[i + j] += h[i] * d[j];\n        }\n    }\n    modL(signature.subarray(32), x);\n\n    return signature;\n}\n\nfunction unpackneg(r: GF[], p: Uint8Array) {\n    const t = gf(), chk = gf(), num = gf(),\n        den = gf(), den2 = gf(), den4 = gf(),\n        den6 = gf();\n\n    set25519(r[2], gf1);\n    unpack25519(r[1], p);\n    square(num, r[1]);\n    mul(den, num, D);\n    sub(num, num, r[2]);\n    add(den, r[2], den);\n\n    square(den2, den);\n    square(den4, den2);\n    mul(den6, den4, den2);\n    mul(t, den6, num);\n    mul(t, t, den);\n\n    pow2523(t, t);\n    mul(t, t, num);\n    mul(t, t, den);\n    mul(t, t, den);\n    mul(r[0], t, den);\n\n    square(chk, r[0]);\n    mul(chk, chk, den);\n    if (neq25519(chk, num)) {\n        mul(r[0], r[0], I);\n    }\n\n    square(chk, r[0]);\n    mul(chk, chk, den);\n    if (neq25519(chk, num)) {\n        return -1;\n    }\n\n    if (par25519(r[0]) === (p[31] >> 7)) {\n        sub(r[0], gf0, r[0]);\n    }\n\n    mul(r[3], r[0], r[1]);\n    return 0;\n}\n\nexport function verify(publicKey: Uint8Array, message: Uint8Array, signature: Uint8Array): boolean {\n    const t = new Uint8Array(32);\n    const p = [gf(), gf(), gf(), gf()];\n    const q = [gf(), gf(), gf(), gf()];\n\n    if (signature.length !== SIGNATURE_LENGTH) {\n        throw new Error(`ed25519: signature must be ${SIGNATURE_LENGTH} bytes`);\n    }\n\n    if (unpackneg(q, publicKey)) {\n        return false;\n    }\n\n    const hs = new SHA512();\n    hs.update(signature.subarray(0, 32));\n    hs.update(publicKey);\n    hs.update(message);\n    const h = hs.digest();\n    reduce(h);\n    scalarmult(p, q, h);\n\n    scalarbase(q, signature.subarray(32));\n    edadd(p, q);\n    pack(t, p);\n\n    if (verify32(signature, t)) {\n        return false;\n    }\n    return true;\n}\n\n/**\n * Convert Ed25519 public key to X25519 public key.\n *\n * Throws if given an invalid public key.\n */\nexport function convertPublicKeyToX25519(publicKey: Uint8Array): Uint8Array {\n    let q = [gf(), gf(), gf(), gf()];\n\n    if (unpackneg(q, publicKey)) {\n        throw new Error(\"Ed25519: invalid public key\");\n    }\n\n    // Formula: montgomeryX = (edwardsY + 1)*inverse(1 - edwardsY) mod p\n    let a = gf();\n    let b = gf();\n    let y = q[1];\n    add(a, gf1, y);\n    sub(b, gf1, y);\n    inv25519(b, b);\n    mul(a, a, b);\n\n    let z = new Uint8Array(32);\n    pack25519(z, a);\n    return z;\n}\n\n/**\n *  Convert Ed25519 secret (private) key to X25519 secret key.\n */\nexport function convertSecretKeyToX25519(secretKey: Uint8Array): Uint8Array {\n    const d = hash(secretKey.subarray(0, 32));\n    d[0] &= 248;\n    d[31] &= 127;\n    d[31] |= 64;\n    const o = new Uint8Array(d.subarray(0, 32));\n    wipe(d);\n    return o;\n}\n"],"names":[],"mappings":"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CX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,IAAI,CAAC,CAAC,EAAE;IACR,MAAM,IAAI;IACV,MAAM,IAAI;IACV,MAAM,IAAI;IACV,MAAM,IAAI;IACV,MAAM,IAAI;IACV,MAAM,IAAI;IACV,MAAM,IAAI;IACV,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,IAAI,CAAC,CAAC,EAAE;IACR,MAAM,IAAI;IACV,MAAM,IAAI;IACV,MAAM,IAAI;IACV,MAAM,IAAI;IACV,MAAM,IAAI;IACV,MAAM,IAAI;IACV,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,IAAI,CAAC,CAAC,EAAE;IACR,MAAM,IAAI;IACV,MAAM,IAAI;IACV,MAAM,IAAI;IACV,MAAM,IAAI;IACV,MAAM,IAAI;IACV,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,IAAI,CAAC,CAAC,EAAE;IACR,MAAM,IAAI;IACV,MAAM,IAAI;IACV,MAAM,IAAI;IACV,MAAM,IAAI;IACV,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,IAAI,CAAC,CAAC,EAAE;IACR,MAAM,IAAI;IACV,MAAM,IAAI;IACV,MAAM,IAAI;IACV,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,IAAI,CAAC,CAAC,EAAE;IACR,MAAM,IAAI;IACV,MAAM,IAAI;IACV,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,IAAI,CAAC,CAAC,EAAE;IACR,MAAM,IAAI;IACV,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,IAAI,CAAC,CAAC,GAAG;IACT,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,IAAI,CAAC,CAAC,GAAG;IACT,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,IAAI,CAAC,CAAC,GAAG;IACT,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,IAAI,CAAC,CAAC,GAAG;IACT,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,IAAI,CAAC,CAAC,GAAG;IACT,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,IAAI,CAAC,CAAC,GAAG;IACT,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IACX,OAAO,IAAI;IAEX,MAAM,KAAK;IACX,MAAM,KAAK;IACX,MAAM,KAAK;IACX,MA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"}},
    {"offset": {"line": 4592, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}